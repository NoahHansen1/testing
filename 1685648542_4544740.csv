savedsearch_name,runs,app,search,user
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_512677397.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_517662399.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_593100905.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_667668145.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_674327909.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_702803813.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_726146738.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_731839847.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_793847663.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_871719041.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\"""""""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
"         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""""summary"""" file=""""RMD51f6e00fef357462e_92686715.stash_new"""" name=""""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"""" marker=""""report=\""""dbx_indexed_data_volumes\""""""""""",,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 ,,,,None
_ACCELERATE_DM_splunk_app_db_connect_DB_Connection_Metrics_ACCELERATE_,6075,,"'| summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DB_Connection_Metrics [  search (index=* OR index=_*) (index=_internal sourcetype=dbx_connection_pool_metrics) | eval nodename = ""Connection_Metrics""| eval short_name_wait=replace(name, "".pool.Wait"", """"), short_name_usage=replace(name, "".pool.Usage"", """") | rename count AS Connection_Metrics.count max AS Connection_Metrics.max median AS Connection_Metrics.median p75 AS Connection_Metrics.p75 p95 AS Connection_Metrics.p95 p99 AS Connection_Metrics.p99 value AS Connection_Metrics.value name AS Connection_Metrics.name short_name_wait AS Connection_Metrics.short_name_wait short_name_usage AS Connection_Metrics.short_name_usage | fields nodename, _time, host, source, sourcetype, Connection_Metrics.count, Connection_Metrics.max, Connection_Metrics.median, Connection_Metrics.p75, Connection_Metrics.p95, Connection_Metrics.p99, Connection_Metrics.value, Connection_Metrics.name, Connection_Metrics.short_name_wait, Connection_Metrics.short_name_usage ]' | summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DB_Connection_Metrics [  search (index=* OR index=_*) (index=_internal sourcetype=dbx_connection_pool_metrics) | eval nodename = ""Connection_Metrics""| eval short_name_wait=replace(name, "".pool.Wait"", """"), short_name_usage=replace(name, "".pool.Usage"", """") | rename count AS Connection_Metrics.count max AS Connection_Metrics.max median AS Connection_Metrics.median p75 AS Connection_Metrics.p75 p95 AS Connection_Metrics.p95 p99 AS Connection_Metrics.p99 value AS Connection_Metrics.value name AS Connection_Metrics.name short_name_wait AS Connection_Metrics.short_name_wait short_name_usage AS Connection_Metrics.short_name_usage | fields nodename, _time, host, source, sourcetype, Connection_Metrics.count, Connection_Metrics.max, Connection_Metrics.median, Connection_Metrics.p75, Connection_Metrics.p95, Connection_Metrics.p99, Connection_Metrics.value, Connection_Metrics.name, Connection_Metrics.short_name_wait, Connection_Metrics.short_name_usage ]",splunk-system-user
_ACCELERATE_DM_splunk_app_db_connect_DB_Health_ACCELERATE_,2025,,"'| summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DB_Health [  search (index=* OR index=_*) (sourcetype=dbx_health index=_internal) TRANS_OBJECT_ID=* | eval nodename = ""All_Records""| eval MESSAGE=if(isnotnull(MESSAGE),MESSAGE,""null""), SQL_STATE=if(isnotnull(SQL_STATE),SQL_STATE,""null""), SQL_CODE=if(isnotnull(SQL_CODE),SQL_CODE,""null"") | rename CONNECTION AS All_Records.CONNECTION DATABASE_TYPE AS All_Records.DATABASE_TYPE DB_SERVER AS All_Records.DB_SERVER DB_USER AS All_Records.DB_USER FUNCTION AS All_Records.FUNCTION SQL AS All_Records.SQL STATUS AS All_Records.STATUS TRANS_OBJECT_ID AS All_Records.TRANS_OBJECT_ID DURATION AS All_Records.DURATION ERROR_CODE AS All_Records.ERROR_CODE UPTIME AS All_Records.UPTIME LOGIN_USER AS All_Records.LOGIN_USER DATABASE AS All_Records.DATABASE FREE_MEMORY AS All_Records.FREE_MEMORY MEMORY_USED AS All_Records.MEMORY_USED TOTAL_MEMORY AS All_Records.TOTAL_MEMORY JDBC_USE_SSL AS All_Records.JDBC_USE_SSL STATE AS All_Records.STATE MESSAGE AS All_Records.MESSAGE SQL_STATE AS All_Records.SQL_STATE SQL_CODE AS All_Records.SQL_CODE | fields nodename, _time, host, source, sourcetype, All_Records.CONNECTION, All_Records.DATABASE_TYPE, All_Records.DB_SERVER, All_Records.DB_USER, All_Records.FUNCTION, All_Records.SQL, All_Records.STATUS, All_Records.TRANS_OBJECT_ID, All_Records.DURATION, All_Records.ERROR_CODE, All_Records.UPTIME, All_Records.LOGIN_USER, All_Records.DATABASE, All_Records.FREE_MEMORY, All_Records.MEMORY_USED, All_Records.TOTAL_MEMORY, All_Records.JDBC_USE_SSL, All_Records.STATE, All_Records.MESSAGE, All_Records.SQL_STATE, All_Records.SQL_CODE ]' | summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DB_Health [  search (index=* OR index=_*) (sourcetype=dbx_health index=_internal) TRANS_OBJECT_ID=* | eval nodename = ""All_Records""| eval MESSAGE=if(isnotnull(MESSAGE),MESSAGE,""null""), SQL_STATE=if(isnotnull(SQL_STATE),SQL_STATE,""null""), SQL_CODE=if(isnotnull(SQL_CODE),SQL_CODE,""null"") | rename CONNECTION AS All_Records.CONNECTION DATABASE_TYPE AS All_Records.DATABASE_TYPE DB_SERVER AS All_Records.DB_SERVER DB_USER AS All_Records.DB_USER FUNCTION AS All_Records.FUNCTION SQL AS All_Records.SQL STATUS AS All_Records.STATUS TRANS_OBJECT_ID AS All_Records.TRANS_OBJECT_ID DURATION AS All_Records.DURATION ERROR_CODE AS All_Records.ERROR_CODE UPTIME AS All_Records.UPTIME LOGIN_USER AS All_Records.LOGIN_USER DATABASE AS All_Records.DATABASE FREE_MEMORY AS All_Records.FREE_MEMORY MEMORY_USED AS All_Records.MEMORY_USED TOTAL_MEMORY AS All_Records.TOTAL_MEMORY JDBC_USE_SSL AS All_Records.JDBC_USE_SSL STATE AS All_Records.STATE MESSAGE AS All_Records.MESSAGE SQL_STATE AS All_Records.SQL_STATE SQL_CODE AS All_Records.SQL_CODE | fields nodename, _time, host, source, sourcetype, All_Records.CONNECTION, All_Records.DATABASE_TYPE, All_Records.DB_SERVER, All_Records.DB_USER, All_Records.FUNCTION, All_Records.SQL, All_Records.STATUS, All_Records.TRANS_OBJECT_ID, All_Records.DURATION, All_Records.ERROR_CODE, All_Records.UPTIME, All_Records.LOGIN_USER, All_Records.DATABASE, All_Records.FREE_MEMORY, All_Records.MEMORY_USED, All_Records.TOTAL_MEMORY, All_Records.JDBC_USE_SSL, All_Records.STATE, All_Records.MESSAGE, All_Records.SQL_STATE, All_Records.SQL_CODE ]",splunk-system-user
_ACCELERATE_DM_splunk_app_db_connect_DB_Health_Audit_ACCELERATE_,6075,,"'| summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DB_Health_Audit [  search (index=* OR index=_*) (index=_internal sourcetype=dbx_audit) | eval nodename = ""Audit_Record"" | rename connection_name AS Audit_Record.connection_name operation AS Audit_Record.operation sql AS Audit_Record.sql state AS Audit_Record.state message AS Audit_Record.message | fields nodename, _time, host, source, sourcetype, Audit_Record.connection_name, Audit_Record.operation, Audit_Record.sql, Audit_Record.state, Audit_Record.message ]' | summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DB_Health_Audit [  search (index=* OR index=_*) (index=_internal sourcetype=dbx_audit) | eval nodename = ""Audit_Record"" | rename connection_name AS Audit_Record.connection_name operation AS Audit_Record.operation sql AS Audit_Record.sql state AS Audit_Record.state message AS Audit_Record.message | fields nodename, _time, host, source, sourcetype, Audit_Record.connection_name, Audit_Record.operation, Audit_Record.sql, Audit_Record.state, Audit_Record.message ]",splunk-system-user
_ACCELERATE_DM_splunk_app_db_connect_DBX_Health_Metrics_ACCELERATE_,6075,,"'| summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DBX_Health_Metrics [  search (index=* OR index=_*) (index=_internal sourcetype=dbx_health_metrics) | eval nodename = ""Health_Metrics"" | rename max AS Health_Metrics.max median AS Health_Metrics.median name AS Health_Metrics.name p75 AS Health_Metrics.p75 p95 AS Health_Metrics.p95 p99 AS Health_Metrics.p99 value AS Health_Metrics.value | fields nodename, _time, host, source, sourcetype, Health_Metrics.max, Health_Metrics.median, Health_Metrics.name, Health_Metrics.p75, Health_Metrics.p95, Health_Metrics.p99, Health_Metrics.value ]' | summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DBX_Health_Metrics [  search (index=* OR index=_*) (index=_internal sourcetype=dbx_health_metrics) | eval nodename = ""Health_Metrics"" | rename max AS Health_Metrics.max median AS Health_Metrics.median name AS Health_Metrics.name p75 AS Health_Metrics.p75 p95 AS Health_Metrics.p95 p99 AS Health_Metrics.p99 value AS Health_Metrics.value | fields nodename, _time, host, source, sourcetype, Health_Metrics.max, Health_Metrics.median, Health_Metrics.name, Health_Metrics.p75, Health_Metrics.p95, Health_Metrics.p99, Health_Metrics.value ]",splunk-system-user
_ACCELERATE_DM_splunk_app_db_connect_DBX_Job_Metrics_ACCELERATE_,6075,,"'| summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DBX_Job_Metrics [  search (index=* OR index=_*) (index=_internal sourcetype=dbx_job_metrics) | eval nodename = ""Job_Metrics""| eval hec_upload_mb=hec_upload_bytes/1024/1024 | rename hec_upload_bytes AS Job_Metrics.hec_upload_bytes hec_upload_time AS Job_Metrics.hec_upload_time input_name AS Job_Metrics.input_name connection AS Job_Metrics.connection status AS Job_Metrics.status duration AS Job_Metrics.duration db_read_time AS Job_Metrics.db_read_time hec_record_process_time AS Job_Metrics.hec_record_process_time hec_upload_mb AS Job_Metrics.hec_upload_mb | fields nodename, _time, host, source, sourcetype, Job_Metrics.hec_upload_bytes, Job_Metrics.hec_upload_time, Job_Metrics.input_name, Job_Metrics.connection, Job_Metrics.status, Job_Metrics.duration, Job_Metrics.db_read_time, Job_Metrics.hec_record_process_time, Job_Metrics.hec_upload_mb ]' | summarize tstats=t override=partial manual_rebuilds=f max_time=3600 poll_buckets_until_maxtime=f id=DM_splunk_app_db_connect_DBX_Job_Metrics [  search (index=* OR index=_*) (index=_internal sourcetype=dbx_job_metrics) | eval nodename = ""Job_Metrics""| eval hec_upload_mb=hec_upload_bytes/1024/1024 | rename hec_upload_bytes AS Job_Metrics.hec_upload_bytes hec_upload_time AS Job_Metrics.hec_upload_time input_name AS Job_Metrics.input_name connection AS Job_Metrics.connection status AS Job_Metrics.status duration AS Job_Metrics.duration db_read_time AS Job_Metrics.db_read_time hec_record_process_time AS Job_Metrics.hec_record_process_time hec_upload_mb AS Job_Metrics.hec_upload_mb | fields nodename, _time, host, source, sourcetype, Job_Metrics.hec_upload_bytes, Job_Metrics.hec_upload_time, Job_Metrics.input_name, Job_Metrics.connection, Job_Metrics.status, Job_Metrics.duration, Job_Metrics.db_read_time, Job_Metrics.hec_record_process_time, Job_Metrics.hec_upload_mb ]",splunk-system-user
_phantom_app_hdsi_splunk_malware_events_forwarding,1,phantom,"| savedsearch ""hdsi_phantom_malware_gen""",None
_ScheduledView__ingest_license_usage_report,1,search,| noop,None
_ScheduledView__svc_license_usage_report,1,search,| noop,None
"| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""""*"""" group=""""per_sourcetype_thruput"""" ",,,,None
360 by Account,1,InfoSec_App_for_Splunk,"`infosec-indexes` (tag=security OR tag=attack) 
| bucket span=1h@h _time 
| eval tag=mvfilter(match(tag, ""failure"") OR match(tag, ""success"") OR match(tag, ""access"") OR match(tag, ""add"") OR match(tag, ""change"") OR match(tag, ""delete"") OR match(tag, ""error"") OR match(tag, ""misconfiguration"") OR match(tag, ""vulnerability"") OR match(tag, ""attack"") OR match(tag, ""lock"") OR match(tag, ""cleared"") OR match(tag, ""email"")) 
| stats count, dc(user) AS dc by tag, _time 
| eval hours=tostring(-floor((now() - _time)/3600)).""h""
| eval hours=if(hours==""0h"",""now"",hours) 
| sort _time 
| fields hours, tag, count, dc",None
360 by Host,1,InfoSec_App_for_Splunk,"`infosec-indexes` (tag=security OR tag=attack) 
| bucket span=1h@h _time 
| eval tag=mvfilter(match(tag, ""failure"") OR match(tag, ""success"") OR match(tag, ""access"") OR match(tag, ""add"") OR match(tag, ""change"") OR match(tag, ""delete"") OR match(tag, ""error"") OR match(tag, ""misconfiguration"") OR match(tag, ""vulnerability"") OR match(tag, ""attack"") OR match(tag, ""lock"") OR match(tag, ""cleared"") OR match(tag, ""email"")) 
| stats count, dc(host) AS dc by tag, _time 
| eval hours=tostring(-floor((now() - _time)/3600)).""h""
| eval hours=if(hours==""0h"",""now"",hours) 
| sort _time 
| fields hours, tag, count, dc",None
Access - Access App Tracker - Lookup Gen,1,SA-AccessProtection,"| tstats summariesonly=true min(""_time"") as ""firstTime"",max(""_time"") as ""lastTime"" from datamodel=""Authentication"".""Authentication"" where ""Authentication.app""!=""unknown"" by ""Authentication.app"" | rename ""Authentication.app"" as ""app"" | inputlookup append=T ""access_app_tracker"" | stats min(""firstTime"") as ""firstTime"",max(""lastTime"") as ""lastTime"" by ""app"" | outputlookup override_if_empty=false ""access_app_tracker"" | stats count",None
Access - ATL - Audit - AD Adm Account Login Failure Reached Four Times - Rule,1,DA-ESS-AccessProtection,"`GCR_Events_AD` EventCode=4625 Account_Name=TWADM* 
| fields + _time dvc EventCode user  Source_Network_Address user_identity
| lookup GCR_DHCP_OutputList.csv IP_Address as Source_Network_Address output Host_Name 
| fillnull value=unknown Host_Name 
| stats count, values(dvc) as dvc, values(EventCode) as EventCode, values(Host_Name) as Host_Name, values(user_identity) as user_identity by Source_Network_Address,user,_time
| where count>=4
| rename Host_Name as Souce_ComputerName,user as Login_Account",Some
Access - Authentication Failures By Source - Model Gen,1,SA-AccessProtection,"| tstats `summariesonly` count as failure from datamodel=Authentication.Authentication where Authentication.action=""failure"" by Authentication.src,_time span=1h | fit DensityFunction failure partial_fit=true dist=norm into app:failures_by_src_count_1h",None
Access - Authentication Failures By Source Per Day - Model Gen,1,SA-AccessProtection,"| tstats `summariesonly` count as failure from datamodel=Authentication.Authentication where Authentication.action=""failure"" by Authentication.src,_time span=1d | fit DensityFunction failure partial_fit=true dist=norm into app:failures_by_src_count_1d",None
Access - Authentication Tracker - Lookup Gen,1,SA-AccessProtection,"| tstats `summariesonly` count from datamodel=Authentication.Authentication where Authentication.action=success Authentication.dest!=unknown Authentication.user!=unknown by _time,Authentication.dest,Authentication.user span=1s | `drop_dm_object_name(""Authentication"")` | stats min(_time) as firstTime,values(_time) as second2lastTime,max(_time) as lastTime by dest,user | eval dest=lower(dest),user=lower(user),_key=sha1(dest.""|"".user) | dedup _key | lookup access_tracker _key OUTPUTNEW firstTime as lookup_firstTime, second2lastTime as lookup_second2lastTime, lastTime as lookup_lastTime | eval firstTime=min(firstTime, lookup_firstTime),lastTime=max(lastTime, lookup_lastTime), second2lastTime=mvdedup(mvappend(second2lastTime,NULL,lookup_second2lastTime)), lastTime_vals=mvdedup(mvappend(lastTime,NULL,lookup_lastTime)) | eval `get_second2lastTime_meval(second2lastTime,lastTime_vals,lastTime)` | eventstats min(firstTime) as firstTime_user,max(lastTime) as lastTime_user by user  | fields - lastTime_vals, lookup_firstTime, lookup_lastTime, lookup_second2lastTime | outputlookup append=T key_field=_key access_tracker | stats count",None
Access - Authentication Volume Per Day - Model Gen,1,SA-AccessProtection,| tstats `summariesonly` count as current_count from datamodel=Authentication.Authentication by _time span=1d | fit DensityFunction current_count partial_fit=true dist=norm into app:authentication_count_1d,None
Access - Distinct Apps,1,DA-ESS-AccessProtection,| tstats `summariesonly` estdc(Authentication.app) as current_count from datamodel=Authentication.Authentication where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(Authentication.app) as historical_count from datamodel=Authentication.Authentication where earliest=-48h@h latest=-24h@h] | `get_delta`,
Access - Distinct Destinations,1,DA-ESS-AccessProtection,| tstats `summariesonly` estdc(Authentication.dest) as current_count from datamodel=Authentication.Authentication where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(Authentication.dest) as historical_count from datamodel=Authentication.Authentication where earliest=-48h@h latest=-24h@h] | `get_delta`,
Access - Distinct Sources,1,DA-ESS-AccessProtection,| tstats `summariesonly` estdc(Authentication.src) as current_count from datamodel=Authentication.Authentication where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(Authentication.src) as historical_count from datamodel=Authentication.Authentication where earliest=-48h@h latest=-24h@h] | `get_delta`,
Access - Distinct Users,1,DA-ESS-AccessProtection,| tstats `summariesonly` estdc(Authentication.user) as current_count from datamodel=Authentication.Authentication where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(Authentication.user) as historical_count from datamodel=Authentication.Authentication where earliest=-48h@h latest=-24h@h] | `get_delta`,
Access - Excessive SFTP Login Failure - Rule,1,DA-ESS-AccessProtection,"index=unix sourcetype=syslog host=uslx117 OR host=uslx118 OR host=uslx115 OR host=uslx116 tag=authentication process=sshd 
| eval src=coalesce(src, src_ip) 
| search src!=""167.23.0.0/16"" [|inputlookup p_default_ip_threatfeed | table Name Risk | rename Name as src]
| stats sum(eval(if(tag=""failure"", 1, 0))) AS failure_count, sum(eval(if(tag=""success"", 1, 0))) AS success_count values(user) as user_count by src
| eval user_count=mvcount(user_count)
| where failure_count>=50 AND success_count>=1",some
Access - GCR - AS400 - AS400 Excessive Invalid Password - Rule,1,DA-ESS-AccessProtection,"index=unix-gcr sourcetype=AS400* dvc_event_category=""*PW*"" (target_username=CN* OR target_username=*HK*)
| stats values(source_username) as source_username, count by target_username source_ip, dvc_hostname name dvc_event_category dvc_auto_num1 target_process_name dvc_auto_string1
| lookup networkcidrlookup ip as source_ip output name as source_ip_zone
| where count>=40",some
Access - GCR - Audit - Different AD Account Login Failed On One Or More Machines - Rule,1,DA-ESS-AccessProtection,"index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" Alert_name=""GCR - Audit - AD - Different AD Account Login Failed On One Machine"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| where d_time<=259200 
| stats values(Name) as Name, values(signature_id) as signature_id, values(user) as user, values(IPList) as IPList, dc(Trigger_Time) as alert_count by Source_Network_Address, Source_Zone_Name src_nt_host
| where alert_count>=1 
| where d_time<=901 
| table time Name signature_id user Source_Network_Address Source_Zone_Name src_nt_host IPList",some
Access - HDSI Audit Failed Login to Exposed Router - Rule,1,SplunkEnterpriseSecuritySuite,"index=ise sourcetype=""cisco:ise:syslog"" Type=Authentication (Remote_Address!=""0.0.0.0"" Remote_Address!=""167.23.0.0/16"" Remote_Address!=""58.248.178.101"" Remote_Address!=""210.21.90.244"" Remote_Address!=""183.62.18.197"" Remote_Address!=""103.9.32.0/22"" Remote_Address!=""103.44.17.130"") NOT FailureReason=""24205 Could not change password to new password"" NOT TWACSV04 NOT (`hdsi_rfc1918(Remote_Address)`) 
| eval RemoteAddress=if(match(Remote_Address,""[a-z\.]+$""),""NULL"",Remote_Address) 
| rex field=_raw ""NOTICE\s+.*\:\s+(?P<AuthStatus>[^\,]+)\,.*"" 
| search NOT ((Address=10.173.69.5 OR Address=10.173.204.25 OR Address=10.172.133.7) AND (UserName=AJADM90851 OR UserName=AJKIWI01 OR UserName=CMNQ981)) 
| where UserName!=""NULL"" AND RemoteAddress!=""NULL"" 
| where UserName!=""NULL"" AND RemoteAddress!=""NULL"" 
| rename Address as Device_IP_Address 
| bucket _time span=15m
| iplocation RemoteAddress
| lookup p_default_ip_risklist.csv Name as RemoteAddress OUTPUT Risk EvidenceDetails
| eval location=City."", "".Region."", "".Country, lat_lon=lat."", "".lon, remote_location=RemoteAddress."" - "".location
| fillnull value=null
| stats count 
values(Action) as Action 
values(AuthStatus) as AuthStatus
values(NetworkDeviceGroups) as NetworkDeviceGroups
values(NetworkDeviceName) as NetworkDeviceName
values(Device_IP_Address) as Device_IP_Address
values(Risk) as rf_Risk
values(EvidenceDetails) as rf_EvidenceDetails
values(location) as location
values(lat_lon) as lat_lon
values(remote_location) AS remote_location
values(_time) as _time
by RemoteAddress
| rename _time as orig_time
| `ctime(orig_time)`",1078
Access - HDSI Distributed Password Spray Detected - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=t count values(sourcetype) as sourcetype from datamodel=Authentication where `hdsi_ext_ips(Authentication.src)` NOT Authentication.src IN (127.0.0.1, 169.254.0.0/16) `hdsi_distributed_password_spray_filter` by Authentication.src Authentication.user Authentication.action 
| `drop_dm_object_name(""Authentication"")` 
| `hdsi_distributed_password_spray_customizations` 
``` Get failure and success stats by src ``` 
| stats dc(eval(if(action=""failure"", user, null()))) as failed_user_count 
    dc(eval(if(action=""success"", user, null()))) as success_user_count 
    sum(eval(if(action=""failure"", count, null()))) as failure_count 
    sum(eval(if(action=""success"", count, null()))) as success_count 
    max(eval(if(action=""failure"", count, null()))) as max_user_failure_count 
    values(sourcetype) as sourcetype 
    by src 
``` Get the spread of failed user counts between sources with the same first two octets ``` 
| rex field=src ""(?<first_and_second_octet>(\d{1,3}\.){2})"" 
| eventstats p25(failed_user_count) as q1_failed_user_count p75(failed_user_count) as q3_failed_user_count by first_and_second_octet 
| eval failed_user_count_spread=q3_failed_user_count-q1_failed_user_count 
``` Re-stats by the first two octets ``` 
| stats sum(failed_user_count) as failed_user_count 
    dc(eval(if(failure_count>0, src, null()))) as failed_src_count 
    sum(failure_count) as failure_count 
    sum(success_user_count) as success_user_count 
    dc(eval(if(success_count>0, src, null()))) as success_src_count 
    sum(success_count) as success_count 
    max(failed_user_count_spread) as failed_user_count_spread 
    max(q1_failed_user_count) as q1_failed_user_count 
    max(q3_failed_user_count) as q3_failed_user_count 
    values(sourcetype) as orig_sourcetype 
    by first_and_second_octet 
``` Look for failures for many different users spread relativly evenly between the different IPs with the same first two octets excludeing where there are also many successes``` 
| where q1_failed_user_count>5 AND failed_src_count>20 AND failed_user_count>25 AND failed_src_count>success_src_count*2 AND failed_user_count>success_user_count*2",1110
Access - HDSI Kerberoasting Detected - Rule,1,SplunkEnterpriseSecuritySuite,"`hdsi_windows_security` EventCode=4769 4769 0x17 Ticket_Encryption_Type=0x17 OR TicketEncryptionType=0x17 NOT Service_Name IN (""krbtgt*"", ""*$"") NOT ServiceName IN (""krbtgt*"", ""*$"") `hdsi_kerberoasting_detected_filter` 
| `hdsi_kerberoasting_detected_customizations` 
| eval Service_Name=coalesce(Service_Name, ServiceName) 
| rex mode=sed field=src ""s/::ffff://g"" 
| bin _time span=15m as time_frame 
| stats dc(Service_Name) as service_count by user time_frame index 
| eval key=user.""@@"".time_frame 
| outputlookup hdsi_kerberoasting_detected_baseline key_field=key override_if_empty=f 
| join user type=left 
    [ inputlookup hdsi_kerberoasting_detected_baseline 
    | where time_frame>=relative_time(now(), ""-30d"") 
    | sort 0 - service_count time_frame 
    | dedup 5 user 
    | outputlookup hdsi_kerberoasting_detected_baseline override_if_empty=f 
    | stats avg(service_count) as previous_service_count_avg by user] 
| eval distance_score=round(service_count/previous_service_count_avg, 2) 
| where distance_score>=2 AND service_count>5 OR (isnull(distance_score) AND service_count>10) 
| rename index as orig_index",1208
Access - HDSI Okta Authentication Security Event Detected - Rule,1,SplunkEnterpriseSecuritySuite,"(index=okta-corp sourcetype=OktaIM2:log tag=authentication action=success) OR (index=okta-corp sourcetype=OktaIM2:log eventType=user.mfa.okta_verify.deny_push)
NOT [| inputlookup hdsi_okta_location_history | stats dc(user) as user_count by as_number | search user_count>100 | table as_number | rename as_number as securityContext.asNumber]
NOT [| inputlookup hdsi_okta_location_history | stats dc(user) as user_count by src | search user_count>10 | table src]
[search index=okta-corp sourcetype=OktaIM2:log TERM(security.threat.detected) | dedup src_ip | table src_ip | eval src_ip=""TERM("".src_ip."")"" | stats values(src_ip) as search | format | eval search=replace(search, ""\"""", """")]
| rename outcome.* as *, client.ipAddress as src_ip, actor.alternateId as user
| stats values(_time) AS event_times by user src_ip result reason eventType displayMessage
| join src_ip type=left [search index=okta-corp sourcetype=OktaIM2:log TERM(security.threat.detected) | stats values(reason) as reason by src_ip]
| stats values(user) as user, values(reason) as threat_signature values(displayMessage) as message values(result) as action by src_ip",1087
Access - HDSI Okta Geographically Improbable Access Detected - Rule,1,SplunkEnterpriseSecuritySuite,"`hdsi_okta_logs` action=success tag=authentication SUCCESS `hdsi_okta_geographically_improbable_filter` 
NOT [| inputlookup hdsi_okta_location_history | stats dc(user) as user_count by as_number | search user_count>100 | table as_number | rename as_number as securityContext.asNumber] 
NOT [| inputlookup hdsi_okta_location_history | stats dc(user) as user_count by src | search user_count>10 | table src] 
NOT (securityContext.asNumber=16509 client.userAgent.rawUserAgent=""Okta-Integrations"") 
| eval user=lower('actor.alternateId') 
| rename client.geographicalContext.* as * geolocation.* AS * client.userAgent.* as * securityContext.* as * 
| eval app=coalesce(targetAppDisplayName, app) 
| stats values(tag) AS tag values(app) AS app values(browser) as browser values(os) as os values(rawUserAgent) as user_agent values(asOrg) as as_org min(_time) as time values(eventType) as eventType by user src asNumber lat lon city state country 
| rename asNumber as as_number 
``` Update location history kv store ``` 
| bin time span=1d@d as day 
| lookup hdsi_okta_location_history user src output day_count last_day_seen 
| eval key=user.""@@"".src, day_count=case(day>last_day_seen, day_count+1, isnull(day_count), 1, true(), day_count), last_day_seen=if(day>last_day_seen OR isnull(last_day_seen), day, last_day_seen) 
| outputlookup hdsi_okta_location_history append=t override_if_empty=f key_field=key 
``` Filter to initial auth events ``` 
| search eventType IN (""user.authentication.sso"", ""user.session.start"") 
``` Get history from kv store ``` 
| join type=left as_number [| inputlookup hdsi_okta_location_history 
    | stats dc(user) as user_count by as_number 
    | search user_count>20 
    | table as_number | eval normal_as=1] 
| join type=left src [| inputlookup hdsi_okta_location_history 
    | stats dc(user) as user_count by src 
    | search user_count>5 
    | table src | eval normal_ip=1] 
| lookup hdsi_okta_location_history user state output day_count as state_day_count 
| eval state_day_count=max(state_day_count) 
| lookup hdsi_okta_location_history user country output day_count as country_day_count 
| eval country_day_count=max(country_day_count) 
| lookup hdsi_okta_location_history user as_number output day_count as as_day_count 
| eval as_day_count=max(as_day_count) 
``` Eval to identify normal login ``` 
| `hdsi_okta_geographically_improbable_customizations` 
``` Store values in JSON field ``` 
| rename * as dest_* dest_src as dest 
| tojson output_field=key 
``` Get event for every IP combination ``` 
| rename dest_* as src_* dest as src src_user as user 
| eventstats dc(key) as key_count,values(key) as key by user 
| search key_count>1 
| stats values(*) as * by user src key 
| spath input=key 
| fields - dest_user key_count dest_key src_key units 
| rename *{} as * 
``` Filter normal logins ``` 
| where src!=dest AND (src_state!=dest_state OR src_state=""null"") AND src_as_number!=dest_as_number AND NOT (src_abnormal_login=0 AND dest_abnormal_login=0) 
``` Remove duplicate IP combinations ``` 
| eval key=mvjoin(mvsort(mvappend(src.""->"".dest, NULL, dest.""->"".src)), ""|""), units=""m"" 
| dedup key, user 
``` Calculate distance, filter events to the shortest distance between IPs, then filter to the improbable logins ``` 
| `globedistance(src_lat,src_lon,dest_lat,dest_lon,units)` 
| sort 0 distance 
| dedup src user 
| eval speed=distance/(abs(src_time-dest_time+1)/3600) 
| where speed>=500 AND distance>150 
| eval time_diff=abs(src_time-dest_time)",1591
Access - HDSI Potential Password Spray Detected - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=t values(sourcetype) as sourcetype values(Authentication.signature_id) as signature_id values(host) as host count from datamodel=Authentication where `hdsi_potential_password_spray_detected_search_filter` NOT (Authentication.user=""*$"" OR Authentication.user=""-"" OR Authentication.src=""-"" OR Authentication.src=unknown) NOT (Authentication.src_category=""domain_controllers"" Authentication.signature_id=4771 OR Authentication.signature_id=4768) by Authentication.src Authentication.user Authentication.action index
| `drop_dm_object_name(""Authentication"")` 
| `hdsi_potential_password_spray_detected_customizations` 
| stats dc(eval(if(action=""failure"", user, null()))) as failed_user_count 
    dc(eval(if(action=""success"", user, null()))) as success_user_count 
    sum(eval(if(action=""failure"", count, null()))) as failure_count 
    sum(eval(if(action=""success"", count, null()))) as success_count 
    values(signature_id) as signature_id 
    dc(signature_id) as signature_count 
    values(host) as host 
    values(sourcetype) as orig_sourcetype 
    by src index 
| fillnull success_count value=0 
| search NOT ((`hdsi_ext_ips(src)` OR (signature_id=4776 signature_count=1)) success_count=0) 
| where (failed_user_count/success_user_count>2 OR success_count=0) AND failed_user_count>25 | rename index as orig_index",1110
Access - HDSI Russia Users added to Magic LDAP Groups - Rule,1,SplunkEnterpriseSecuritySuite,"(index=domain) EventCode=4728 ""CN=RU*"" Group_Name IN(""LDAP-AMW-MAGIC-AFFILIATEVIEWER"",""LDAP-AMW-MAGIC-AFFSPONSOPERATOR"", ""LDAP-AMW-MAGIC-DESIGNER"",""LDAP-AMW-MAGIC-DEVELOPER"",""LDAP-AMW-MAGICDMS-QAOPERATOR"",""LDAP-AMW-MAGIC-GLOBVISITOR"",""LDAP-AMW-MAGIC-HOAWAPPROVER"",""LDAP-AMW-MAGIC-LOVIEWER"",""LDAP-AMW-MAGIC-VCSOPERATOR"",""LDAP-AMW-MAGIC-WWVIEWER"") 
| eval user = substr(user, 4, 8) 
| fields + Security_ID added_user user Group_Name 
| table user, Group_Name 
| sort user, Group_Name",1069
Access - HDSI: Potential VPN Brute Force - Rule,1,DA-ESS-AccessProtection,"| tstats `summariesonly` values(Authentication.app) as ""app"",count from datamodel=Authentication where ((nodename=""Authentication"") (Authentication.user!=""System"" Authentication.user!=""unknown"") (sourcetype=""juniper:sslvpn"" OR sourcetype=""pan:system"")) by ""Authentication.src"",""Authentication.user"",""Authentication.action"",sourcetype,_time  | `drop_dm_object_name(Authentication)` | eval success=if(action=""success"",count,0) | eval failure=if(action=""failure"",count,0) | stats values(app) as app, sum(success) as success,sum(failure) as failure by src,user,sourcetype,_time | where failure>15 AND success>0 | sort - failure | iplocation src",
Access - Number Of Default Accounts In Use,1,DA-ESS-AccessProtection,| tstats `summariesonly` estdc(Authentication.user) as current_count from datamodel=Authentication.Authentication where earliest=-24h@h latest=+0s Authentication.user_category=default | appendcols [| tstats `summariesonly` estdc(Authentication.user) as historical_count from datamodel=Authentication.Authentication where earliest=-48h@h latest=-24h@h Authentication.user_category=default] | `get_delta`,
Access - Secret Server - Unlimited Admin Mode Enabled - Rule,1,DA-ESS-AccessProtection,index=secretserver sourcetype=secretserver EventID=10014 user=*,some
Access - Total Access Attempts,1,DA-ESS-AccessProtection,"| tstats `summariesonly` count as current_count from datamodel=Authentication.Authentication where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Authentication.Authentication where earliest=-48h@h latest=-24h@h] | `get_ksi_fields(current_count,historical_count)` | `mltk_findbest(""app:authentication_count_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
AITS Summary Search,1,search,"index=pan_logs sourcetype=pan:traffic date_hour>08 AND date_hour<18 (dvc=""UTM-CBJ-1-B"" OR dvc=""UTM-CBJ-1-A"") vsys=vsys1 action=allow
(user_bunit=""E_149_1499999_5001_000 - Others G&A"" OR user_bunit=""E_149_1499999_5003_000 - CoE Global EBS Development"" OR user_bunit=""E_149_1499999_5010_000 - Global EBS Business Solutions"" OR user_bunit=""E_149_1499999_5016_000 - IT Infrastructure"" OR user_bunit=""E_149_1499999_5026_000 - App/Middleware Admins"" OR user_bunit=""E_149_1499999_5036_000 - Integrations"" OR user_bunit=""E_149_1499999_5043_000 - IT Operations"" OR user_bunit=""E_149_1499999_5095_000 - IT ABO & Customer Solutions"" OR user_bunit=""E_149_1499999_7155_000 - Information Security and Risk"" OR user_bunit=""E_149_1499999_8000_000 - HR Administration"")
app!=""Jabber"" app!=""outlook-web-online"" app!=""webex-chat"" app!=""webex-whiteboard"" app!=""webex-desktop-sharing"" app!=""webex-base"" app!=""webex-file-sharing"" app!=""webex-connect"" app!=""webex-weboffice"" app!=""ms-lync-online"" app!=""skype-probe"" app!=""ms-office365-base"" app!=""service-now""
http_category!=""Office 365 URL List"" http_category!=""Webex URL List"" http_category!=""Jabber"" http_category!=""private-ip-address"" http_category!=""web-advertisements"" http_category!=""Corporate Domains"" http_category!=""Corporate_Domains"" http_category!=""any"" http_category!=""unknown""
rule!=""Allow_Amway_Public_IP"" rule!=""Allow_Outlook_Access"" rule!=""Allow-Outlook-Jabber-Access-URL"" rule!=""JuniperVPN_Standard_Access"" rule!=""Default-Services-Allow-Sinkhole"" rule!=""Default-Services-Allow"" rule!=""AITS_Allow_Services"" rule!=""Firewall_Admin"" rule!=""Clean UP Rule"" rule!=""Cleanup-Deny-All"" rule!=""AITS-App-Specific-Block"" rule!=""AITS-WLC-Client-Inbound"" rule!=JuniperVPN_Privileged_Access rule!=""JuniperVPN_Admin_In"" rule!=""JuniperVPN_Admin_Out"" | transaction user, maxpause=5m | stats sum(duration) AS Seconds by src_user, user_last, user_first, user_bunit",None
AKL AWS Console Login User Account ID,1,search,"index=aws-kinesis (aws_account_id=314757280827 OR aws_account_id=879322449734) eventName=ConsoleLogin sourceIPAddress!=103.9.32*| replace ""314757280827"" with ""AWS KR Shared PREPROD"" in recipientAccountId| replace ""879322449734"" with ""AWS KR Shared PROD"" in recipientAccountId |rename userIdentity.principalId as userID, recipientAccountId as AWS_account| eval userID=substr(userID,23,30) | table AWS_account, userID, sourceIPAddress, _time | sort recipientAccountId, time",
AKL AWS Security Group Change,1,search,"index=aws-kinesis  (aws_account_id=314757280827 OR aws_account_id=879322449734 OR aws_account_id=854335969683 OR aws_account_id=592899223000) (eventName=AuthorizeSecurityGroupIngress OR eventName=RevokeSecurityGroupIngress OR eventName=AuthorizeSecurityGroupEgress OR eventName=RevokeSecurityGroupEgress)| replace ""314757280827"" with ""AWS KR Shared PREPROD"" in recipientAccountId| replace ""879322449734"" with ""AWS KR Shared PROD"" in recipientAccountId| replace ""592899223000"" with ""AWS KR AmStack PREPROD"" in recipientAccountId| replace ""854335969683"" with ""AWS KR AmStack PROD"" in recipientAccountId | replace ""AuthorizeSecurityGroupIngress"" with ""Authorize Inbound"" in eventName | replace ""RevokeSecurityGroupIngress"" with ""Revoke Inbound"" in eventName | replace ""AuthorizeSecurityGroupEgress"" with ""Authorize Outbound"" in eventName | replace ""RevokeSecurityGroupEgress"" with ""Revoke Outbound"" in eventName | replace ""-1"" with ""All"" in requestParameters.ipPermissions.items{}.ipProtocol | strcat requestParameters.ipPermissions.items{}.ipRanges.items{}.description requestParameters.ipPermissions.items{}.groups.items{}.description description | rename requestParameters.groupId as SG_ID, requestParameters.ipPermissions.items{}.toPort as Port,requestParameters.ipPermissions.items{}.ipProtocol as Protocol,requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp as IP,requestParameters.ipPermissions.items{}.ipRanges.items{}.description as Description,recipientAccountId as AWS_account,userIdentity.principalId as userID |eval userID = mvindex(split(userID,"":""),-1)| table _time,AWS_account, eventName,userID,src,SG_ID,IP,Port,Protocol,description| sort AWS_account, _time",
AKL Monthly AWS Security Group Change,1,search,"index=aws-kinesis  (aws_account_id=314757280827 OR aws_account_id=879322449734 OR aws_account_id=854335969683 OR aws_account_id=592899223000) (eventName=AuthorizeSecurityGroupIngress OR eventName=AuthorizeSecurityGroupEgress) (requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp != ""NULL"")| replace ""314757280827"" with ""AWS KR Shared PREPROD"" in recipientAccountId| replace ""879322449734"" with ""AWS KR Shared PROD"" in recipientAccountId| replace ""592899223000"" with ""AWS KR AmStack PREPROD"" in recipientAccountId| replace ""854335969683"" with ""AWS KR AmStack PROD"" in recipientAccountId | replace ""AuthorizeSecurityGroupIngress"" with ""Authorize Inbound"" in eventName | replace ""RevokeSecurityGroupIngress"" with ""Revoke Inbound"" in eventName | replace ""AuthorizeSecurityGroupEgress"" with ""Authorize Outbound"" in eventName | replace ""RevokeSecurityGroupEgress"" with ""Revoke Outbound"" in eventName | replace ""-1"" with ""All"" in requestParameters.ipPermissions.items{}.ipProtocol |strcat requestParameters.ipPermissions.items{}.ipRanges.items{}.description requestParameters.ipPermissions.items{}.groups.items{}.description description| rename requestParameters.groupId as SG_ID, requestParameters.ipPermissions.items{}.toPort as Port,requestParameters.ipPermissions.items{}.ipProtocol as Protocol,requestParameters.ipPermissions.items{}.ipRanges.items{}.cidrIp as IP,requestParameters.ipPermissions.items{}.ipRanges.items{}.description as Description,recipientAccountId as AWS_account,userIdentity.principalId as userID |eval userID = mvindex(split(userID,"":""),-1)|table AWS_account,SG_ID,IP,Port,Protocol,eventName,Description,_time,userID| sort AWS_account,SG_ID,_time",
AKL SOC Notification,1,search,index=notable region=Korea,None
Amazon Inspector: Topology Amazon Inspector Recommendation Generator,1,splunk_app_aws,"`aws-inspector-findings` assetAttributes.agentId=* assetType=ec2-instance | rename assetAttributes.agentId as agent_id, serviceAttributes.rulesPackageArn as rule_arn | stats latest(severity) as severity, latest(title) as finding by rule_arn, agent_id | table agent_id, severity, finding | outputlookup topology_inspector_recommendations",None
AmwayGCR Splunk HF Persistent Queue Size Alert,1,AmwayGcrSec,"index=cdn-gcr sourcetype=persize earliest=-1h@h latest=now|eval size=if(host==""TWSPLUNKV01"",round(tonumber(size)/1024/1024,0),size)|eval Message=case(host==""TWSPLUNKV01"" AND size>150000,""twsplunk01's Persistent Queue Size WAS FULL"",host==""cnlvs474"" AND size>50000,""cnlvs474's Persistent Queue Size WAS FULL"",host==""cnlvs712"" AND size>150000,""cnlvs712's Persistent Queue Size WAS FULL"")|fillnull value=NULL Message|where Message!=""NULL""|table  _time Message",
Anomaly Detection: Jobs Service,1,splunk_app_aws,| anomalyjob,
Anomaly Detection: Schedule Time Checker,1,splunk_app_aws,"index=_audit action=""search"" search=* | regex search=""job_id=\""\w{8}-\w{4}-\w{4}-\w{4}-\w{12}\""""  | eval is_alert=if(savedsearch_name="""", 0, 1) , earliest_time = strptime(apiStartTime,""'%a %b %d %T %Y'""), latest_time=strptime(apiEndTime,""'%a %b %d %T %Y'""), day=strftime(_time, ""%Y-%m-%d"")  | table _time, job_id, is_alert, earliest_time,latest_time, day | append [ | inputlookup anomaly_schedule_checker ] | where isnotnull(earliest_time) AND isnotnull(latest_time) | dedup job_id, is_alert | outputlookup anomaly_schedule_checker",
Applications - Retrieve New Apps,14,,'search `pan_newapps` | table app{@name} | pannewapps | collect index=main sourcetype=pan:newapps' search `pan_newapps` | table app{@name} | pannewapps | collect index=main sourcetype=pan:newapps,splunk-system-user
ATL - AS400 - AS400 Personal Information Query Amount Reached Threshold,1,AmwayGcrSec,"index=accesslog-gcr sourcetype=dbaudit source=as400aplog  RPWBB4!=EC_DOWNINQ
| eventstats count by RPAIZS 
| where (RPAIZS=""711"" AND count>=10542) OR (RPAIZS=""712"" AND count>=1447) OR (RPAIZS=""731"" AND count>=3000) OR (RPAIZS=""732"" AND count>=1314) OR (RPAIZS=""781"" AND count>=613) OR (RPAIZS=""782"" AND count>=485) OR (RPAIZS=""761"" AND count>=13002) 
| eval Device_Vendor=""Amway Taiwan"" 
| eval Device_Product=""AS400 Application"" 
| table RPDTTM,RPADVS,RPAEPA,RPAIZS,RPAEUT,RPWBB4,syskey,Device_Vendor,Device_Product,Personal_Count 
| rename RPDTTM as End_Time,RPWBB4 as Function_ID,RPADVS as UserName,RPAEPA as Distributor_ID,RPAIZS as Department_ID,RPAEUT as Center_ID
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""ATL - AS400 - AS400 Application TOP Inquiry User List"" 
| collect index=""output-gcr"" sourcetype=""ATL_AS400_Application_TOP_Inquiry_User_List"" 
| eventstats values(Department_ID) as Department_ID_List 
| eval Department_ID_List=mvjoin(Department_ID_List,"","") 
| eventstats values(UserName) as UserName_List 
| eval UserName_List=mvjoin(UserName_List,"","")
|fields - Personal_Count  Trigger_Time Alert_name",
ATL - AS400 - AS400 Personal Information Query Same Item Reached 200 Times,1,AmwayGcrSec,"index=accesslog-gcr sourcetype=dbaudit source=as400aplog  RPWBB4!=EC_DOWNINQ
| eventstats count by RPAIZS 
| where (RPAIZS=""711"" AND count>=10542) OR (RPAIZS=""712"" AND count>=1447) OR (RPAIZS=""731"" AND count>=3000) OR (RPAIZS=""732"" AND count>=1314) OR (RPAIZS=""781"" AND count>=613) OR (RPAIZS=""782"" AND count>=485) OR (RPAIZS=""761"" AND count>=13002)| eval Device_Vendor=""Amway Taiwan"" 
| eval Device_Product=""AS400 Application"" 
| table RPDTTM,RPADVS,RPAEPA,RPAIZS,RPAEUT,RPWBB4,syskey,Device_Vendor,Device_Product 
| rename RPDTTM as End_Time,RPWBB4 as Function_ID,RPADVS as UserName,RPAEPA as Distributor_ID,RPAIZS as Department_ID,RPAEUT as Center_ID
| eval Alert_name=""ATL - AS400 - AS400 Personal Information Query Same Item Reached 200 Times"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""ATL_AS400_Personal_Information_Query_Same_Item_Reached_200_Times""
| eventstats count as Personal_Count by Distributor_ID,UserName 
| where Personal_Count>=200 
| eventstats values(Distributor_ID) as Distributor_ID_List 
| eval Distributor_ID_List=mvjoin(Distributor_ID_List,"","") 
| eventstats values(UserName) as UserName_List 
| eval UserName_List=mvjoin(UserName_List,"","") 
|fields - Personal_Count Trigger_Time Alert_name",
Audit -  Router Failed Login From Internet (ACS),1,AmwayGcrSec,"index=acs sourcetype=""cisco:acs"" Type=Authentication Remote_Address!=""0.0.0.0"" NOT TWACSV04 
| transaction AcsSessionID maxspan=5s maxpause=5s 
| eval RemoteAddress=if(cidrmatch(""10.0.0.0/8"",Remote_Address) OR cidrmatch(""172.16.0.0/12"",Remote_Address) OR cidrmatch(""192.168.0.0/16"",Remote_Address) OR match(Remote_Address,""[a-z]+$""),""NULL"",Remote_Address) 
| rex field=_raw ""NOTICE\s+.*\:\s+(?P<AuthStatus>[^\,]+)\,.*"" 
| regex AuthStatus=""Authentication failed"" 
| where UserName!=""NULL"" AND RemoteAddress!=""NULL"" 
| rename Address as Device_IP_Address 
| eval time=strftime(_time,""%F %T"") 
| table time UserName Action AuthStatus Remote_Address DestinationIPAddress DestinationPort NetworkDeviceGroup NetworkDeviceName Device_IP_Address 
| lookup acs_whitelist.csv Device_IP_Address OUTPUT Result 
| fillnull value=NULL Result 
| where Result=""NULL"" 
| fields - Result 
| eventstats count as Device_Alart_Number by Device_IP_Address 
| sort - Device_IP_Address 
| where Device_Alart_Number>=3 
| outputlookup append=true ACS-RouterLoginFromInternet.csv
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""Audit - Router Failed Login From Internet (ACS)"" 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",1087
Audit - Active Risk Factors Usage - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local count=0 /servicesNS/nobody/SplunkEnterpriseSecuritySuite/alerts/risk_factors | spath input=conditions | rename {}.field as fields_used | where disabled!=1 | eventstats count as total | mvexpand fields_used | eval fields_used=if(fields_used in (""control"", ""creator"", ""dest"", ""dest_bunit"", ""dest_category"", ""dest_priority"", ""governance"", ""risk_message"", ""risk_object_bunit"", ""risk_object_category"", ""risk_object_priority"", ""savedsearch_description"", ""src"", ""src_bunit"", ""src_category"", ""src_priority"", ""tag"", ""threat_object"", ""user"", ""user_bunit"", ""user_category"", ""user_priority"", ""risk_object_type"", ""risk_score"", ""threat_object_type"", ""risk_object"", ""user_watchlist""), fields_used, ""other"") | eventstats count by fields_used | makejson fields_used, count output=fields_info| stats values(fields_info) as fields_info, max(total) as total| makejson fields_info, total output=event | table event",None
Audit - Active Users - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=false count from datamodel=Splunk_Audit.View_Activity where (View_Activity.app=""SplunkEnterpriseSecuritySuite"" OR View_Activity.app=""Splunk_DA-ESS*"") by View_Activity.user | join user [| rest splunk_server=local count=0 /servicesNS/nobody/search/authentication/users | rename title as user | table title,roles] | stats count(eval(roles=""admin"" or roles=""sc_admin"" or roles=""ess_admin"")) as data.admin_count,count(eval(roles=""ess_analyst"")) as data.analyst_count,count(eval(roles=""ess_user"")) as data.user_count,count as data.count | addinfo | eval version=""1.0"",begin=floor(info_min_time),end=floor(info_max_time) | makejson version(string),begin(int),end(int),data.* output=event | table event",None
Audit - Annotations Usage - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| from lookup:correlationsearches_lookup | spathannotations | fields annotations* | stats dc(annotations._all) as unique_annotation_count,dc(annotations._frameworks) as unique_framework_count,count(eval(isnotnull(annotations) AND annotations!=""{}"")) as searches_with_annotations,count(eval(isnotnull('annotations.mitre_attack'))) as searches_with_mitre_attack,count(eval(isnotnull('annotations.cis20'))) as searches_with_cis20,count(eval(isnotnull('annotations.kill_chain_phases'))) as searches_with_kill_chain_phases,count(eval(isnotnull('annotations.nist'))) as searches_with_nist | rename * as data.* | eval version=""1.0"" | makejson version(string),data.* output=event | table event",None
Audit - Correlation Search Changes,1,SA-Utils,"| rest splunk_server=local count=0 services/saved/searches | where match('action.correlationsearch.enabled', ""1|[Tt]|[Tt][Rr][Uu][Ee]"") | fields disabled, actions, action.correlationsearch.label, eai:acl.app | makemv delim="", "" actions | eval _time=now() | rename action.correlationsearch.label as label, eai:acl.app as app | outputlookup append=true correlationsearch_changes_lookup | stats count",None
Audit - Custom XS Saved Searches,1,SA-Utils,"| rest /services/saved/searches count=0 splunk_server=local | where match(search, ""\|\s*xs"") | stats count | where count>0",None
Audit - Datamodel Distribution - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| from datamodel:Splunk_Audit.Datamodel_Acceleration | rename datamodel as data.datamodel,size as data.size | lookup update=true es_instrumentation_datamodels datamodel as data.datamodel OUTPUT datamodel as is_ok | appendpipe [where isnull(is_ok) | stats sum(data.size) as data.size | eval ""data.datamodel""=""other"",is_ok=""true""] | eventstats sum(data.size) as total_size | where isnotnull(is_ok) | eval version=""1.0"",""data.perc""=round('data.size'/total_size*100, 2) | makejson version(string),data.* output=event | table event",None
Audit - Dataset Relation,1,SA-Utils,| rest /servicesNS/nobody/SA-Utils/contentinfo/_cache timeout=600 splunk_server=local count=0 | stats count,None
Audit - Default Admin Search All Non-Internal,1,SA-Utils,"| rest /services/authorization/roles/admin splunk_server=* count=0 | eval is_asterisk=if(srchIndexesDefault == ""*"", 1, 0) | where is_asterisk=1 | fields splunk_server, srchIndexesDefault",
Audit - Default Admin Search Indexes,1,SA-Utils,"| rest /services/authorization/roles/admin splunk_server=* count=0 | where match(srchIndexesDefault, ""^(.*summary[0-9]?|notable)$"") | fields splunk_server, srchIndexesDefault | eval srchIndexesDefault=mvjoin(srchIndexesDefault, "","")",
Audit - Deprecated Threat Intelligence Manager Inputs Detected,1,DA-ESS-ThreatIntelligence,"| rest /services/configs/conf-inputs count=0 splunk_server=local | search title=""threat_intelligence_manager"" OR title=""threat_intelligence_manager://*""| stats values(title) AS title, count | where count > 0",
Audit - ES System Requirements,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=* count=0 /services/server/info | eval numberOfVirtualCores=if(isnum(numberOfVirtualCores) AND numberOfVirtualCores>0,numberOfVirtualCores,null()) | where ((server_roles=""search_head"" AND (max(numberOfCores,numberOfVirtualCores)<16 OR physicalMemoryMB<32000)) OR (server_roles=""indexer"" AND (max(numberOfCores,numberOfVirtualCores)<16 OR physicalMemoryMB<32000))) | fields + splunk_server,server_roles,numberOfCores,numberOfVirtualCores,physicalMemoryMB",
Audit - Events Per Day - Lookup Gen,1,SA-AuditAndDataProtection,"index=_internal source=*metrics.log* group=thruput name=idxSummary | bin _time span=1d | stats sum(ev) as count by _time,series | rename series as index | eval key=_time.""|"".index | dedup key | outputlookup key_field=key licensing_epd | stats count",None
Audit - Failed Threatlist Downloads,1,DA-ESS-ThreatIntelligence,"index=_internal sourcetype=threatintel:download file=""threatlist.py:download_*"" NOT (status=""*starting"" OR status=""retrying download"" OR status=""threat list downloaded"" OR status=""Retrieved document from TAXII feed"" OR status=""Retrieved documents from TAXII feed"") | stats latest(status) as status, latest(_time) as _time by stanza, host, url",
Audit - Feature Usage - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=false avg(View_Activity.spent) as data.avg_spent,count as data.count from datamodel=Splunk_Audit.View_Activity where (View_Activity.app=""SplunkEnterpriseSecuritySuite"" OR View_Activity.app=""Splunk_DA-ESS*"") by View_Activity.view | rename View_Activity.view as data.view | lookup local=true es_instrumentation_views view as data.view OUTPUT view as is_ok | appendpipe [where isnull(is_ok) | eval weighted_avg='data.avg_spent'*'data.count' | stats sum(weighted_avg) as weighted_avg,sum(data.count) as data.count | eval ""data.avg_spent""=weighted_avg/'data.count',""data.view""=""other"",is_ok=""true""] | where isnotnull(is_ok) | addinfo | eval version=""1.0"",begin=floor(info_min_time),end=floor(info_max_time),""data.avg_spent""=floor('data.avg_spent') | makejson version(string),begin(int),end(int),data.* output=event | table event",None
Audit - GCR - AS400 - AS400 Privilege Account Change - Rule,1,DA-ESS-AccessProtection,"index=unix-gcr sourcetype=AS400*  
 AND dvc_event_category=CD
   AND (((dvc_auto_string1=""*CRTUSRPRF*""  OR  dvc_auto_string1=""*DLTUSRPRF*""   OR  dvc_auto_string1=""*CHGUSRPRF*"")
   AND (dvc_auto_string1=""*CN084841*""  OR  dvc_auto_string1=""*QSECOFR*"")
   AND dvc_auto_string1!=""*CRTDTAARA*"")
 OR  (dvc_auto_string1=""*GRPPRF*""   AND  dvc_auto_string1=""*QSECOFR*"")
 OR  (dvc_auto_string1=""*CHGUSRPRF*""   AND  dvc_auto_string1=""*ALLOBJ*""))
 AND  dvc_auto_string1!=""CRTVUSRPRF*""
 AND  dvc_auto_string1!=""*CALL PGM(TSCGRP20)*""
 AND  dvc_auto_string1!=""*CCHGUSRPRF QSYS  *CMD YCHGUSRPRF USRPRF(CN084841)*""
 AND  dvc_auto_string1!=""*RTVUSRPRF*""
 AND  dvc_auto_string1!=""*USRPRF(IBM)*""
 AND  dvc_auto_string1!=""*TEXT('*""
| table _time source_username name dvc_event_category dvc_auto_num1 target_process_name dvc_auto_string1",
Audit - GCR - AS400 - AS400 System Value Change - Rule,1,DA-ESS-EndpointProtection,"index=unix-gcr sourcetype=AS400* dvc_auto_string1=* ((dvc_event_category=CD ""CCHGSYSVAL"" NOT ""SYSVAL(QPRBFTR)"") OR dvc_event_category=DS) NOT (""TEXT('"" ""SYSVAL(QIPLDATTIM)"" ""SYSVAL(QTIMADJ)"") source_username!=QLPAR
| table _time source_username name dvc_event_category dvc_auto_num1 target_process_name dvc_auto_string1 dvc_hostname
| rename _time as orig_time
| convert ctime(orig_time)",
Audit - HDSI Azure External User Invitation - Rule,1,SplunkEnterpriseSecuritySuite,"index=azure sourcetype=""mscs:storage:blob"" operationName=""Invite external user"" action=""success"" NOT properties.targetResources{}.userPrincipalName=""*@AmwayCorp.onmicrosoft.com"" | stats values(action) as action values(properties.targetResources{}.displayName) as user values(properties.targetResources{}.userPrincipalName) as principalName values(properties.initiatedBy.user.ipAddress) as src_ip by properties.initiatedBy.user.userPrincipalName
| rename properties.initiatedBy.user.userPrincipalName as src_user",1136
Audit - HDSI Disabled or Expired Account Activity Detected - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=true allow_old_summaries=true 
dc(Authentication.src) as ""src_count"",
dc(Authentication.dest) as ""dest_count"",
values(""Authentication.src_user"") as src_user,
values(Authentication.signature) as signature
count from datamodel=Authentication.Authentication 
where (Authentication.signature=""Account expiration"" OR Authentication.signature=""Account is currently disabled*"" Authentication.user!=""*$"" Authentication.src_user!=""*$"")
by ""Authentication.user"",""Authentication.src"",""Authentication.dest""
| `drop_dm_object_name(""Authentication"")`
| search NOT (src=""*dc*"" dest=""*dc*"") NOT (user=guest) NOT (tag=""hdsi_explorer_guest"")
| eval user=lower( if(like(user,""%.`CLIENT_DOMAIN_HERE""), mvindex(split(user,""@""),0), user) )
| search NOT [| tstats summariesonly=true allow_old_summaries=true count from datamodel=Change.All_Changes where All_Changes.result=""A user account was disabled"" All_Changes.user=""*"" NOT All_Changes.user=""*$"" earliest=-2d by ""All_Changes.user""
| rename All_Changes.user as user
| eval user=lower( if(like(user,""%.`CLIENT_DOMAIN_HERE""), mvindex(split(user,""@""),0), user) )
| fields user]
| where count>=3
| eval severity=case(count>9 OR action=""success"",""critical"",
                  count<9 AND count>4,""high"",
                    1==1, ""medium""
                    )
| eval tag=mvjoin(tag,""|"") | rename ""tag"" as ""orig_tag""
| eval user=mvjoin(user,""\"" OR \"""")",1087
Audit - HDSI Heartbeat - Rule,1,SplunkEnterpriseSecuritySuite,"| makeresults | eval heart=""beat""",
Audit - HDSI Okta Potential Abuse of Repeated MFA Push Notifications - Rule,1,SplunkEnterpriseSecuritySuite,"index=okta-corp sourcetype=OktaIM2:log eventType IN (user.mfa.okta_verify.deny_push, user.authentication.sso)| bin _time span=10m| stats values(outcome.reason) AS reason count(eval('outcome.reason'=""User rejected Okta push verify"")) AS rejected_count by actor.alternateId client.ipAddress _time| where mvcount(reason)>1 AND rejected_count>1 | rename actor.alternateId AS user client.ipAddress AS src",1036
Audit - HDSI Privileged AD Group Modifications - Rule,1,SplunkEnterpriseSecuritySuite,"`hdsi_privileged_group_modifications_search_filter` 
| `hdsi_privileged_group_modifications_customizations` 
| stats values(host) as orig_host values(dest_group) as dest_group values(dest_group_domain) as dest_group_domain values(action) as action values(EventCode) as EventCode values(signature) as signature count by src_user user index | rename index as orig_index",1036
Audit - HDSI Short Lived Account - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats `summariesonly` count values(All_Changes.Account_Management.src_user) as src_user values(sourcetype) as sourcetype from datamodel=Change.All_Changes where `hdsi_short_lived_filter` nodename=""All_Changes.Account_Management"" All_Changes.user!=*$ (All_Changes.action=""created"" OR All_Changes.action=""deleted"") by All_Changes.dest,All_Changes.user,All_Changes.action,index,_time span=1s 
| `drop_dm_object_name(""All_Changes"")` 
| sort 0 _time action 
| stats values(src_user) as src_user first(action) as first_action last(action) as last_action list(action) as action, min(eval(if(action=""created"", _time, null()))) as created_time_epoch, max(eval(if(action=""deleted"", _time, null()))) as deleted_time_epoch values(sourcetype) as sourcetype by dest, user, index 
| search first_action=created last_action=deleted 
| convert ctime(deleted_time_epoch) as deleted_time, ctime(created_time_epoch) as created_time 
| eval account_lifetime = deleted_time_epoch - created_time_epoch 
| where account_lifetime < `useraccount_minimal_lifetime` 
| eval account_lifetime=tostring(account_lifetime, ""duration"") | fields - *_time_epoch | rename index as orig_index",
Audit - HDSI Successful Authentication With Default Accounts - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats allow_old_summaries=true 
         max(_time) as lastTime 
         values(Authentication.action) as action 
         values(Authentication.tag) as orig_tag 
         values(Authentication.dest_category) as dest_category 
         values(Authentication.src_user) as src_user 
         values(Authentication.app) as app 
         values(Authentication.src_category) as src_category 
         values(Authentication.signature_id) as signature_id 
         values(sourcetype) AS orig_sourcetype 
         count 
  from datamodel=Authentication 
  where nodename=Authentication.Default_Authentication Authentication.user_category=default `hdsi_default_account_authentication_filter` 
  Authentication.Default_Authentication.is_Successful_Default_Authentication=1 
  NOT (Authentication.src_user=*$ OR  
  Authentication.user=SYSTEM OR  
  Authentication.user=unknown OR  
  Authentication.src=unknown OR 
  Authentication.src=- OR 
  Authentication.signature_id=4648) 
  by Authentication.user Authentication.src Authentication.dest index 
| `drop_dm_object_name(""Authentication"")` 
| convert ctime(lastTime) 
| eval src=lower(if(match(src, ""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""), src, mvindex(split(src,"".""),0))) 
| eval dest=lower(if(match(dest, ""^(?:[0-9]{1,3}\.){3}[0-9]{1,3}$""), dest, mvindex(split(dest,"".""),0))) 
| fillnull src dest value=NULL 
| where src!=dest 
| stats values(*) as * max(lastTime) as lastTime sum(count) as count by user src index 
| rename index as orig_index 
| `hdsi_default_account_authentication_customizations`",1078
Audit - Identity Manager Usage - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local count=0 /services/data/inputs/identity_manager | lookup es_instrumentation_identity_managers input as title,target OUTPUT input as is_ootb | rex field=url ""lookup://(?<outputlookup>.*)"" | join type=left outputlookup [| rest splunk_server=local count=0 /services/saved/searches search=""search=*outputlookup*"" | rex max_match=5 field=search ""\|\s*outputlookup(?<outputlookup>.*?)(?:\||$)"" | eval outputlookup=split(outputlookup, "" ""),outputlookup=trim(mvfilter(!(outputlookup LIKE ""%=%"") AND trim(outputlookup)!=""""), ""\""""),savedsearch=title,spl=search | table outputlookup, savedsearch, spl] | stats count(eval(target=""asset"")) as asset_count,count(eval(target=""asset"" AND isnotnull(blacklist_fields) and blacklist_fields!="""")) as asset_blacklist_count,count(eval(target=""asset"" AND isnull(is_ootb))) as asset_custom_count,count(eval(target=""asset"" AND disabled=0)) as asset_enabled_count,count(eval(target=""asset"" AND match(spl, ""\|\s*ldapsearch""))) as asset_ldap_count,count(eval(target=""asset"" AND isnotnull(savedsearch))) as asset_search_count,count(eval(target=""identity"")) as identity_count,count(eval(target=""identity"" AND isnotnull(blacklist_fields) and blacklist_fields!="""")) as identity_blacklist_count,count(eval(target=""identity"" AND isnull(is_ootb))) as identity_custom_count,count(eval(target=""identity"" AND disabled=0)) as identity_enabled_count,count(eval(target=""identity"" AND match(spl, ""\|\s*ldapsearch""))) as identity_ldap_count,count(eval(target=""identity"" AND isnotnull(savedsearch))) as identity_search_count,count as total_count,count(eval(isnotnull(blacklist_fields) and blacklist_fields!="""")) as total_blacklist_count,count(eval(isnull(is_ootb))) as total_custom_count,count(eval(disabled=0)) as total_enabled_count,count(eval(match(spl, ""\|\s*ldapsearch""))) as total_ldap_count,count(eval(isnotnull(savedsearch))) as total_search_count | appendcols [| rest splunk_server=local count=0 /services/configs/conf-inputs/identity_manager search=""name=default"" | spath input=field_spec output=asset path=asset{}.name | spath input=field_spec output=identity path=identity{}.name | table asset, identity | transpose column_name=""target"" | rename ""row 1"" as field | mvexpand field | lookup es_instrumentation_identity_fields target,field OUTPUT field as is_ootb | stats count(eval(target=""asset"" AND isnull(is_ootb))) as asset_custom_fields,count(eval(target=""identity"" AND isnull(is_ootb))) as identity_custom_fields] | rename * as data.* | eval version=""1.0"" | makejson version(string),data.* output=event | table event",None
Audit - Index Readiness,1,SA-Utils,"| rest /services/data/indexes splunk_server=* count=0 | eval _time=strptime(maxTime, ""%Y-%m-%dT%H:%M:%S%z"") | stats sum(totalEventCount) AS count, max(_time) AS _time by title | eval readiness=if(count > 0 AND _time>=relative_time(now(), ""-24h@h""), 1, 0), calc_count=if(readiness==0, 0, count)  | fields title, calc_count, readiness | rename title AS index, calc_count as count | outputlookup key_field=index index_readiness_lookup | stats count",
Audit - Investigation Collection ACLs,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local count=0 /servicesNS/nobody/search/storage/collections/config | rename title as collection,""eai:acl.perms.read"" as read_perms,""eai:acl.perms.write"" as write_perms | where 'collection' in (""investigative_canvas"", ""investigative_canvas_entries"", ""files"", ""investigation"", ""investigation_event"", ""investigation_attachment"") AND ('read_perms' in (""*"", ""ess_user"", ""ess_analyst"", ""pci_user"", ""pci_analyst"") OR 'write_perms' in (""*"", ""ess_user"", ""ess_analyst"", ""pci_user"", ""pci_analyst"")) | table collection,read_perms,write_perms",
Audit - Lookup Size For Sets,1,SA-Utils,"| `lookup_tables_with_size` | `memtable_bytes_appendcol` | eval set=case(isnotnull(filename) and title IN (""asset_lookup_by_str"", ""asset_lookup_by_cidr"", ""asset_lookup_default_fields""),""asset"",isnotnull(filename) and title IN (""identity_lookup_expanded"", ""identity_lookup_default_fields""),""identity"",1=1,null()),exceeds=if(size>max_memtable_bytes,1,0) | stats values(title) as title,values(size) as size,first(max_memtable_bytes) as max_memtable_bytes,sum(exceeds) as exceeds,count by set | where NOT (exceeds=0 or exceeds=count)",
Audit - Lookup Size For SHC,1,SA-Utils,"| `lookup_tables_with_size` | `shc_mode_appendcol` | `content_length_appendcol` | where isnotnull(filename) and shc_mode!=""disabled"" and size>max_content_length | table title,filename,size,shc_mode,max_content_length",
Audit - Lookup Size For Special Matches,1,SA-Utils,"| `lookup_tables_with_size` | `memtable_bytes_appendcol` | where isnotnull(filename) and (match_type LIKE ""CIDR%"" or match_type LIKE ""WILDCARD%"") and size>max_memtable_bytes | table title,filename,match_type,size,max_memtable_bytes",
Audit - Lookup Usage - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local count=0 /servicesNS/nobody/SplunkEnterpriseSecuritySuite/data/transforms/managed_lookups | rex field=endpoint "".*\/(?<transform>.+)"" | rename transform as data.transform, size as data.size, count as data.count | lookup local=true es_instrumentation_lookups transform as data.transform OUTPUT transform as is_ok | appendpipe [where isnull(is_ok) | stats median(data.size) as data.size,sum(data.count) as data.count | eval ""data.transform""=""other"",is_ok=""true""] | where isnotnull(is_ok) | eval version=""1.0"" | makejson version(string),data.* output=event | table event",None
Audit - Managed Lookups Size - Summary Gen,1,SA-AuditAndDataProtection,"| rest /services/data/transforms/managed_lookups splunk_server=local count=0 | fields title,count,size,eai:acl.app",None
Audit - Notable Default Modify for Correlation Searches,1,SA-Utils,"| tstats dc(source) as count, values(source) as sources where (`get_notable_index`) AND source IN (""Access - Account Deleted - Rule"", ""Access - Brute Force Access Behavior Detected - Rule"", ""Access - Brute Force Access Behavior Detected Over 1d - Rule"", ""Access - Cleartext Password At Rest - Rule"", ""Access - Default Account Usage - Rule"", ""Access - Default Accounts At Rest - Rule"", ""Access - Geographically Improbable Access Detected - Rule"", ""Asset - Asset Ownership Unspecified - Rule"", ""Audit - Anomalous Audit Trail Activity Detected - Rule"", ""Audit - Potential Gap in Data - Rule"", ""Endpoint - Anomalous New Listening Port - Rule"", ""Endpoint - High Number of Hosts Not Updating Malware Signatures - Rule"", ""Endpoint - Host Sending Excessive Email - Rule"", ""Endpoint - Should Timesync Host Not Syncing - Rule"", ""Identity - High Volume Email Activity with Non-corporate Domains - Rule"", ""Identity - Web Uploads to Non-corporate Domains - Rule"", ""Network - Excessive HTTP Failure Responses - Rule"", ""Network - Substantial Increase in Port Activity (By Destination) - Rule"", ""Network - Substantial Increase in an Event - Rule"", ""Network - Unroutable Host Activity - Rule"") | where count > 0",None
Audit - Risk Factors Impact On Risk - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| tstats `summariesonly` count as risk_count, dc(All_Risk.risk_object) as distinct_risk_object_count, min(All_Risk.risk_score) as min_risk_score, max(All_Risk.risk_score) as max_risk_score, min(All_Risk.calculated_risk_score) as min_calc_risk_score, max(All_Risk.calculated_risk_score) as max_calc_risk_score, count(All_Risk.risk_factor_add_matched) as risk_factor_add_matches, count(All_Risk.risk_factor_mult_matched) as risk_factor_mult_matches, max(All_Risk.risk_factor_add) as max_risk_factor_add_matches, max(All_Risk.risk_factor_mult) as max_risk_factor_mult_matches, min(All_Risk.risk_factor_add) as min_risk_factor_add_matches, min(All_Risk.risk_factor_mult) as min_risk_factor_mult_matches from datamodel=Risk.All_Risk by All_Risk.risk_object_type | rename All_Risk.risk_object_type as risk_object_type | eval risk_object_type=if(risk_object_type in (""system"", ""user"", ""hash_values"", ""network_artifacts"", ""host_artifacts"", ""tools"", ""other""), risk_object_type, ""custom"") | makejson distinct_risk_object_count, min_risk_score, max_risk_score, min_calc_risk_score, max_calc_risk_score, risk_factor_add_matches, risk_factor_mult_matches, risk_object_type,max_risk_factor_mult_matches, max_risk_factor_add_matches, min_risk_factor_add_matches, min_risk_factor_mult_matches output=risk_object_type_info | stats list(risk_object_type_info) as event by risk_object_type | table event",None
Audit - Savedsearch Statistics - Lookup Gen,1,SA-Utils,"index=_audit action=search savedsearch_name=* info=completed | stats avg(total_run_time) as avg_run_time, avg(event_count) as avg_event_count, avg(result_count) as avg_result_count, count as invocations by savedsearch_name | join type=outer savedsearch_name [search index=_internal sourcetype=scheduler search_type=""scheduled"" OR search_type="""" | stats count(eval(status==""success"")) as success, count(eval(status==""skipped"")) as skipped by savedsearch_name] | where savedsearch_name != """" | eval update_time=now() | outputlookup key_field=savedsearch_name savedsearch_stats_lookup | stats count",None
Audit - Script Errors,1,SA-Utils,"| rest /services/admin/inputstatus/ModularInputs:modular%20input%20commands splunk_server=local count=0 | append [| rest /services/admin/inputstatus/ExecProcessor:exec%20commands splunk_server=local count=0] | fields inputs* | transpose | rex field=column ""inputs(?<script>\S+)(?:\s\((?<stanza>[^\(]+)\))?\.(?<key>(exit status description)|(time closed)|(time opened))"" | eval value=coalesce('row 1', 'row 2'), stanza=coalesce(stanza, ""default""), started=if(key==""time opened"", value, started), stopped=if(key==""time closed"", value, stopped) | rex field=value ""exited\s+with\s+code\s+(?<exit_status>\d+)"" | stats first(started) as started, first(stopped) as stopped, first(exit_status) as exit_status by script, stanza | eval errmsg=case(exit_status==""0"", null(), isnotnull(exit_status), ""A script exited abnormally with exit status: ""+exit_status, isnull(started) or isnotnull(stopped), ""A script is in an unknown state""), ignore=if(`script_error_msg_ignore`, 1, 0) | where isnotnull(errmsg) AND ignore=0",
Audit - Search Actions - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local count=0 /servicesNS/nobody/SplunkEnterpriseSecuritySuite/saved/searches | search disabled=0 is_scheduled=1 | eval ""data.action""=split(actions, "","") | eventstats count as data.total_scheduled | stats first(data.total_scheduled) as data.total_scheduled,count as data.count by data.action | lookup local=true es_instrumentation_actions action as data.action OUTPUT action as is_ok | appendpipe [where isnull(is_ok) | stats first(data.total_scheduled) as data.total_scheduled,sum(data.count) as data.count | eval ""data.action""=""other"",is_ok=""true""] | where isnotnull(is_ok) | join data.action type=left [| rest splunk_server=local count=0 /servicesNS/nobody/SplunkEnterpriseSecuritySuite/alerts/alert_actions | rename title as data.action | eval ""data.is_adaptive_response""=if(isnotnull('param._cam'),1,0) | table data.action,data.is_adaptive_response] | eval version=""1.0"",""data.is_adaptive_response""=if(isnull('data.is_adaptive_response'),0,1) | makejson version(string),data.* output=event | table event",None
Audit - Search Execution - Telemetry Gen,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=false values(nodename) as nodename,avg(Search_Activity.total_run_time) as data.avg_run_time,count as data.count from datamodel=Splunk_Audit.Search_Activity where Search_Activity.search_alias!=""*Data Model Summary Director"" by Search_Activity.search_alias | rename Search_Activity.search_alias as data.search_alias | where NOT match('data.search_alias', ""search\d+"") | lookup local=true es_instrumentation_searches search_alias as data.search_alias OUTPUT search_alias as is_ok | appendpipe [where isnull(is_ok) | eval weighted_avg='data.avg_run_time'*'data.count' | stats sum(weighted_avg) as weighted_avg,sum(data.count) as data.count | eval ""data.avg_run_time""=weighted_avg/'data.count',""data.search_alias""=""other"",is_ok=""true""] | where isnotnull(is_ok) | addinfo | eval version=""1.0"",begin=floor(info_min_time),end=floor(info_max_time),""data.is_realtime""=if(nodename==""Search_Activity.Realtime_Jobs"",1,0),""data.avg_run_time""=round('data.avg_run_time', 2) | makejson version(string),begin(int),end(int),data.* output=event | table event",None
Audit - Threat Gen Searches Detected,1,DA-ESS-ThreatIntelligence,"| rest /services/saved/searches splunk_server=local count=0 | search action.threat_activity=1 OR title=""* - Threat Gen"" | stats values(title) AS title, count | where count > 0",
AWS Billing - Account Name,1,splunk_app_aws,"`aws-billing-sourcetype` eventtype=aws_billing_monthly_report (RecordType=InvoiceTotal OR RecordType=AccountTotal) | eval LinkedAccountId=if(isnull(LinkedAccountId),PayerAccountId,LinkedAccountId) | eval LinkedAccountName=if(isnull(LinkedAccountName),PayerAccountName,LinkedAccountName) | stats count by LinkedAccountId LinkedAccountName | dedup LinkedAccountId sortby -_time | append [makeresults | eval LinkedAccountId=""placeholder"" | eval LinkedAccountName=""placeholder""] | table LinkedAccountId LinkedAccountName | outputlookup account_name",None
AWS Config - Tags,1,splunk_app_aws,"`aws-config-sourcetype` | spath output=tags path=tags | stats count by tags resourceType aws_account_id | fields - count | rex max_match=20 field=tags ""\""(?<key>[^,]+)\"": \""(?<value>[^,]+)\"""" | eval keyvalue=mvzip('key', 'value',""="") | mvexpand keyvalue | fields keyvalue resourceType aws_account_id | rex field=keyvalue ""(?<key>[^,]+)=(?<value>[^,]+)"" |  stats count by key value resourceType aws_account_id | fields key value resourceType aws_account_id | rename resourceType as type | outputlookup tags_config",None
AWS Description - CloudFront Edges,1,splunk_app_aws,"`aws-description-resource("""", """", ""cloudfront_distributions"")` | dedup id | table id, domain_name, account_id | outputlookup cloudfront_edges",None
AWS Description - S3 Buckets,1,splunk_app_aws,"`aws-description(""*"", ""*"", ""s3_buckets"", ""Name"")`  | rename Name as bucket_name, LocationConstraint as region | table bucket_name, account_id, region | outputlookup s3_buckets",None
AWS Description - Tags,1,splunk_app_aws,"`aws-description-sourcetype` | spath output=tags path=tags | stats count by tags source aws_account_id | fields - count | rex max_match=20 field=tags ""\""(?<key>[^,]+)\"": \""(?<value>[^,]+)\"""" | eval keyvalue=mvzip('key', 'value',""="") | mvexpand keyvalue | fields keyvalue source aws_account_id | rex field=keyvalue ""(?<key>[^,]+)=(?<value>[^,]+)"" | rex field=source "".*?:(?<type>.*)"" |  stats count by key value type aws_account_id | fields key value type aws_account_id | outputlookup tags_description",None
AWS: calculate data volume indexed,1,splunk_app_aws,"| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterawssourcetype",None
Azure Billing Period Lookup,16,microsoft_azure,`azure-index` sourcetype=azure:billing:period | stats count by _time subscriptionId id name properties.billingPeriodStartDate properties.billingPeriodEndDate  | rename properties.billingPeriodStartDate AS billingPeriodStartDate properties.billingPeriodEndDate AS billingPeriodEndDate  | inputlookup azure_billing_periods append=t  | stats count by _time subscriptionId id name billingPeriodStartDate billingPeriodEndDate  | fields - count | outputlookup azure_billing_periods,None
Azure Subscriptions Lookup,16,microsoft_azure,"`azure-index` sourcetype=""azure:subscriptions"" | stats count by subscriptionId, displayName | inputlookup lookup_subscriptions append=true | stats count by subscriptionId, displayName | fields - count | outputlookup lookup_subscriptions",None
Billing: Billing Reports S3Key Generator,1,splunk_app_aws,"`aws-billing-sourcetype` (RecordType=AccountTotal OR RecordType=StatementTotal) | stats count by aws_account_id S3KeyLastModified source eventtype | eventstats max(S3KeyLastModified) as max_s3 by source | where S3KeyLastModified=max_s3 and (eventtype=""aws_billing_monthly_report"" or eventtype=""aws_billing_detail_report"") | table S3KeyLastModified source eventtype | outputlookup billing_report_s3key",None
Billing: Topology Billing Metric Generator,1,splunk_app_aws,"`aws-billing-details(*)` ResourceId=""i-*"" OR ResourceId=""vol-*"" | stats sum(BlendedCost) as billing by ResourceId | rename ResourceId as name | table billing, name | outputlookup topology_billing_metrics",None
Brute Force Attack,1,InfoSec_App_for_Splunk,"| tstats summariesonly=t allow_old_summaries=t count from datamodel=Authentication by Authentication.action, Authentication.src 
| rename Authentication.src as source, Authentication.action as action 
| chart last(count) over source by action 
| where success>0 and failure>20 
| sort -failure 
| rename failure as failures 
| fields - success, unknown",
Bucket Copy Trigger,2535,,'| archivebuckets' archivebuckets | archivebuckets,splunk-system-user
calculate data volume indexed,7,,"'| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_130596876.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_1542731947.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_198130619.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_517913844.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_518248867.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_732124380.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_769871539.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\""""' | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_130596876.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_1542731947.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_198130619.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_517913844.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_518248867.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_732124380.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval MB=sum_kb/1024 | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD5d274ffb2b4156669_769871539.stash_new"" name=""calculate data volume indexed"" marker=""report=\""dbx_indexed_data_volume\""""",splunk-system-user
Change - Number Of Account Lockouts,1,DA-ESS-AccessProtection,"| tstats `summariesonly` estdc(All_Changes.user) as current_count from datamodel=Change.All_Changes where earliest=-24h@h latest=+0s nodename=All_Changes.Account_Management All_Changes.result=""lockout"" | appendcols [| tstats `summariesonly` estdc(All_Changes.user) as historical_count from datamodel=Change.All_Changes where earliest=-48h@h latest=-24h@h nodename=All_Changes.Account_Management All_Changes.result=""lockout""] | `get_delta`",
Change - Total Change Count By User By Change Type Per Day - Model Gen,1,SA-EndpointProtection,"| `tstats` count from datamodel=Endpoint.Filesystem where Filesystem.tag=""change"" by _time,Filesystem.user span=24h | eval change_type=""filesystem"",user='Filesystem.user' | `tstats` append=T count from datamodel=Endpoint.Registry where Registry.tag=""change"" by _time,Registry.user span=24h | eval change_type=if(isnull(change_type),""registry"",change_type),user=if(isnull(user),'Registry.user',user) | `tstats` append=T count from datamodel=Change.All_Changes by _time,All_Changes.change_type,All_Changes.user span=24h | eval change_type=if(isnull(change_type),'All_Changes.change_type',change_type),user=if(isnull(user),'All_Changes.user',user) | stats count as change_count by _time,change_type,user | fit DensityFunction change_count by change_type partial_fit=true dist=norm into app:change_count_by_user_by_change_type_1d",None
CloudTrail EventName Generator,1,splunk_app_aws,`aws-cloudtrail-sourcetype` | stats count by eventName | lookup all_eventName eventName OUTPUTNEW eventName as existing | fillnull | search existing=0 | fields eventName | outputlookup all_eventName append=true,
CloudWatch: Topology CPU Metric Generator,1,splunk_app_aws,"`aws-cloudwatch-ec2(""*"", ""*"")` metric_dimensions=""*InstanceId=[*]*"" metric_name=""CPUUtilization"" 
         | stats avg(Average) as cpu by metric_dimensions | `aws-cloudwatch-dimension-rex(""InstanceId"", ""name"")` 
         | table cpu, name | outputlookup topology_cpu_metrics",None
CloudWatch: Topology Disk IO Metric Generator,1,splunk_app_aws,"`aws-cloudwatch-ec2(""*"", ""*"")` metric_dimensions=""*InstanceId=[*]*"" metric_name=""Disk*Ops"" 
         | stats sum(Sum) as io_count by metric_dimensions, metric_name | stats sum(io_count) as disk by metric_dimensions 
         | `aws-cloudwatch-dimension-rex(""InstanceId"", ""name"")` | table disk, name | outputlookup topology_diskio_metrics",None
CloudWatch: Topology Network Traffic Metric Generator,1,splunk_app_aws,"`aws-cloudwatch-ec2(""*"", ""*"")` metric_dimensions=""*InstanceId=[*]*"" metric_name=""Network*"" 
         | stats sum(Sum) as network by metric_dimensions, metric_name | stats sum(network) as network_traffic by metric_dimensions 
         | `aws-cloudwatch-dimension-rex(""InstanceId"", ""name"")` | table network_traffic, name | outputlookup topology_network_traffic_metrics",None
CloudWatch: Topology Volume IO Metric Generator,1,splunk_app_aws,"`aws-cloudwatch-ebs(""*"", ""*"")` metric_dimensions=""*VolumeId=[*]*"" (metric_name=""VolumeReadOps"" OR metric_name=""VolumeWriteOps"") 
         | stats sum(Sum) as io_count by metric_dimensions, metric_name | stats sum(io_count) as volume_io by metric_dimensions 
         | `aws-cloudwatch-dimension-rex(""VolumeId"", ""name"")` | table volume_io, name | outputlookup topology_volumeio_metrics",None
CloudWatch: Topology Volume Traffic Metric Generator,1,splunk_app_aws,"`aws-cloudwatch-ebs(""*"", ""*"")` metric_dimensions=""*VolumeId=[*]*"" metric_name=""Volume*Bytes"" 
         | stats sum(Sum) as network by metric_dimensions, metric_name | stats sum(network) as network_traffic by metric_dimensions 
         | `aws-cloudwatch-dimension-rex(""VolumeId"", ""name"")` | table network_traffic, name | outputlookup topology_volume_traffic_metrics",None
Config Rules: Topology Config Rules Generator,1,splunk_app_aws,"`aws-config-rule-sourcetype` source=""*:configRule:complianceDetail"" | rename EvaluationResultIdentifier.EvaluationResultQualifier.ResourceId as resource_id, EvaluationResultIdentifier.EvaluationResultQualifier.ConfigRuleName as rule_name | stats latest(ComplianceType) as compliance_type by resource_id, rule_name | table resource_id, rule_name, compliance_type | outputlookup topology_config_rules",None
COWS5CG10152DW - Monitor stolen laptop activity,1,SplunkEnterpriseSecuritySuite,"index=* ""COWS5CG10152DW"" 
| fields _time hostname state",
Critical Severity Intrusion,1,InfoSec_App_for_Splunk,"| tstats local=false summariesonly=true allow_old_summaries=true count from datamodel=Intrusion_Detection.IDS_Attacks where IDS_Attacks.severity=""critical"" by IDS_Attacks.signature, IDS_Attacks.severity | rename ""IDS_Attacks.*"" as ""*""",
Daily Allowed IDS Report (non-US DMZ),1,SplunkEnterpriseSecuritySuite,"index=pan_logs sourcetype=pan:threat action=allowed src_zone!=""Ada-PCI-S"" src_zone!=""SB-PCI-S"" dvc!=""UTM-21-2-a-DMZ"" dvc!=""*eDMZ*"" dvc!=""UTM-SB1-1-C-DMZ"" NOT severity IN(""low"",""medium"",""informational"") NOT threat=""Remote Port*""
| fillnull value=""""
| bin _time span=5m
| stats values(action) as action,
values(src_zone) as src_zone,
values(dvc) as dvc,
values(threat) as signature,
values(threat_id) as signature_id,
values(severity) as orig_severity,
values(tag) as tag,
values(dest) as dest,
count
by src, user, sourcetype, _time
| where count>=5",None
Daily Cloud Accounts Search,1,SplunkEnterpriseSecuritySuite,"index=aws-accounts earliest=-12h@h | table AWSProvider,AccountID,AccountName,AccountOperator,AccountOwner,Active,BusinessRegion,BusinessSubRegion,AccountDescription,Environment,ITRegistryObjectID,IsParent,NotifyEmail,ParentAccountID,RootAccountEmail | outputlookup cloudaccounts",
Daily DMZ IDS Report,1,SplunkEnterpriseSecuritySuite,"| tstats `summariesonly` values(IDS_Attacks.signature) as ""signature"",values(IDS_Attacks.dest) as ""dest"",values(IDS_Attacks.dest_zone) as ""dest_zone"",values(IDS_Attacks.user) as ""user"",count from datamodel=Intrusion_Detection.IDS_Attacks where ((IDS_Attacks.severity=high OR IDS_Attacks.severity=critical) IDS_Attacks.action=""allowed"" (IDS_Attacks.src_zone=""*dmz*"" OR IDS_Attacks.dest_zone=""*dmz*"") `hdsi_exclude_guest_wireless(IDS_Attacks.src)` `hdsi_exclude_known_scanners(IDS_Attacks)` (IDS_Attacks.src_zone!=""Tap*"" OR IDS_Attacks.dest_zone!=""Tap*"") (IDS_Attacks.src_zone!=""dr_dmz*"" OR IDS_Attacks.dest_zone!=""dr_dmz*"") IDS_Attacks.dvc!=""*-IG"") by ""IDS_Attacks.src"",""IDS_Attacks.src_zone"",""IDS_Attacks.dvc"",sourcetype,_time span=15m | where count>1 | sort - count",None
Daily Identity Search,1,SplunkEnterpriseSecuritySuite,"index=ldap earliest=-12h@h 
| rex field=_raw ""(?<eventtime>.*?),(?<identity>.*?),(?<first>.*?),(?<last>.*?),(?<email>.*?),(?<phone>.*?),(?<managedBy>.*?),(?<priority>.*?),(?<bunit>.*?),(?<category>.*?),(?<watchlist>.*?),(?<startDate>.*?)"" 
| table identity,prefix,nick,first,last,suffix,email,phone,phone2,managedBy,priority,bunit,category,watchlist,startDate,endDate 
| eval email=trim(email,""\""""), bunit=trim(bunit,""\"""")
| outputlookup simple_identity_lookup",
Daily Internal Sourced IDS Report,1,SplunkEnterpriseSecuritySuite,"| tstats `summariesonly` values(IDS_Attacks.signature) as ""signature"",values(IDS_Attacks.dest) as ""dest"",values(IDS_Attacks.dest_zone) as ""dest_zone"",values(IDS_Attacks.user) as ""user"",count from datamodel=Intrusion_Detection.IDS_Attacks where ((`hdsi_rfc1918(IDS_Attacks.src)`) (IDS_Attacks.severity=high OR IDS_Attacks.severity=critical) IDS_Attacks.action=""allowed"" `hdsi_exclude_guest_wireless(IDS_Attacks.src)` `hdsi_exclude_known_scanners(IDS_Attacks)` (IDS_Attacks.src_zone!=""Tap*"" OR IDS_Attacks.dest_zone!=""Tap*"") (IDS_Attacks.src_zone!=""dr_dmz*"" OR IDS_Attacks.dest_zone!=""dr_dmz*"") IDS_Attacks.dvc!=""*-IG"") NOT (`hdsi_rfc1918(IDS_Attacks.dest)`) by ""IDS_Attacks.src"",""IDS_Attacks.src_zone"",""IDS_Attacks.dvc"",sourcetype,_time span=15m | where count>1 | sort - count",None
Daily Sinkhole Activity Report,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=t count from datamodel=Network_Traffic where ((nodename = All_Traffic) All_Traffic.dest=""72.5.65.111"" All_Traffic.user!=""cnv*"" `hdsi_exclude_guest_wireless(All_Traffic.src)` `hdsi_exclude_email_servers(All_Traffic)` `hdsi_exclude_known_scanners(All_Traffic)`) by All_Traffic.action, All_Traffic.src, All_Traffic.dvc, All_Traffic.user, All_Traffic.rule | `drop_dm_object_name(All_Traffic)` | where count > 50",None
DNS - Errors,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count as current_count from datamodel=Network_Resolution.DNS where earliest=-24h@h latest=+0s (DNS.reply_code!=""No error"" AND DNS.reply_code!=""NoError"") | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Network_Resolution.DNS where earliest=-48h@h latest=-24h@h (DNS.reply_code!=""No error"" AND DNS.reply_code!=""NoError"") ] | `get_delta`",
DNS - Messages,1,DA-ESS-NetworkProtection,| tstats `summariesonly` count as current_count from datamodel=Network_Resolution.DNS where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Network_Resolution.DNS where earliest=-48h@h latest=-24h@h] | `get_delta`,
DNS - Query Sources,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(DNS.src) as current_count from datamodel=Network_Resolution.DNS where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(DNS.src) as historical_count from datamodel=Network_Resolution.DNS where earliest=-48h@h latest=-24h@h] | `get_delta`,
DNS - Unique Queries,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(DNS.query) as current_count from datamodel=Network_Resolution.DNS where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(DNS.query) as historical_count from datamodel=Network_Resolution.DNS where earliest=-48h@h latest=-24h@h] | `get_delta`,
EIA AWS Cloud - GuardDuty Alert,1,SplunkEnterpriseSecuritySuite,"index=""aws-guardduty"" detail.accountId IN(942186667133, 860702706577, 859146873948, 744058822102, 733691505079, 728244295542, 662867330503, 645993801158, 634316412938, 579260317337, 560737476145, 476575409545, 418502740917, 337014249274, 316990718558, 219161302929, 216716033826, 159408208041, 130582811668, 126914425232, 108139614258, 086655612450, 044783533270, 043835108056) severity=high
| stats count by detail.accountId AccountName detail.type
| sort -count",
EIA Cloud,1,search,"index=""aws-guardduty"" detail.accountId IN(219161302929,645993801158,216716033826,159408208041,860702706577,859146873948,108139614258,04076271227,836350645317,835500223755,437514022986,419521102043,842563929879,564086998327,158616467309,924527832891,935677405004,882009900291,537991577393,034426391536,204341441231,289479445859104153677713,163303969788,942186667133,634316412938733691505079,043835108056,418502740917,728244295542,476575409545,316990718558,744058822102,560737476145,126914425232,282613493272,086655612450,662867330503,044783533270,032742205516,729601931916,482801974677,046317447102,907848582140,313979339582,962144292115,609603870214,624341408189,183562536940,413313170553,011080952197,491848952285,679321523384,130582811668,579260317337)
| stats count by detail.accountId AccountName detail.type
| sort -count",
Email - Cloud Activity,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count as current_count from datamodel=Email.All_Email where earliest=-24h@h latest=+0s (`cloud_email_search(""All_Email.src_user"")` OR `cloud_email_search(""All_Email.recipient"")`) | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Email.All_Email where earliest=-48h@h latest=-24h@h (`cloud_email_search(""All_Email.src_user"")` OR `cloud_email_search(""All_Email.recipient"")`) ] | `get_delta`",
Email - Unique Receivers,1,DA-ESS-NetworkProtection,| tstats  `summariesonly` estdc(All_Email.recipient) as current_count from datamodel=Email.All_Email where earliest=-24h@h latest=+0s | appendcols [| tstats  `summariesonly` estdc(All_Email.recipient) as historical_count from datamodel=Email.All_Email where earliest=-48h@h latest=-24h@h ] | `get_delta`,
Email - Unique Senders,1,DA-ESS-NetworkProtection,| tstats  `summariesonly` estdc(All_Email.src_user) as current_count from datamodel=Email.All_Email where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(All_Email.src_user) as historical_count from datamodel=Email.All_Email where earliest=-48h@h latest=-24h@h ] | `get_delta`,
Endpoint - Average Infection Length - Summary Gen,1,SA-EndpointProtection,| from inputlookup:malware_tracker | eval dayDiff=(lastTime-firstTime)/86400 | stats avg(dayDiff) as avg_dayDiff by dest,None
Endpoint - GCR - Virus - VP Computer Is Infected With Virus - Rule,1,DA-ESS-EndpointProtection,"`GCR_Events_Virus_EndPoint` 
| rename dest as Computername 
| rex field=hostname ""(?<Computername>\w+)\.\w+\.\w+\.\w+"" 
| eval computername=lower(Computername) 
| lookup Director_Computers.csv computername output Tag 
| lookup VP_computers.csv computername output Status 
| search Status=enable OR Tag=dc 
| eval Alert_name=""GCR - Virus - VP Computer Is Infected With Virus"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval user=coalesce(user,username)
| rename hostname as dest
| rex field=resource ""file:_(?P<file_path>[^\""]+)""
| eval file_name=mvindex(split(file_path, ""\\""), -1)
| eval username=lower(mvindex(split(user, ""\\""), -1))
| join type=inner username [|inputlookup VP_name.csv | rename AD AS username,AREA as region | eval username=lower(username) | fields username,Level,NAME,region]
| stats values(vendor_product) as vendor_product,values(user) as user,values(NAME) as identity,values(Level) as level,values(region) as region,values(signature) as signature,values(severity) as severity,values(process) as process,values(file_name) as file_name,values(file_path) as file_path,count by dest",
Endpoint - HDSI Critical Severity Malware Detected - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats `summariesonly` values(Malware_Attacks.dest_priority) as dest_priority 
    values(Malware_Attacks.action) as action 
    values(Malware_Attacks.severity) as severity 
    values(Malware_Attacks.category) as category 
    dc(Malware_Attacks.signature) as signature_count 
    values(Malware_Attacks.signature) as signature 
    values(Malware_Attacks.file_name) as file_name 
    values(Malware_Attacks.file_path) as file_path 
    values(Malware_Attacks.file_hash) as file_hash 
    values(sourcetype) as sourcetype 
    from datamodel=Malware 
    where `hdsi_critical_severity_malware_filter` `hdsi_malware_detection_filter` 
    by Malware_Attacks.dest 
| rename Malware_Attacks.* as * 
| search `hdsi_critical_severity_malware_search_filter`",1483
Endpoint - HDSI Potential Follina Detection - Rule,1,SplunkEnterpriseSecuritySuite,"index=* source=*wineventlog* (process_name=msdt.exe OR process_name=*msdt.exe) parent_process_name IN (""winword.exe"", ""excel.exe"", ""powerpnt.exe"", ""outlook.exe"", ""mspub.exe"", ""visio.exe"") OR process IN (""*ms-msdt:/id*"", ""*IT_BrowseForFile=*"",""*IT_RebrowseForFile=*"")
| stats list(user) AS user, list(parent_process_name) AS parent_process_name, list(process_name) AS process_name, list(process) AS process, list(process_id) AS process_id, list(parent_process_id) AS parent_process_id, count by dest",1218
Endpoint - HDSI SCEP Solorigate Detection - Rule,1,SplunkEnterpriseSecuritySuite,"(index=sccm signature=""*Solorigate*"") 
| convert ctime(_time) AS orig_time 
| stats count values(signature) as signature values(username) as user values(resource) as file_name values(orig_time) as orig_time by hostname
| rename hostname as dest",1072
Endpoint - HDSI: Attack Detected on XP System - Rule,1,DA-ESS-EndpointProtection,index=pan_logs sourcetype=pan:threat tag=attack XP_Hostname=* (severity=high OR severity=critical),
Endpoint - HDSI: Host with Recurring Malware Infection - Rule,1,DA-ESS-EndpointProtection,"| datamodel Malware Malware_Attacks search | `drop_dm_object_name(Malware_Attacks)` | search NOT sourcetype=china-scep-csv | eval severity = if(severity == ""Severe"", ""critical"", severity) | fillnull value="""" | stats dc(date) as day_count,values(signature) as signature,values(file_path) as file_path by dest,severity,dvc,user,vendor_product | search severity=high OR severity=critical | where day_count>4",
Endpoint - HDSI: Old Malware Infection - Rule,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` max(_time) as lastTime
   values(Malware_Attacks.file_name) as file_name
   values(Malware_Attacks.file_path) as file_path
   values(Malware_Attacks.user) as user
   from datamodel=Malware.Malware_Attacks
   where `hdsi_unhandled_malware_filter` Malware_Attacks.action!=""allowed"" Malware_Attacks.signature!=""unknown"" NOT (sourcetype=""imperva:waf"" Malware_Attacks.signature=""http-worm"" Malware_Attacks.action=""blocked"" `hdsi_rfc1918(Malware_Attacks.dest)`)
   by Malware_Attacks.signature,Malware_Attacks.action,Malware_Attacks.src,sourcetype
 | `drop_dm_object_name(""Malware_Attacks"")`
 | eval file_name=coalesce(file_name,file_path) 
 | lookup local=true malware_tracker dest,signature OUTPUT firstTime
 | eval dayDiff=round((lastTime-firstTime)/86400,1)
 | search dayDiff>30
 | fields - file_path",
Endpoint - HDSI: Outbreak Observed - Rule,1,DA-ESS-EndpointProtection,"| tstats summariesonly=true allow_old_summaries=true
    dc(Malware_Attacks.dest) as ""system_count""
    values(Malware_Attacks.dest) as ""dest"", values(Malware_Attacks.file_name) as ""file_name"", values(Malware_Attacks.file_path) as ""file_path""
  from datamodel=Malware.Malware_Attacks
  where `hdsi_endpoint_outbreak_observed_filter`
  by ""Malware_Attacks.signature""
 | `drop_dm_object_name(Malware_Attacks)`
 | `map_notable_fields`
 | where system_count>=10",
Endpoint - HDSI: Unhandled Malware - Rule,1,DA-ESS-EndpointProtection,"| tstats summariesonly=t 
values(Malware_Attacks.file_name) as file_name 
values(Malware_Attacks.file_path) as file_path 
from datamodel=Malware.Malware_Attacks 
where (Malware_Attacks.action!=blocked Malware_Attacks.action!=dropped `hdsi_unhandled_malware_filter`)
by ""Malware_Attacks.dest"",""Malware_Attacks.signature"",""Malware_Attacks.severity"",""Malware_Attacks.action"",""Malware_Attacks.vendor_product"",""Malware_Attacks.user"",sourcetype
| `drop_dm_object_name(Malware_Attacks)`
| eval file_name=coalesce(file_name,file_path) 
| eval severity = if(severity == ""Severe"", ""critical"", severity)
| stats values(file_name) as file_name by dest,signature,severity,action,vendor_product,user,sourcetype",
Endpoint - High Or Critical Priority User Clicked A Malicious Email Link - Rule,1,DA-ESS-EndpointProtection,"| tstats count AS count from datamodel=Email where (nodename = All_Email.Filtering) (All_Email.user_priority=high OR All_Email.user_priority=critical) (All_Email.user!=no_match) (All_Email.Filtering.filter_action=clicksPermitted) groupby All_Email.user, All_Email.recipient, All_Email.url, All_Email.Filtering.filter_action prestats=true | stats dedup_splitvals=t count AS count by All_Email.user, All_Email.recipient, All_Email.url, All_Email.Filtering.filter_action | sort limit=100 All_Email.user | fields - _span | rename All_Email.user AS user All_Email.recipient AS recipient All_Email.url AS url All_Email.Filtering.filter_action AS filter_action | fillnull count | fields user, recipient, url, filter_action, count",
Endpoint - Index Time Delta 2 - Summary Gen,1,SA-EndpointProtection,"| tstats prestats=true count where index=* NOT sourcetype=stash [| makeresults | `make_ts_value(""-1d@d"",start)` | `make_ts_value(""+0s"",end)` | eval search=""(_indextime>="".start."" AND _indextime<="".end."")""] by _time,_indextime,host,sourcetype span=1s | eval timeDiff=abs(_time-_indextime) | fields - psrsvd* | where timeDiff>300 | stats min(timeDiff) as min_timeDiff,max(timeDiff) as max_timeDiff,sum(timeDiff) as sum_timeDiff,count by host,sourcetype | eval _time=now()",None
Endpoint - Listening Ports Tracker - Lookup Gen,1,SA-EndpointProtection,"| tstats summariesonly=true min(""_time"") as ""firstTime"",max(""_time"") as ""lastTime"" from datamodel=""Endpoint"".""Ports"" by ""Ports.dest"",""Ports.transport"",""Ports.dest_port"" | rename ""Ports.dest"" as ""dest"",""Ports.transport"" as ""transport"",""Ports.dest_port"" as ""dest_port"" | eval _key=sha1('dest'.'transport'.'dest_port') | dedup _key | lookup ""listeningports_tracker"" ""_key"" OUTPUTNEW ""firstTime"" as ""lookup_firstTime"",""lastTime"" as ""lookup_lastTime"" | eval ""firstTime""=min('firstTime','lookup_firstTime'),""lastTime""=max('lastTime','lookup_lastTime') | fields - ""lookup_firstTime"",""lookup_lastTime"" | outputlookup append=T key_field=_key ""listeningports_tracker"" | stats count",None
Endpoint - Local Processes Tracker - Lookup Gen,1,SA-EndpointProtection,"| tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime from datamodel=Endpoint.Processes by Processes.dest,Processes.process | `drop_dm_object_name(""Processes"")` | rex field=process ""^\s*(?<process>[^\s]+)"" | eval _key=sha1(dest.""|"".process) | dedup _key | lookup localprocesses_tracker _key OUTPUTNEW firstTime as lookup_firstTime, lastTime as lookup_lastTime | eval firstTime=min(firstTime, lookup_firstTime),lastTime=max(lastTime, lookup_lastTime) | fields - lookup_firstTime, lookup_lastTime | outputlookup append=T key_field=_key localprocesses_tracker | stats count",None
Endpoint - Malware Daily Count - Model Gen,1,SA-EndpointProtection,"| tstats `summariesonly` dc(Malware_Attacks.signature) as infection_count from datamodel=Malware.Malware_Attacks where earliest=-2d@d latest=-1d@d Malware_Attacks.action=allowed by Malware_Attacks.dest,_time span=1d | stats sum(infection_count) as current_count by _time | fit DensityFunction current_count partial_fit=true dist=norm into app:malware_infection_count_by_1d",None
Endpoint - Malware Operations Tracker - Lookup Gen,1,SA-EndpointProtection,"| from datamodel:""Malware"".""Malware_Operations"" | search (product_version=* OR signature_version=*) | eval time_product_version=if(isnotnull(product_version),_time,null()) | eval time_signature_version=if(isnotnull(signature_version),_time,null()) | stats latest(_time) as _time,latest(dest_nt_domain) as dest_nt_domain,latest(time_product_version) as time_product_version,latest(product_version) as product_version,latest(time_signature_version) as time_signature_version,latest(signature_version) as signature_version,latest(vendor_product) as vendor_product by dest | lookup malware_operations_tracker dest OUTPUT time_product_version as time_product_version_old,product_version as product_version_old,time_signature_version as time_signature_version_old,signature_version as signature_version_old | eval product_version=case(isnull(product_version_old),product_version,isnull(product_version) OR time_product_version<time_product_version_old,product_version_old,product_version==product_version_old,product_version_old,product_version!=product_version_old,product_version) | eval time_product_version=case(isnull(product_version_old),time_product_version,isnull(product_version) OR time_product_version<time_product_version_old,time_product_version_old,product_version==product_version_old,time_product_version_old,product_version!=product_version_old,time_product_version) | eval signature_version=case(isnull(signature_version_old),signature_version,isnull(signature_version) OR time_signature_version<time_signature_version_old,signature_version_old,signature_version==signature_version_old,signature_version_old,signature_version!=signature_version_old,signature_version) | eval time_signature_version=case(isnull(signature_version_old),time_signature_version,isnull(signature_version) OR time_signature_version<time_signature_version_old,time_signature_version_old,signature_version==signature_version_old,time_signature_version_old,signature_version!=signature_version_old,time_signature_version) | fields - *old | inputlookup append=T malware_operations_tracker | eventstats latest(_time) as _time by dest | eventstats latest(dest_nt_domain) as dest_nt_domain by dest | eventstats latest(vendor_product) as vendor_product by dest | dedup dest | outputlookup override_if_empty=false malware_operations_tracker | stats count",None
Endpoint - Malware Tracker - Lookup Gen,1,SA-EndpointProtection,"| tstats summariesonly=true min(_time) as ""firstTime"",max(_time) as ""lastTime"" from datamodel=""Malware"".""Malware_Attacks"" by ""Malware_Attacks.src"",""Malware_Attacks.signature"" | rename ""Malware_Attacks.src"" as ""src"",""Malware_Attacks.signature"" as ""signature"" | eval _key=sha1('src'.'signature') | lookup ""malware_tracker"" ""_key"" OUTPUTNEW ""firstTime"" as ""lookup_firstTime"",""lastTime"" as ""lookup_lastTime"" | eval ""firstTime""=min('firstTime','lookup_firstTime'),""lastTime""=max('lastTime','lookup_lastTime') | where strptime('lastTime', ""%s"")>=relative_time(now(), ""-5y"") | fields - ""lookup_firstTime"",""lookup_lastTime"" | outputlookup append=T key_field=_key ""malware_tracker"" | stats count",None
Endpoint - Services Tracker - Lookup Gen,1,SA-EndpointProtection,"| tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime,latest(Services.start_mode) as start_mode from datamodel=Endpoint.Services by Services.dest,Services.service | `drop_dm_object_name(""Services"")` | inputlookup append=T services_tracker | sort 0 - lastTime | stats min(firstTime) as firstTime,max(lastTime) as lastTime,first(start_mode) as start_mode by dest,service | outputlookup override_if_empty=false services_tracker | stats count",None
Endpoint - System Version Tracker - Lookup Gen,1,SA-EndpointProtection,"| tstats summariesonly=false max(""_time"") as ""_time"" from datamodel=""Compute_Inventory"".""All_Inventory"" where nodename=""All_Inventory.OS"" by ""All_Inventory.dest"",""All_Inventory.OS.os"" | rename ""All_Inventory.dest"" as ""dest"",""All_Inventory.OS.os"" as ""os"" | inputlookup append=T ""system_version_tracker"" | stats max(""_time"") as ""_time"" by ""dest"",""os"" | outputlookup override_if_empty=false ""system_version_tracker"" | stats count",None
Endpoint - Update Signature Reference - Lookup Gen,1,SA-EndpointProtection,"| from datamodel:""Updates"".""Updates"" | eval signature_zip=mvzip(signature,signature_id) | mvexpand signature_zip | rex field=signature_zip ""(?<signature>.*)\,(?<signature_id>.*)"" | stats min(_time) as firstTime,max(_time) as lastTime,latest(signature) as signature by signature_id,vendor_product | inputlookup append=T update_signature_reference_lookup | eval _time=lastTime | stats min(firstTime) as firstTime,max(lastTime) as lastTime,latest(signature) as signature by signature_id,vendor_product | outputlookup override_if_empty=false update_signature_reference_lookup | stats count",None
Endpoint - User Account Tracker - Lookup Gen,1,SA-EndpointProtection,"| from datamodel:""Compute_Inventory"".""User"" | stats min(""_time"") as firstTime,max(""_time"") as lastTime,latest(""interactive"") as interactive by dest,user | eval _key=sha1(dest.user) | dedup _key | lookup useraccounts_tracker _key OUTPUTNEW firstTime as lookup_firstTime, lastTime as lookup_lastTime, interactive as lookup_interactive | eval lookup_lastTime=if(isnum(lookup_lastTime), lookup_lastTime, 0), firstTime=min(firstTime, lookup_firstTime), lastTime=max(lastTime, lookup_lastTime), interactive=if(lastTime>lookup_lastTime, interactive, lookup_interactive) | fields firstTime,lastTime,dest,user,interactive | outputlookup key_field=_key append=T useraccounts_tracker| stats count",None
ES-AWS - Account ID List - Lookup Gen,1,SplunkEnterpriseSecuritySuite,"`aws-index` | eval account_id = mvdedup(mvappend(aws_account_id, recipientAccountId, AwsAccountId, vendor_account)) | where account_id != ""unknown"" | inputlookup append=T aws_all_account_ids | stats count by account_id | fields - count | outputlookup override_if_empty=false aws_all_account_ids | stats count",None
ES-AWS - Actions List - Lookup Gen,1,SplunkEnterpriseSecuritySuite,"`aws-index` NOT command IN (""Get*"", ""Describe*"" ""List*"") | eval cloud_service_provider=""aws"" | inputlookup append=T actions | stats count by command, cloud_service_provider, change_type | fields - count | outputlookup override_if_empty=false actions | stats count",None
ESS - Notable Events,1,SplunkEnterpriseSecuritySuite,"`notable` | search NOT `suppression` | eval timeDiff_type=case(_time>=relative_time(now(), ""-24h@h""),""current"", 1=1, ""historical"") | expandtoken rule_title | table _time,event_id,security_domain,urgency,rule_name,rule_title,src,dest,src_user,user,dvc,status,status_group,owner,timeDiff_type,governance,control | outputlookup es_notable_events | stats count",
GCR -  Attack -  Suspicious IP of Intentional Attack,1,AmwayGcrSec,"index=""output-gcr"" search_name=""GCR - IPS - IPS Blocked Source IP Hourly Outputlist"" 
| stats values(time) as time values(dest_ip) as dest_ips values(app:category) as appcategory values(category) as category values(search_name) as search_name values(countrys) as countrys count by src_ip 
| table time search_name count countrys src_ip 
| append 
    [ search index=""output-gcr"" search_name=""Global - Phishing - ProofPoint Blocked Source IP Outputlist"" 
    | rename senderIP as src_ip 
    | stats values(time) as time values(search_name) as search_name count by src_ip 
    | table time search_name count src_ip
        ] 
| append 
    [ search index=""output-gcr"" search_name=""GCR - Audit - Suspicious Office 365 Login"" 
    | rename ClientIP as src_ip 
    | stats values(time) as time values(search_name) as search_name count by src_ip 
    | table time search_name count src_ip] 
| append 
    [ search index=""output-gcr"" search_name=""Global - Audit - VPN Brute Force Login Failure Outputlist"" 
    | stats values(time) as time values(search_name) as search_name count by src_ip 
    | table time search_name count src_ip
        ] 
    ``` 
| append 
    [ search index=""output-gcr"" search_name=""Global - Audit - Okta Brute Force Login Failure Outputlist"" 
    | stats values(time) as time values(search_name) as search_name values(country) as countrys values(city) as citys count by src_ip 
    | table time search_name count countrys src_ip
        ] ``` 
| append 
    [ search index=""output-gcr"" search_name=""GCR - Web - Maybe Successful Compromise"" 
    | rename src as src_ip 
    | stats values(time) as time values(Alert_name) as Alert_name values(src_country) as countrys values(src_city) as citys count by src_ip 
    | rename Alert_name as search_name 
    | table time search_name count src_ip
        ] 
| append 
    [ search index=""output-gcr"" search_name=""Audit - Router Failed Login From Internet (ACS)"" 
    | rename Remote_Address as src_ip 
    | stats values(time) as time values(search_name) as search_name count by src_ip 
    | table time search_name count src_ip
        ] 
| stats values(time) as time values(search_name) as Alert_name values(countrys) as countrys values(citys) as citys dc(search_name) as dc values(count) as counts count by src_ip 
| iplocation src_ip 
| table time Alert_name dc counts src_ip City Country 
| where dc >1",
GCR  - IPS - Internal HTTP Request Brute Force Attack,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist"" Alert_name=""GCR - IPS - Internal HTTP Request Brute Force Attack"" 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR  - Vendor - Security Events Monthly Report,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report"" 
| eval Date=strftime(_time, ""%Y-%m"") 
| fillnull value=0 
| stats values(First_name) as First_name ,values(Last_name) as Last_name,sum(AD_Account_Sharing) as AD_Account_Sharing,sum(C_URL) as C&C_URL, sum(Coin_Mining) as Coin_Mining,sum(""EndPoint_Virus(SCEP/Mcafee)"") as ""EndPoint_Virus(SCEP/Mcafee)"",sum(Excessive_Sinkhole_Hits) as Excessive_Sinkhole_Hits,sum(""Malware_URL"") as Malware_URL,sum(PA_Spyware) as PA_Spyware,sum(PA_Virus) as PA_Virus,sum(PA_Vulnerability) as PA_Vulnerability,sum(Ransomware) as Ransomware,sum(VPN_AV_Noncompliance) as VPN_AV_Noncompliance,sum(VPN_Patch_Noncompliance) as VPN_Patch_Noncompliance by Date,User 
| addtotals ""AD_Account_Sharing"",""C&C_URL"",""Coin_Mining"",""EndPoint_Virus(SCEP/Mcafee)"",""Excessive_Sinkhole_Hits"",""First_name"",""Last_name"",""Malware_URL"",""PA_Spyware"",""PA_Virus"",""PA_Vulnerability"",Ransomware,""VPN_AV_Noncompliance"",""VPN_Patch_Noncompliance"",""Wildfire-Virus"" 
| replace ""-"" with """" in First_name,Last_name 
| sort - Total 
| search User!=cnvdi*",None
GCR  - Web - Website Attack Rules Statistics,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=GCR_WebAttack_Alert_OutputList NOT `GCR_List_IP_VAScanner(src)` 
| eval NowTime=strftime(now(),""%Y-%m"") 
| rename dst as ip 
| lookup networkcidrlookup ip output name 
| lookup servercidrlookup ip output name 
| lookup gcr_asset_info.csv ip 
| eval Asset_Name=asset+ ""   "" +name 
| table Alert_name ip Target_Asset_Name Asset_Name,NowTime 
| fillnull value=unknow 
| rename ip as Target_Address 
| stats count by NowTime Alert_name Target_Address Target_Asset_Name Asset_Name 
| rename Target_Asset_Name as Target_Zone_Name",None
GCR - AD - Suspicious Kerberos Authentication Using Weak Cipher Suite,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_windows_alert_outputlist"" Alert_name=""GCR - AD - Suspicious Kerberos Authentication Using Weak Cipher Suite""
| where count > 1
| table Trigger_Time Date_Time host Account_Name Service_Name Ticket_Encryption_Type action  Message count",
GCR - AD - Suspicious Kerberos Authentication Using Weak Cipher Suite Outputlist,1,AmwayGcrSec,"index=domain `GCR_List_HostName_AD` EventCode=4769  Failure_Code=0x0 Service_Name!=""*$"" Service_Name!=krbtgt Ticket_Encryption_Type IN(""0x17"",""0x1"",""0x3"") Account_Name!=""*$*""
| search NOT `GCR_List_Account_ADKerberosAuthentication_Exception`
| stats count by host Account_Name Service_Name Ticket_Encryption_Type action signature _time
| eval Trigger_Time=strftime(now(),""%F %H:%M:%S"")
| eval Date_Time=strftime(_time,""%F %H:%M:%S"")
| eval Message= signature
| table Trigger_Time Date_Time host Account_Name Service_Name Ticket_Encryption_Type action  Message count

| eval Alert_name=""GCR - AD - Suspicious Kerberos Authentication Using Weak Cipher Suite""
| collect index=""output-gcr"" sourcetype=""gcr_windows_alert_outputlist""",
GCR - AliCloud -  IPS Blocked Alert Correlated with WAF Access Log,1,AmwayGcrSec,"index=ali (sourcetype=amwayacclpd-fw-log OR sourcetype=*cloudfirewall*) AND log_type=""internet_log"" AND direction=in AND rule_result!=pass AND url!="""" AND vul_level=3  | fillnull value=NULL  | rename _time as ips_time1  | stats count by dst_ip,dst_port, url, ips_rule_name, ips_rule_id,acl_rule_id,vul_level,aliuid,ips_time1  | join type=inner dst_ip dst_port url      [ search index=ali sourcetype=""waf-log"" earliest=-10m latest=now      | fillnull value=NULL      | strcat ""http://"" dhost request_path url      | rex field=upstream_addr ""(?<dst_ip>\d+\.\d+\.\d+\.\d+):(?<dst_port>\d+)""      | rename _time as waf_time1      | stats count by dst_ip, dst_port,url,real_client_ip,waf_time1,http_cookie,http_user_agent,bypass_matched_ids]  | eval Alert_name=""GCR - AliCloud -  IPS Blocked Alert Correlated with WAF Access Log""  | eval Trigger_Time=strftime(now(),""%F %T"")  | lookup GCR_Ali_Account ali_uid as aliuid output Okta_Alias as Okta_Alias  | eval waf_time=strftime(waf_time1,""%F %T"")  | eval ips_time=strftime(ips_time1,""%F %T"")  | eval time_gap=waf_time-ips_time  | where 0<time_gap and time_gap<10  | table Trigger_Time waf_time ips_time real_client_ip dst_ip dst_port ips_rule_name url http_cookie ips_rule_id acl_rule_id vul_level aliuid Okta_Alias http_user_agent bypass_matched_ids",
GCR - AliCloud - ActionTrail Granting Account Privilege,1,AmwayGcrSec,"index=ali sourcetype=actiontrail event.serviceName=RAM event.eventName!=""Describe*"" event.eventName!=""List*"" event.eventName!=""Get*"" event.eventName!=""*Description"" event.eventName!=""Creat*"" (event.eventName=""Attach*"" OR event.eventName=""Update*"" OR event.eventName=""Bind*"" OR event.eventName=""Set*"" OR event.eventName=""Pass*"" OR event.eventName=""Assume*"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| lookup GCR_Ali_Account ali_uid as event.userIdentity.accountId output Okta_Alias as Okta_Alias 
| eval Alert_name=""GCR - AliCloud - ActionTrail Granting Account Privilege"" 
| rename event.eventTime as time event.eventSource as eventSource event.eventName as eventName event.sourceIpAddress as sourceIpAddress event.userIdentity.accountId as accountId event.acsRegion as acsRegion event.userIdentity.userName as userName 
| table time Okta_Alias sourceIpAddress userName eventName eventSource   accountId acsRegion  
| collect index=""output-gcr"" sourcetype=""gcr_alicloud_alert_outputlist""",
GCR - AliCloud - AttachPolicy,1,AmwayGcrSec,"index=ali sourcetype=amway_alicloud_log eventName=""AttachPolicy"" source!=""*amwayhybrispoc-actiontrail*""
| rex field=source ""\/log\/(?<MasterAccount>.*?)\/.*"" 
| table _time,eventName,MasterAccount,sourceIpAddress,""userIdentity.userName"",""requestParameters.PolicyName"",""requestParameters.PolicyType"",requestParameters.PrincipalName 
| rename ""userIdentity.userName"" as User,""requestParameters.PolicyName"" as ChangePolicyName,""requestParameters.PolicyType"" as PolicyType,sourceIpAddress as SrcIP,requestParameters.PrincipalName as TargetUser 
| eval Alert_name=""GCR - AliCloud - AttachPolicy"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""GCR_AliCloud_Alert_OutputList"" 
| fields - Alert_name Trigger_Time",
GCR - AliCloud - Cloud Firewall IPS Monthly Summary,1,AmwayGcrSec,"| from datamodel:Alibaba_Logs.IPS_Threat_Log | chart count AS ""Count"" by Okta_Alias,attack_type_name_en | addtotals | sort - Total | rename Okta_Alias as ""Cloud Account""",
GCR - AliCloud - DisableVirtualMFA,1,AmwayGcrSec,"index=ali sourcetype=amway_alicloud_log eventName=DisableVirtualMFA 
| rex field=source ""\/log\/(?<MasterAccount>.*?)\/.*"" 
| table _time,eventName,MasterAccount,sourceIpAddress,""userIdentity.userName"",""userIdentity.type"",""referencedResources.User{}"" 
| rename ""userIdentity.userName"" as User,""userIdentity.type"" as UserType,""referencedResources.User{}"" as TargetUser,sourceIpAddress as SrcIP 
| eval Alert_name=""GCR - AliCloud - DisableVirtualMFA"" 
| eval Trigger_Time=strftime(now(),""%F %T"")
| collect index=""output-gcr"" sourcetype=""GCR_AliCloud_Alert_OutputList""|fields - Alert_name Trigger_Time",
GCR - AliCloud - FW Blocked Source IP Hourly OutputList,1,AmwayGcrSec,"index=ali (sourcetype=amwayacclpd-fw-log OR sourcetype=*cloudfirewall*) AND log_type=""internet_log"" AND direction=in AND rule_result!=pass AND attack_type_name!="""" AND vul_level>0 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(dst_ip) as dest_ip values(app_name) as app_name values(country_id) as country values(region_id) as region_id values(url) as url count by src_ip 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - AliCloud - FW Blocked Source IP Hourly OutputList"" 
| table time src_ip app_name region_id country dst_ip url 
| collect index=""output-gcr"" sourcetype=""gcr_AliCloud_alert_outputlist""",
GCR - AliCloud - IPS Alert Weekly Report,1,AmwayGcrSec,"index=ali attack_type_name!="""" rule_result!=drop
| table start_time,end_time,aliuid,Cloud_Account,Contact_Point,region_id,attack_type,attack_type_name,attack_type_name_en, ips_rule,ips_rule_name,ips_rule_name_en,rule_result,src_ip,dst_ip,dst_port,url,level,vul_level
| eval start_time=strftime(start_time,""%F %T"") 
| eval end_time=strftime(end_time,""%F %T"")
| eval url=urldecode(url) 
| eval attack_type=attack_type_name+""(""+attack_type_name_en+"")""
| eval ips_rule=ips_rule_name+""(""+ips_rule_name_en+"")""
| eval level=case(vul_level==1,""低危"",vul_level==2,""中危"",vul_level==3,""高危"")
| lookup GCR_Ali_Account.csv ali_uid as aliuid OUTPUT Okta_Alias as Cloud_Account, Contact_Point
| fields - aliuid, vul_level,attack_type_name,attack_type_name_en,ips_rule_name,ips_rule_name_en",None
GCR - AliCloud - ServerGuardAlert - Security Alert,1,AmwayGcrSec,"index=ali sourcetype=*securitycenter* ( topic__=sas-security-log) 
| regex detail != ""/opt/traps/download/content""
| rex field=source ""sls\_datainput\:\/\/(?<MasterAccount>[^\_]*)\_.*"" 
| table _time,topic__,MasterAccount,level,name,op,status,detail
| rename ""topic__"" as alert_type,name as alert_name
| replace ""sas-vul-log"" with ""漏洞告警"",""sas-security-log"" with ""安全告警"" in alert_type 
| eval Alert_name=""GCR - AliCloud - ServerGuardAlert - Security Alert"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""GCR_AliCloud_Alert_OutputList"" 
| fields - Alert_name Trigger_Time",
GCR - AliCloud - ServerGuardAlert - Vulnerability Daily Report Alert,1,AmwayGcrSec,| inputlookup Ali_Vulnerability_Daily_Report.csv,None
GCR - AliCloud - WAF Alert IP To Cloud FW Alert,1,AmwayGcrSec,"| from datamodel:Alibaba_Logs.WAF_Log |where bypass_matched_ids!=""""
| rename real_client_ip as src_ip
| table _time,src_ip,matched_host 
| join type=left src_ip 
    [| from datamodel:Alibaba_Logs.Cloud_Firewall_Logs | where rule_result=""alert""
    | table src_ip,Contact_Point,Enterprise_Alias,region_id,ips_rule_name] 
| fillnull value=NULL region_id 
| where region_id!=""NULL"" 
| stats count by src_ip,matched_host,Contact_Point,Enterprise_Alias,region_id,ips_rule_name |rename matched_host as matched_host(waf),Contact_Point as Contact_Point(cloudfw),Enterprise_Alias as Alias(cloudfw),region_id as region_id(cloudfw),ips_rule_name as ips_rule_name(cloudfw),src_ip as src_ip(waf->cloudfw)
| sort - count",
GCR - AliCloud - WAF Attack Events Monthly Summary,1,AmwayGcrSec,"| from datamodel:Alibaba_Logs.WAF_Block_Events | chart count by matched_host,protection_model | addtotals | sort Total desc | rename matched_host as Domain",None
GCR - AliCloud - WAF Blocked Source IP Hourly OutputList,1,AmwayGcrSec,"index=ali eventtype=waf-alert final_action=block 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| rename src as src_ip 
| stats values(dhost) as dhosts values(request_method) as request_method values(time) as time values(http_user_agent) as  http_user_agent values(status) as statuses values(region) as regions values(request_path) as request_pathes count by src_ip 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - AliCloud - WAF Blocked Source IP Hourly OutputList"" 
| table time src_ip request_method statuses regions request_pathes http_user_agent dhosts  
| collect index=""output-gcr"" sourcetype=""gcr_AliCloud_alert_outputlist""",
GCR - AliCloud – IPS High Risk Unblock Alert,1,AmwayGcrSec,"| from datamodel:""Alibaba_Logs.IPS_Threat_Log"" 
| search vul_level=3 AND rule_result!=drop 
| table event_date,Okta_Alias,Contact_Point,region_id,attack_type_name_en,ips_rule_id,ips_rule_name_en,rule_result,src_ip,dst_ip,dst_port,url,vul_level_txt
| eval url=urldecode(url)
| rename event_date as ""Event Date"", Okta_Alias as ""Okta Alias""",
GCR - AliCloud – WAF Alert (Same Attack from difference IP),1,AmwayGcrSec,"| from datamodel:Alibaba_Logs.WAF_Alert_Events 
| search request_path!=""*.php"" AND querystring!=""-"" AND http_user_agent!=""Mozilla/5.0 (compatible; Yahoo! Slurp China; http://misc.yahoo.com.cn/help.html)""
| lookup GCR_Domain_Asset.csv domainName as matched_host OUTPUT Application,""IT Contact Point"" as IT_contact,Cloud_Account as cloud_account
| table _time,final_action,protection_model,final_rule_id,request_path,querystring,http_referer,real_client_ip,remote_addr,status,matched_host,Application,IT_contact,cloud_account,ua_os,ua_device_type,http_user_agent 
| eventstats dc(real_client_ip) as count by request_path,querystring | where count>=3
| collect index=""output-gcr"" sourcetype=""GCR_AliCloud_Alert_OutputList"" 
| sort - request_path querystring",
GCR - AliCloud – WAF Alert (Unblocked),1,AmwayGcrSec,"index=ali sourcetype=waf-log waf_action web_attack_type!=other web_attack_type!=xss waf_action!=block real_client_ip!=""58.248.178.101""
| table time,waf_action,web_attack_type,real_client_ip,remote_addr,upstream_addr,status,waf_rule_id,matched_host,Application,IT_contact,cloud_account,request_path,querystring,ua_os,http_referer,ua_device_type,http_user_agent,request_traceid
| lookup GCR_Domain_Asset.csv domainName as matched_host OUTPUT Application,""IT Contact Point"" as IT_contact, Cloud_Account as cloud_account
| eval http_referer=urldecode(http_referer) 
| eval request_path=urldecode(request_path) 
| eval querystring=urldecode(querystring) 
| eval Alert_name=""GCR - AliCloud - WAFAlert (Unblocked)"" 
| eval Trigger_Time=strftime(now(),""%F %T"") | collect index=""output-gcr"" sourcetype=""GCR_AliCloud_Alert_OutputList"" 
| eval time=strptime(time,""%FT%T%Z"") 
| eval time=strftime(time,""%F %T"") 
| fields - Alert_name Trigger_Time",
GCR - AS400 - AS400 Account Sharing,1,AmwayGcrSec,"index=unix-gcr sourcetype=AS400* dvc_event_category=""*JS*"" dvc_auto_string1=""SI*"" source_ip!=""0.*"" 
| eventstats dc(source_ip) as eventcount by source_username,dvc_event_category,dvc_hostname 
| where eventcount>=2 
| table _time source_username source_ip dvc_event_category dvc_hostname name target_process_name dvc_auto_num1 dvc_auto_string1
| lookup networkcidrlookup ip as source_ip output name as source_ip_zone 
| eval Alert_name=""GCR - AS400 - AS400 Account Sharing"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""GCR_AS400_Account_Sharing""
| fields - Alert_name Trigger_Time name dvc_auto_num1 target_process_name",
GCR - AS400 - AS400 Account Sharing Report,1,AmwayGcrSec,"index=unix-gcr sourcetype=AS400* dvc_event_category=""*JS*"" dvc_auto_string1=""SI*"" source_ip!=""0.*"" 
    AND dvc_hostname=AMWCHI
    NOT `AHK_List_Segment(source_ip)`
    AND source_ip!=10.144.122.*
    AND source_ip!=10.144.123.*
    AND source_ip!=10.140.202.*
    AND source_username!=""CINV*""
    AND source_username!=""INV*"" 
| lookup networkcidrlookup ip as source_ip output name as source_ip_zone 
| fillnull value=NULL source_ip_zone 
| stats Count by source_username,source_ip,source_ip_zone 
| sort - Count",None
GCR - AS400 - AS400 Invalid Password Events Report,1,AmwayGcrSec,"index=unix-gcr sourcetype=AS400* 
  AND dvc_event_category=*PW*
  AND (target_user=CN*  OR  target_user=*HK*)
|stats count by dvc_hostname  dvc_auto_string1",None
GCR - AS400 - AS400 Privilege Account Change,1,AmwayGcrSec,"index=unix-gcr sourcetype=AS400*  
 AND dvc_event_category=*CD*
   AND (((dvc_auto_string1=""*CRTUSRPRF*""  OR  dvc_auto_string1=""*DLTUSRPRF*""   OR  dvc_auto_string1=""*CHGUSRPRF*"")
   AND (dvc_auto_string1=""*CN084841*""  OR  dvc_auto_string1=""*QSECOFR*"")
   AND dvc_auto_string1!=""*CRTDTAARA*"")
 OR  (dvc_auto_string1=""*GRPPRF*""   AND  dvc_auto_string1=""*QSECOFR*"")
 OR  (dvc_auto_string1=""*CHGUSRPRF*""   AND  dvc_auto_string1=""*ALLOBJ*""))
 AND  dvc_auto_string1!=""CRTVUSRPRF*""
 AND  dvc_auto_string1!=""*CALL PGM(TSCGRP20)*""
 AND  dvc_auto_string1!=""*CCHGUSRPRF QSYS  *CMD YCHGUSRPRF USRPRF(CN084841)*""
 AND  dvc_auto_string1!=""*RTVUSRPRF*""
 AND  dvc_auto_string1!=""*USRPRF(IBM)*""
 AND  dvc_auto_string1!=""*TEXT('*""
| table _time source_username name dvc_event_category dvc_auto_num1 target_process_name dvc_auto_string1
| eval Alert_name=""GCR - AS400 - AS400 Privilege Account Change"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""GCR_AS400_Privilege_Account_Change"" 
| fields - Alert_name Trigger_Time  dvc_auto_num1 target_process_name",
GCR - AS400 - AS400 Production Data Modification by ISD Staff,1,AmwayGcrSec,"index=unix-gcr sourcetype=AS400*
  AND dvc_event_category=*CD* 
  AND (( dvc_auto_string1=""*SQL*"" AND  (dvc_auto_string1=""*DELETE*""  OR  dvc_auto_string1=""*UPDATE*""  OR  dvc_auto_string1=""*INSERT*""  OR  dvc_auto_string1=""*CREATE*""  OR  dvc_auto_string1=""*DROP*""))
  OR  dvc_auto_string1=""CDLT*""
  OR  dvc_auto_string1=""CCRT*""
  OR  dvc_auto_string1=""CRMV*""
  OR  dvc_auto_string1=""CCHG*""
  OR  dvc_auto_string1=""*YWRKF*""
  OR  dvc_auto_string1=""*WRKDBF*""
  OR  dvc_auto_string1=""*CLRPFM*"")
  AND  `ACCL_List_Account_ProductionLibrary`
  AND  `ACCL_List_Account_ISDAccount`
  NOT(dvc_auto_string1=""*JOBD(ACLOBJ162P/QDFTJOBD)*""  AND  dvc_auto_string1=""*CRTUSRPRF*"")
  AND  name!=*CPYTAPF*
  AND  name!=*DMSRTJOB*
  AND  dvc_auto_string1!=""*ZAM/*""
  AND  dvc_auto_string1!=""*SAM/*""
  AND  dvc_auto_string1!=""CCHGLIBL*""
  AND  dvc_auto_string1!=""CCHGUSRPRF*""
  AND  dvc_auto_string1!=""CCHGDTAARA*""
  AND  dvc_auto_string1!=""CRMVLIBLE*""
  AND  dvc_auto_string1!=""*TOFILE(BCK*""
  AND  dvc_auto_string1!=""*TOFILE(QTEMP*""
  AND  dvc_auto_string1!=""CADDLIBLE*""
  AND  dvc_auto_string1!=""*UPDATE ROC/*"" 
| table _time source_username name dvc_event_category dvc_auto_num1 target_process_name dvc_auto_string1
| eval Alert_name=""GCR - AS400 - AS400 Production Data Modification by ISD Staff"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""GCR_AS400_Production_Data_Modification_by_ISD_Staff"" 
| fields - Alert_name Trigger_Time  dvc_auto_num1 target_process_name",
GCR - AS400 - AS400 Production Data Modification by Programmer Report,1,AmwayGcrSec,"index=unix-gcr sourcetype=AS400*
    AND dvc_event_category=*CD*
    AND `ACCL_List_Account_SDAccount`
    AND ( dvc_auto_string1=""*OMPD162CHN*""
    OR dvc_auto_string1=""*OMPO162CHN*""
    OR dvc_auto_string1=""*P3PRDTACHN*""
    OR dvc_auto_string1=""*P3PROBJCHN*""
    OR dvc_auto_string1=""*P3PROBJCOM*""
    OR dvc_auto_string1=""*REPRDTACHN*""
    OR dvc_auto_string1=""*REPROBJCHN*""
    OR dvc_auto_string1=""*RECHIPD*""
    OR dvc_auto_string1=""*RECHIPO*""
    OR dvc_auto_string1=""*ACLDBF162P*""
    OR dvc_auto_string1=""*ACLOBJ162P*"")
    AND ((index=""output-gcr"" (sourcetype=""GCR_AS400_System_Value_Change"" OR sourcetype=""GCR_AS400_Privilege_Account_Change"" OR sourcetype=""GCR_AS400_Production_Data_Modification_by_ISD_Staff""))
    OR (index=unix-gcr sourcetype=AS400* AND (`GCR_Events_AS400CD_BatchCOPYDate` OR `GCR_Events_AS400CD_CompilingCommand`) AND `ACCL_List_Account_ProductionLibrary` AND `ACCL_List_Account_ISDAccount`)) 
| stats count by _time source_username dvc_auto_string1 
| table _time source_username dvc_auto_string1",None
GCR - AS400 - AS400 Programmer Compiling Command Report,1,AmwayGcrSec,"index=unix-gcr sourcetype=AS400* AND dvc_event_category=*CD* 
    (`GCR_Events_AS400CD_CompilingCommand` AND `ACCL_List_Account_ProductionLibrary` AND `ACCL_List_Account_SDAccount`)
    AND ((index=""output-gcr"" (sourcetype=""GCR_AS400_System_Value_Change"" OR sourcetype=""GCR_AS400_Privilege_Account_Change"" OR sourcetype=""GCR_AS400_Production_Data_Modification_by_ISD_Staff""))
    OR ( index=unix-gcr sourcetype=AS400* AND (`GCR_Events_AS400CD_BatchCOPYDate` OR `GCR_Events_AS400CD_CompilingCommand`) AND `ACCL_List_Account_ProductionLibrary` AND `ACCL_List_Account_ISDAccount`)) 
| stats count by _time source_username dvc_auto_string1 
| table _time source_username dvc_auto_string1",None
GCR - AS400 - AS400 System Value Change or Privilege Account Change Report,1,AmwayGcrSec,"index=""output-gcr"" (sourcetype=""GCR_AS400_System_Value_Change""  OR sourcetype=""GCR_AS400_Privilege_Account_Change"")
AND  ((index=""output-gcr"" (sourcetype=""GCR_AS400_System_Value_Change""  OR sourcetype=""GCR_AS400_Privilege_Account_Change""  OR  sourcetype=""GCR_AS400_Production_Data_Modification_by_ISD_Staff""))
	 OR ( index=unix-gcr sourcetype=AS400*   (`GCR_Events_AS400CD_BatchCOPYDate`  OR   `GCR_Events_AS400CD_CompilingCommand`)  AND  `ACCL_List_Account_ProductionLibrary`  AND  `ACCL_List_Account_ISDAccount`))| stats count by _time  source_username  dvc_auto_string1
| table _time  source_username  dvc_auto_string1",None
GCR - AS400 - ATL AS400 Account Sharing Report,1,AmwayGcrSec,"index=unix-gcr sourcetype=AS400* dvc_event_category=""*JS*"" dvc_auto_string1=""SI*"" source_ip!=""0.*"" dvc_hostname=AMWTAI 
| lookup networkcidrlookup ip as source_ip output name as source_ip_zone 
| fillnull value=NULL source_ip_zone 
| stats count by source_username,source_ip,source_ip_zone 
| sort - count",None
GCR - Audit - [Low]Linux Mutiple Suspicious Activity Detection,1,AmwayGcrSec,"index=unix-gcr command=""cp /bin/bash*"" OR ""cp /bin/sh*"" OR ""find *u=s*"" OR ""find *root*-4000*"" OR ""git*"" OR ""wget*"" OR ""*chmod +x *"" OR ""*chmod 777 *"" OR ""*echo */etc/hosts"" OR ""*echo */etc/resolv.conf"" OR ""*echo */etc/crontab""
|table _time user host src_ip command",T1059 T1083
GCR - Audit - [Medium]Linux Log Clearing Activity Detection,1,AmwayGcrSec,"index=unix-gcr command=""ln *bash_history*"" OR ""shred *bash_history*"" OR ""truncate *bash_history*"" OR ""rm *bash_history*"" OR ""echo *bash_history*"" OR ""cat *bash_history*""
|table _time user host src_ip command","1016, 1485"
GCR - Audit - ACCL FTP Access Report,1,AmwayGcrSec,"index=""windows-gcr""  host=""acclftp.na.intranet.msd"" EventCode=4663  
 ( Object_Name=""*营销人员资料*""   OR
   Object_Name=""*机密*""   OR
   Object_Name=""*订单*""   OR
   Object_Name=""*邮寄*""   OR
   Object_Name=""*SR资料*""   OR
   Object_Name=""*用户信息*""   OR
   Object_Name=""*客户信息*""   OR
   Object_Name=""*用户资料*""   OR
   Object_Name=""*客户资料*""   OR
   Object_Name=""*加入资料*""   OR
   Object_Name=""*加入名单*""   OR
   Object_Name=""*加入清单*""   OR
   Object_Name=""*加入信息*""   OR
   Object_Name=""*顾客资料*""   OR
   Object_Name=""*申请资料*""   OR
   Object_Name=""*申请名单*""   OR
   Object_Name=""*申请清单*""   OR
   Object_Name=""*申请信息*""   OR
   Object_Name=""*顾客名单*""   OR
   Object_Name=""*顾客清单*""   OR
   Object_Name=""*顾客信息*""   OR
   Object_Name=""*财务*""   OR
   Object_Name=""*收入*""   OR
   Object_Name=""*配方*""   OR
   Object_Name=""*交易明细*""   OR
   Object_Name=""*绝密*"" OR 
   Object_Name=""*销售*"" OR 
   Object_Name=""*推广计划*"" OR 
   Object_Name=""*实验室报告*"" OR 
   Object_Name=""*检测报告*"" OR 
   Object_Name=""*报表*"" )
   |eval Keyword=case(match(Object_Name,""营销人员资料""),""营销人员资料"",match(Object_Name,""机密""),""机密"",match(Object_Name,""订单""),""订单"",match(Object_Name,""邮寄""),""邮寄"",match(Object_Name,""SR资料""),""SR资料"",match(Object_Name,""用户信息""),""用户信息"",match(Object_Name,""客户信息""),""客户信息"",match(Object_Name,""用户资料""),""用户资料"",match(Object_Name,""客户资料""),""客户资料"",match(Object_Name,""加入资料""),""加入资料"",match(Object_Name,""加入名单""),""加入名单"",match(Object_Name,""加入清单""),""加入清单"",match(Object_Name,""加入信息""),""加入信息"",match(Object_Name,""顾客资料""),""顾客资料"",match(Object_Name,""申请资料""),""申请资料"",match(Object_Name,""申请名单""),""申请名单"",match(Object_Name,""申请清单""),""申请清单"",match(Object_Name,""申请信息""),""申请信息"",match(Object_Name,""顾客名单""),""顾客名单"",match(Object_Name,""顾客清单""),""顾客清单"",match(Object_Name,""顾客信息""),""顾客信息"",match(Object_Name,""财务""),""财务"",match(Object_Name,""收入""),""收入"",match(Object_Name,""配方""),""配方"",match(Object_Name,""交易明细""),""交易明细"",match(Object_Name,""绝密""),""绝密"",match(Object_Name,""销售""),""销售"",match(Object_Name,""推广计划""),""推广计划"",match(Object_Name,""实验室报告""),""实验室报告"",match(Object_Name,""检测报告""),""检测报告"",match(Object_Name,""报表""),""报表"")
| stats count by _time,Object_Name,Account_Name,Accesses,Keyword",Unknown
GCR - Audit - ACCL Safenet Sensivite Data Download Report,1,AmwayGcrSec,"index=unix-gcr sourcetype=""AS400-Safenet"" source=AMWCHI 
    NOT `GCR_List_Segment_ServerFarm(IPADDR)` 
    NOT `GCR_List_Area_DMZ(IPADDR)`
    NOT `GCR_List_Area_Server(IPADDR)`
    source_user_name!=CNAP*
    source_user_name!=CMNAD88  source_user_name!=DB2CON source_user_name!=EBIZSOA source_user_name!=EDPAP 
    `GCR_Events_AD_SafenetList` 
| lookup networkcidrlookup ip as IPADDR output name as source_area_name 
| fillnull value=NULL source_area_name 
| table _time,source_user_name,IPADDR,source_area_name,sql,library_table |rename source_user_name as user_name,IPADDR as ip_address",Unknown
GCR - Audit - AD Account Sharing,1,AmwayGcrSec,"index=domain signature_id=4624 `ACCL_List_HostName_AD` (NOT `ACCL_List_Segment_VDI(Source_Network_Address)`)
    (NOT (Source_Network_Address=10.140.226.* OR Source_Network_Address=10.140.227.* OR Source_Network_Address=10.140.228.* OR Source_Network_Address=10.140.229.* OR Source_Network_Address=10.140.230.* OR Source_Network_Address=10.140.231.* )) AND
    (NOT (Source_Network_Address=10.143.226.* OR Source_Network_Address=10.143.227.* OR Source_Network_Address=10.143.228.* OR Source_Network_Address=10.143.229.* OR Source_Network_Address=10.143.230.* OR Source_Network_Address=10.143.231.*)) AND 
    Source_Network_Address=10.* AND
    (NOT (Source_Network_Address=10.198.161.* OR Source_Network_Address=10.180.160.* OR Source_Network_Address=10.180.161.* OR Source_Network_Address=10.54.* OR Source_Network_Address=10.55.*))
    user!=system 
    user!=""*\$"" 
    user!=""*anonymous*"" 
    user!=""CMNMN51"" 
    user!=""*CNP*"" 
    user!=""CNM*"" 
    user!=""CNTUFIN1"" 
    user!=""CNFORESCOUT""
    user!=""cnvrops01""
    user!=""cnvfogl01""
    user!=""LDAP*"" user!=""cnsangforac01"" user!=""cnsharepoint01"" 
    (user=CN* OR user=TW* OR user=HK*) Source_Network_Address!=10.140.23.238 Workstation_Name!=""-"" 
| rename name as Name 
| eventstats dc(Source_Network_Address) as EventCount by user 
| where EventCount >=4 
| eval Alert_name=""GCR - Audit - AD - Account Sharing"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| rename Source_Network_Address as ip 
| lookup networkcidrlookup ip  output region name 
| eval Source_Zone_Name=region+ "" "" +name 
| table Alert_name Trigger_Time time Name signature_id category action user ip Source_Zone_Name src_nt_host product vendor session_id 
| rename ip as Source_Network_Address 
| eval _time=strptime(Trigger_Time,""%Y-%m-%d %T"") 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",Unknown
GCR - Audit - AD Account Sharing Report,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" Alert_name=""GCR - Audit - AD - Account Sharing"" 
    user!=""CNFORESCOUT""
    user!=""cnvrops01""
    user!=""cnvfogl01""
| dedup session_id time 
| stats dc(Trigger_Time) as Alert_Count by user,Source_Zone_Name 
| sort - Alert_Count",Unknown
GCR - Audit - Different AD Account Login Failed On One Machine,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" Alert_name=""GCR - Audit - AD - Different AD Account Login Failed On One Machine"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| where d_time<=259200 
| eventstats dc(Trigger_Time) as alert_count by Source_Network_Address 
| where alert_count=1 
| where d_time<=301 
| table time Name signature_id user Source_Network_Address Source_Zone_Name src_nt_host IPList",Many
GCR - Audit - Different AD Account Login Failed On One Machine OutputList,1,AmwayGcrSec,"index=domain Source_Network_Address!=""-"" `GCR_List_IP_ADAppAuthenticationFailure_Exception` (NOT `ACCL_List_Segment_VDI(Source_Network_Address)`) NOT `ACCL_List_IP_InternetAccessFW(Source_Network_Address)` NOT `GCR_List_IP_VAScanner(Source_Network_Address)` 
| eventstats dc(user) as eventcount by Source_Network_Address 
| where eventcount>=10 
| rename Source_Network_Address as ip,name as Name 
| lookup networkcidrlookup ip output region name 
| eval Source_Zone_Name=region+ "" "" +name 
| eval Alert_name=""GCR - Audit - AD - Different AD Account Login Failed On One Machine"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval time=strftime(_time,""%F %T"") 
| sort - time 
| table Alert_name Trigger_Time time Name signature_id category action user ip Source_Zone_Name src_nt_host product vendor 
| rename ip as Source_Network_Address 
| eventstats values(Source_Network_Address) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| eval _time=strptime(Trigger_Time,""%Y-%m-%d %T"") 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",many
GCR - Audit - Internet Access Account Sharing (URL Filtering),1,AmwayGcrSec,"index=pan_logs tag=gcr_pan log_subtype=url (dvc_name=GZ_DC_PAN* OR dvc_name=*OFFICE*) rule=""Internet-Amway"" (application=web-browsing OR application=ssl) vendor=""Palo Alto Networks"" 
| regex user=""."" 
| eventstats dc(src_ip) as eventcount by user 
| where eventcount>=4 
| eval Alert_name=""GCR - Audit - Internet Access Account Sharing"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name Trigger_Time time action app application dest_ip dest_location dest_port dest_zone dvc_name file_name log_subtype region rule severity signature sequence_number src_ip src_country src_port src_user src_zone threat threat:severity threat_id threat_name eventcount 
| eval _time=strptime(Trigger_Time,""%Y-%m-%d %T"") 
| collect index=""output-gcr"" sourcetype=""GCR_Audit_PA_Alert_OutputList""",many
GCR - Audit - Internet Access Account Sharing (URL Filtering) Report,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=GCR_Audit_PA_Alert_OutputList Alert_name=""GCR - Audit - Internet Access Account Sharing"" 
| rename src_ip as ip 
| lookup networkcidrlookup ip OUTPUT region name 
| eval Source_Zone_Name=region+ "" "" +name 
| fillnull value=NULL Source_Zone_Name 
| stats dc(Trigger_Time) as Alert_Count by src_user,Source_Zone_Name 
| sort - Alert_Count",None
GCR - Audit - Linux Brute Force Login Failure Outputlist,1,AmwayGcrSec,"index=unix-gcr sourcetype=unix:syslog ""Failed password"" 
| rex field=message ""(?<status>\w+)\s+(?<type>\w+)\s+for\s+(?<duser>\w+)\s+from\s+(?<src_ip>\d+\.\d+\.\d+\.\d+).*"" 
| foreach * 
    [ rex field=status mode=sed ""s/Failed/failedbefore/g""] 
| search NOT duser=cyblogon NOT `GCR_List_IP_VAScanner(src_ip)`NOT `GCR_List_IP_LinuxLoginFailed_Exception(src_ip)` 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(duser) as duser values(dest_ip) as dest_ip values(type) as type values(message) as message count by src_ip, status 
| where count >4 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - Linux Brute Force Login Failure Outputlist"" 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| lookup servercidrlookup ip as src_ip output name as src_asset_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| table time src_ip src_ip_zone src_asset_name type duser status dest_ip dest_ip_zone dest_asset_name message 
| collect index=""output-gcr"" sourcetype=""gcr_linux_alert_outputlist""",1110
GCR - Audit - Linux Brute Force Login Success(10/5),1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_linux_alert_outputlist"" Alert_name=""GCR - Audit - Linux Brute Force Login Failure Outputlist"" 
| append 
    [ search 
        index=unix-gcr sourcetype=unix:syslog ""Accepted password"" 
    | rex field=message ""(?<status>\w+)\s+(?<type>\w+)\s+for\s+(?<duser>\w+)\s+from\s+(?<src_ip>\d+\.\d+\.\d+\.\d+).*"" 
    | foreach * 
        [ rex field=status mode=sed ""s/Accepted/success/g""] 
    | fields + duser host src_ip status dest_ip type message 
    | search NOT duser=cyblogon NOT `GCR_List_IP_VAScanner(src_ip)` NOT `GCR_List_IP_LinuxLoginFailed_Exception(src_ip)` ] 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats  values(time) as time values(duser) as duser values(dest_ip) as dest_ip values(type) as type values(message) as message values(status) as status dc(status) as dc count by src_ip 
| where dc=2 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| lookup servercidrlookup ip as src_ip output name as src_asset_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - Linux Brute Force Login Success(10/5)"" 
| table time src_ip src_asset_name src_ip_zone duser status type dest_ip dest_ip_zone dest_asset_name message 
| collect index=""output-gcr"" sourcetype=""gcr_linux_alert_outputlist""",None
GCR - Audit - Linux Executable File Changed,1,AmwayGcrSec,"index=unix-gcr type=""SYSCALL"" key=""dir_bin_all_wa""
| eval audit_time = strftime(_time,""%F %H:%M:%S"") 
| rename _time as audit_timestamp 
| rename message as audit_message 
| rename comm as audit_comm 
| table time host euid exe audit_comm key audit_message audit_time audit_timestamp 
| join type=inner host 
    [ search index=unix-gcr ""pts/"" user!=""""  user!=""hybris"" 
    | eval his_time = strftime(_time,""%F %H:%M:%S"") 
    | rename _time as history_timestamp 
    | rename message as his_message 
    | rename command as his_command 
    | table his_time host user his_command his_message history_timestamp ] 
| eval time_gap = audit_timestamp-history_timestamp 
| where -10< time_gap and time_gap< 10 
| table audit_time host user euid exe key audit_comm his_command  his_message audit_message
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",Many
GCR - Audit - Linux OS Log Tamper Activity,1,AmwayGcrSec,"index=unix-gcr sourcetype=unix:syslog type=""SYSCALL"" (key=""log_var_*_wa"" OR key=""dir_var_audit_wa"") 
| eval audit_time = strftime(_time,""%F %H:%M:%S"") 
| rename _time as audit_timestamp 
| rename message as audit_message 
| rename comm as audit_comm 
| table time host euid exe audit_comm key audit_message audit_time audit_timestamp 
| join type=inner host 
    [ search index=unix-gcr ""pts/"" user!="""" user!=""hybris"" 
    | eval his_time = strftime(_time,""%F %H:%M:%S"") 
    | rename _time as history_timestamp 
    | rename message as his_message 
    | rename command as his_command 
    | table his_time host user his_command his_message history_timestamp ] 
| eval time_gap = audit_timestamp-history_timestamp 
| where -10< time_gap and time_gap< 10 
| table audit_time host user euid exe key audit_comm his_command  his_message audit_message
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",Unknown
GCR - Audit - Linux Privilege Escalation Activity,1,AmwayGcrSec,"index=unix-gcr type=""SYSCALL"" (key=""conf_etc_sudoer_wa"" OR key=""conf_etc_group_wa"" OR key=""conf_etc_passwd_wa"" OR key=""conf_etc_gshadow_wa"" OR key=""conf_etc_shadow_wa"" ) 
| eval audit_time = strftime(_time,""%F %H:%M:%S"") 
| rename _time as audit_timestamp 
| rename message as audit_message 
| rename comm as audit_comm 
| table time host euid exe audit_comm key audit_message audit_time audit_timestamp 
| join type=inner host 
    [ search index=unix-gcr ""pts/"" user!=""""  user!=""hybris"" 
    | eval his_time = strftime(_time,""%F %H:%M:%S"") 
    | rename _time as history_timestamp 
    | rename message as his_message 
    | rename command as his_command 
    | table his_time host user his_command his_message history_timestamp ] 
| eval time_gap = audit_timestamp-history_timestamp 
| where -10< time_gap and time_gap< 10 
| table audit_time host user euid exe key audit_comm his_command  his_message audit_message
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",Many
GCR - Audit - Linux Server Continual Login to Other Servers Successfully(2/60),1,AmwayGcrSec,"index=unix-gcr sourcetype=unix:syslog eventtype=sshd_authentication ""Accepted password"" OR ""Accepted publickey"" 
| rex field=message ""(?<status>\w+)\s+(?<type>\w+)\s+for\s+(?<duser>\w+)\s+from\s+(?<first_src_ip>\d+\.\d+\.\d+\.\d+).*"" 
| search `GCR_List_Segment_ServerFarm(first_src_ip)` 
| fields + duser host first_src_ip dest_ip status type 
| rename dest_ip as first_target_ip 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time count by first_src_ip,duser, first_target_ip , status, type 
| lookup servercidrlookup ip as first_target_ip output name as first_target_name 
| lookup servercidrlookup ip as first_src_ip output name as first_src_asset_name 
| lookup networkcidrlookup ip as first_src_ip output name as first_src_ip_zone 
| lookup networkcidrlookup ip as first_target_ip output name as first_target_zone 
| join type=inner first_target_ip 
    [ search index=unix-gcr sourcetype=unix:syslog ""Accepted password"" 
    | rex field=message ""(?<status>\w+)\s+(?<type>\w+)\s+for\s+(?<duser>\w+)\s+from\s+(?<first_target_ip>\d+\.\d+\.\d+\.\d+).*"" 
    | fields + duser host first_target_ip dest_ip status type 
    | rename dest_ip as second_target_ip 
    | eval time = strftime(_time,""%F %H:%M:%S"") 
    | stats values(time) as time count by first_target_ip,second_target_ip,duser, status, type 
    | lookup servercidrlookup ip as second_target_ip output name as second_target_asset_name 
    | lookup servercidrlookup ip as first_target_ip output name as first_target_asset_name 
    | lookup networkcidrlookup ip as first_target_ip output name as first_target_ip_zone 
    | lookup networkcidrlookup ip as second_target_ip output name as second_target_ip_zone ] 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - Linux Continual Login Two Server Success"" 
| where first_src_ip!=first_target_ip 
| table time first_src_ip first_src_ip_zone first_src_asset_name status type first_target_ip first_target_name first_target_zone second_target_ip second_target_asset_name second_target_ip_zone 
| collect index=""output-gcr"" sourcetype=""gcr_linux_alert_outputlist""",Many
GCR - Audit - Linux Server Login to Other Servers Successfully(2/60),1,AmwayGcrSec,"index=unix-gcr sourcetype=unix:syslog eventtype=sshd_authentication ""Accepted password"" OR ""Accepted publickey"" 
| rex field=message ""(?<status>\w+)\s+(?<type>\w+)\s+for\s+(?<duser>\w+)\s+from\s+(?<src_ip>\d+\.\d+\.\d+\.\d+).*"" 
| foreach * 
    [ rex field=status mode=sed ""s/Accepted/Success/g""] 
| search NOT duser=cyblogon NOT `GCR_List_IP_VAScanner(src_ip)` NOT `GCR_List_IP_LinuxLoginFailed_Exception(src_ip)` NOT `GCR_List_Segment_PIM(src_ip)` NOT `ACCL_List_Segment_VDI(src_ip)` NOT `GCR_List_IP_LinuxLogin_Exception(src_ip)` AND `GCR_List_Segment_ServerFarm(src_ip)` 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| eventstats  values(status) as status values(duser) as duser values(dest_ip) as dest_ip values(type) as type values(message) as message dc(dest_ip) as dc count by src_ip, time
| where dc >1 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - Linux Server Login to Other Servers Successfully(2/60)"" 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| lookup servercidrlookup ip as src_ip output name as src_asset_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| table time  duser type status src_ip src_asset_name src_ip_zone  dest_ip dest_asset_name dest_ip_zone message 
| collect index=""output-gcr"" sourcetype=""gcr_linux_alert_outputlist""",many
GCR - Audit - Linux Suspicious Activity Trigger Threshold,1,AmwayGcrSec,"|from datamodel:""Risk.All_Risk""|search source=""GCR - Audit - *Linux*""
|stats values(command) as command values(risk_object_type) as risk_object_type values(src_ip) as src_ip sum(calculated_risk_score) as risk_score_sum values(risk_score) as basic_score count(source) as risk_count min(_time) as _time by risk_object user
|where risk_score_sum > 50
|eval severity=case(risk_score_sum<20,""low"",
    risk_score_sum<50,""medium"",
    risk_score_sum<80,""high"",
    risk_score_sum>=100,""critical"")
|eval targethost = risk_object
|table _time targethost src_ip user severity command risk_score_sum risk_count
| collect index=""output-gcr"" sourcetype=""gcr_linux_alert_outputlist""",None
GCR - Audit - Linux Suspicious Activity Trigger Threshold Outputlist,1,AmwayGcrSec,"|from datamodel:""Risk.All_Risk""|search source=""GCR - Audit - *Linux*""
|stats values(command) as command values(risk_object_type) as risk_object_type values(src_ip) as src_ip sum(calculated_risk_score) as risk_score_sum values(risk_score) as basic_score count(source) as risk_count min(_time) as _time by risk_object user
|eval severity=case(risk_score_sum<20,""low"",
    risk_score_sum<50,""medium"",
    risk_score_sum<80,""high"",
    risk_score_sum>=100,""critical"")
|eval targethost = risk_object
|table _time targethost src_ip user severity command risk_score_sum risk_count
| collect index=""output-gcr"" sourcetype=""gcr_linux_alert_outputlist""",None
GCR - Audit - Linux System Login Failure Reached Five Times OutputList,1,AmwayGcrSec,"index=unix-gcr sourcetype=unix:syslog ""*Failed password*""
| rex field=message ""(?<duser>\w+)\s+from\s+(?<src_ip>\d+\.\d+\.\d+\.\d+).*"" 
| table _time dest_ip duser dhost src_ip message 
| search 
    duser!=cyblogon
    NOT `GCR_List_IP_VAScanner(src_ip)` 
    NOT `GCR_List_IP_LinuxLoginFailed_Exception(src_ip)` 
| eventstats count as eventcount by src_ip,dest_ip,duser 
| where eventcount>=5 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - Linux System Login Failure Reached Five Times"" 
| lookup servercidrlookup  ip as dest_ip output name as dest_asset_name 
| lookup servercidrlookup  ip as src_ip output name as src_asset_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",some
GCR - Audit - Linux System Login Failure Reached Five Times(5/3),1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" Alert_name=""GCR - Audit - Linux System Login Failure Reached Five Times"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| where alert_count=1 
| where d_time<=181 | lookup servercidrlookup  ip as dest_ip output name as dest_asset_name 
| table _time src_ip src_asset_name src_ip_zone dest_ip dest_ip_zone dest_asset_name dhost duser  message",None
GCR - Audit - NPS Wireless Authentication Failure Weelkly Report,1,AmwayGcrSec,"index=radius EventCode=6273  `ACCL_List_Segment(Client_IP_Address)`  Fully_Qualified_Account_Name!=*$
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(Authentication_Type) as Authentication_Type values(Called_Station_Identifier) as Called_Station_Identifier values(Fully_Qualified_Account_Name) as Fully_Qualified_Account_Name values(member_dn) as member_dn values(member_id) as member_id values(NAS_IPv4_Address) as NAS_IPv4_Address values(Network_Policy_Name) as Network_Policy_Name values(Security_ID) as Security_ID values(src_user) as src_user dc(src_user) as dc count by Client_IP_Address 
| where dc>3 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - NPS Wireless Authentication Failure(5/15)"" 
| table  Client_IP_Address src_user Fully_Qualified_Account_Name member_id member_dn Authentication_Type NAS_IPv4_Address Network_Policy_Name Security_ID
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",None
GCR - Audit - Office 365 Bruteforce Source IP,1,AmwayGcrSec,"index=""output-gcr""  Alert_name=""GCR - Audit - Suspicious Office 365 Login"" 
| stats count values(MailboxOwnerUPN) as MailboxOwnerUPN values(ClientInfoString) as ClientInfoStrings  values(Different_MailboxOwnerUPN_Counts) as Different_MailboxOwnerUPN_Counts_time by ClientIP
| where count > 5
| eval Trigger_Time=strftime(now(),""%F %T"")",some
GCR - Audit - Okta Account Sharing Behaviour Details Monthly Report,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" search_name=""GCR - Audit -Okta Account sharing behaviour detection - low"" 
| table src_user count src time Country City displayMessage  action alternateId",some
GCR - Audit - Okta Account Sharing Behaviour Statistics Monthly Report,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" search_name=""GCR - Audit -Okta Account sharing behaviour detection - low"" 
| stats values(action) as action values(alternateId) as alternateId dc(src_user) AS count by src_user 
| where count>5 
| table src_user count alternateId action",None
GCR - Audit - PIM Account Added Into Privilege Group,1,AmwayGcrSec,"index=pim-gcr sourcetype=pim:syslog act=""Add"" field6=""Add Group Member"" (cs1=""REQ_ACCL_SVR"" OR cs1=""APPR_ACCL_SVR"" OR cs1=""PIM_LocalAdmin"" OR cs1=""REQ_ACCL_DBM"" OR cs1=""APPR_ACCL_DBM"") 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(cs1) as group values(cs5) as TargetUserName values(duser) as duser values(src) as src values(field8) as description 
| eval Alert_name=""GCR - Audit - PIM Account Added Into Privilege Group"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table time src duser TargetUserName group description 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",some
GCR - Audit - PIM Login Failure Multiple Times(5/5),1,AmwayGcrSec,"index=pim-gcr sourcetype=pim:syslog act=""User Authentication"" status=""4"" 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(cs1) as group values(dvc) as dvc values(dvc_asset) as dvc_asset values(dvc_asset_tag) as dvc_asset_tag values(field8) as description values(suser) as suser count by shost 
| where count > 4 
| table time shost suser dvc dvc_asset dvc_asset_tag description dvc_asset_tag 
| eval Alert_name=""GCR - Audit - PIM Login Failure Multiple Times(5/5)"" 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",some
GCR - Audit - Suspicious Office 365 Login,1,AmwayGcrSec,"index=""azure"" Operation=MailboxLogin sourcetype=""o365:management:activity"" NOT WHOIS=Amway 
    AND (ClientInfoString!=""Client=POP3/IMAP4;Protocol=IMAP4"" AND  ClientInfoString!=""Client=POP3/IMAP4;Protocol=POP3"")
    AND MailboxOwnerUPN!=""USP*""    
| regex ClientInfoString!=""Exchange"" 
| rex field=ClientIP ""(?<Client>\d+\.\d+\.\d+)""\.\d+ 
| lookup Global_Internet_SubNet_List.csv Client OUTPUT WHOIS 
| fillnull value=NULL WHOIS 
| where WHOIS!=""Amway"" 
| lookup Global_Internet_IP_List.csv Client as ClientIP  OUTPUT WHOIS 
| fillnull value=NULL WHOIS 
| where WHOIS!=""Amway"" 
| eventstats dc(MailboxOwnerUPN) as Different_MailboxOwnerUPN_Counts by ClientIP,ClientInfoString 
| where Different_MailboxOwnerUPN_Counts>3 
| table _time,ClientIP,MailboxOwnerUPN,ClientInfoString,Different_MailboxOwnerUPN_Counts 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - Suspicious Office 365 Login"" 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" 
| fields - Alert_name Trigger_Time",many
GCR - Audit - VDI  Login Failure Multiple Times(5/5),1,AmwayGcrSec,"index=vmware-vdi sourcetype=syslog Module=Broker eventtype=vm_vdi_authentication EventType=BROKER_USER_AUTHFAILED_BAD_USER_PASSWORD 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| eventstats  values(UserDisplayName) as UserDisplayName values(dest) as dest count by ClientIpAddress 
| where count >4 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - VDI Login Failure Multiple Times(5/5)"" 
| stats  values(EventType) as EventType  values(host) as host  values(hostname) as hostname values(dest) as dest values(src_country) as src_country values(src_city) as src_city values(dest_city) as dest_city count by ClientIpAddress ,time, UserDisplayName
| table time  ClientIpAddress UserDisplayName src_country src_city EventType host hostname dest dest_city 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",many
GCR - Audit - VP Account Login From Non VP Computers_Alert -For Test,1,AmwayGcrSec,"index=domain signature_id=4624
    AND `GCR_List_Account_VP(Account_Name)`  Workstation_Name!=""-"" 
| rename Source_Network_Address as IP_Address 
| lookup GCR_DHCP_OutputList.csv IP_Address output Host_Name Date Time|eval dhcp_time=round(strptime((Date+"" ""+Time),""%m/%d/%y %H:%M:%S""),0)
| rex field=Host_Name ""(?<computername>\w+)\.*?"" 
| search
    computername!=""*AD*""
    AND computername!=""cnwsvr*""
    AND computername!=""DC0""
    AND computername!=""*ACCLFTP*""
    AND computername!=""cncucm*""
    AND computername!=""cncucm*""
    AND IP_Address!=""10.140.8.*""
    AND IP_Address!=""10.140.212.*"" 
    AND computername!=""cnnt024*""
    AND computername!=""scsvr211""
    AND computername!=""cnnt130*""
    AND computername!=""cnnt023*""
    AND computername!=""cnnt131*""
    AND computername!=""cnnt034*""
    AND computername!=""-"" 
    AND Host_Name!=""*intranet.local"" 
| eval computername=lower(computername)  | eval ad_time=strftime(_time,""%s"") 
| table ad_time dhcp_time EventCode Host_Name computername user user_identity |eval abs_time=tonumber(dhcp_time-ad_time)|where abs_time>0 AND abs_time<=3600
| lookup VP_computers.csv computername output Status 
| fillnull value=aa Status 
| search Status=aa 
| table ad_time dhcp_time abs_time EventCode Host_Name user user_identity 
| rename Host_Name as Souce_ComputerName,user as Login_Account 
| dedup Souce_ComputerName 
| lookup VP_name.csv AD as Login_Account output AREA",some
GCR - Audit - VP Account Login From Non VP Computers_Alert to BOA,1,AmwayGcrSec,"index=domain signature_id=4624
    AND `GCR_List_Account_VP(Account_Name)` Workstation_Name!=""-"" 
| rename Source_Network_Address as IP_Address 
| lookup GCR_DHCP_OutputList.csv IP_Address output Host_Name 
| rex field=Host_Name ""(?<computername>\w+)\.*?"" 
| search
    computername!=""*AD*""
    AND computername!=""cnwsvr*""
    AND computername!=""DC0""
    AND computername!=""*ACCLFTP*""
    AND computername!=""cncucm*""
    AND computername!=""cncucm*""
    AND IP_Address!=""10.140.8.*""
    AND IP_Address!=""10.140.212.*"" 
    AND computername!=""cnnt024*""
    AND computername!=""scsvr211""
    AND computername!=""cnnt130*""
    AND computername!=""cnnt023*""
    AND computername!=""cnnt131*""
    AND computername!=""cnnt034*""
    AND computername!=""-"" 
    AND Host_Name!=""*intranet.local"" 
| eval computername=lower(computername) 
| table _time EventCode Host_Name computername user user_identity 
| lookup VP_computers.csv computername output Status 
| fillnull value=aa Status 
| search Status=aa 
| table _time EventCode Host_Name user user_identity 
| rename Host_Name as Souce_ComputerName,user as Login_Account 
| dedup Souce_ComputerName 
| lookup VP_name.csv AD as Login_Account output AREA 
| search AREA=""*BOA*"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - VP Account Login From Non VP Computers_Alert to BOA""
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" 
| fields - Alert_name Trigger_Time Name",some
GCR - Audit - VP Account Login From Non VP Computers_Alert to HQ,1,AmwayGcrSec,"index=domain signature_id=4624
    AND `GCR_List_Account_VP(Account_Name)`  Workstation_Name!=""-"" 
| rename Source_Network_Address as IP_Address 
| lookup GCR_DHCP_OutputList.csv IP_Address output Host_Name 
| rex field=Host_Name ""(?<computername>\w+)\.*?"" 
| search
    computername!=""*AD*""
    AND computername!=""cnwsvr*""
    AND computername!=""DC0""
    AND computername!=""*ACCLFTP*""
    AND computername!=""cncucm*""
    AND computername!=""cncucm*""
    AND IP_Address!=""10.140.8.*""
    AND IP_Address!=""10.140.212.*"" 
    AND computername!=""cnnt024*""
    AND computername!=""scsvr211""
    AND computername!=""cnnt130*""
    AND computername!=""cnnt023*""
    AND computername!=""cnnt131*""
    AND computername!=""cnnt034*""
    AND computername!=""-"" 
    AND Host_Name!=""*intranet.local"" 
| eval computername=lower(computername) 
| table _time EventCode Host_Name computername user user_identity 
| lookup VP_computers.csv computername output Status 
| fillnull value=aa Status 
| search Status=aa 
| table _time EventCode Host_Name user user_identity 
| rename Host_Name as Souce_ComputerName,user as Login_Account 
| dedup Souce_ComputerName 
| lookup VP_name.csv AD as Login_Account output AREA 
| search AREA=""*HQ*"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - VP Account Login From Non VP Computers_Alert to HQ"" 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" 
| fields - Alert_name Trigger_Time Name",some
GCR - Audit - VP Account Login From Non VP Computers_Alert to NC,1,AmwayGcrSec,"index=domain signature_id=4624
    AND `GCR_List_Account_VP(Account_Name)`  Workstation_Name!=""-"" 
| rename Source_Network_Address as IP_Address 
| lookup GCR_DHCP_OutputList.csv IP_Address output Host_Name 
| rex field=Host_Name ""(?<computername>\w+)\.*?"" 
| search
    computername!=""*AD*""
    AND computername!=""cnwsvr*""
    AND computername!=""DC0""
    AND computername!=""*ACCLFTP*""
    AND computername!=""cncucm*""
    AND computername!=""cncucm*""
    AND IP_Address!=""10.140.8.*""
    AND IP_Address!=""10.140.212.*"" 
    AND computername!=""cnnt024*""
    AND computername!=""scsvr211""
    AND computername!=""cnnt130*""
    AND computername!=""cnnt023*""
    AND computername!=""cnnt131*""
    AND computername!=""cnnt034*""
    AND computername!=""-"" 
    AND Host_Name!=""*intranet.local"" 
| eval computername=lower(computername) 
| table _time EventCode Host_Name computername user user_identity 
| lookup VP_computers.csv computername output Status 
| fillnull value=aa Status 
| search Status=aa 
| table _time EventCode Host_Name user user_identity 
| rename Host_Name as Souce_ComputerName,user as Login_Account 
| dedup Souce_ComputerName 
| lookup VP_name.csv AD as Login_Account output AREA 
| search AREA=""*NC*"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - VP Account Login From Non VP Computers_Alert to NC"" 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" 
| fields - Alert_name Trigger_Time Name",some
GCR - Audit - VP Account Login From Non VP Computers_Alert to SC,1,AmwayGcrSec,"index=domain signature_id=4624
    AND `GCR_List_Account_VP(Account_Name)`  Workstation_Name!=""-"" 
| rename Source_Network_Address as IP_Address 
| lookup GCR_DHCP_OutputList.csv IP_Address output Host_Name 
| rex field=Host_Name ""(?<computername>\w+)\.*?"" 
| search
    computername!=""*AD*""
    AND computername!=""cnwsvr*""
    AND computername!=""DC0""
    AND computername!=""*ACCLFTP*""
    AND computername!=""cncucm*""
    AND computername!=""cncucm*""
    AND IP_Address!=""10.140.8.*""
    AND IP_Address!=""10.140.212.*"" 
    AND computername!=""cnnt024*""
    AND computername!=""scsvr211""
    AND computername!=""cnnt130*""
    AND computername!=""cnnt023*""
    AND computername!=""cnnt131*""
    AND computername!=""cnnt034*""
    AND computername!=""-"" 
    AND Host_Name!=""*intranet.local"" 
| eval computername=lower(computername) 
| table _time EventCode Host_Name computername user user_identity 
| lookup VP_computers.csv computername output Status 
| fillnull value=aa Status 
| search Status=aa 
| table _time EventCode Host_Name user user_identity 
| rename Host_Name as Souce_ComputerName,user as Login_Account 
| dedup Souce_ComputerName 
| lookup VP_name.csv AD as Login_Account output AREA 
| search AREA=""*SC*"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - VP Account Login From Non VP Computers_Alert to SC"" 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" 
| fields - Alert_name Trigger_Time Name",some
GCR - Audit - Windows Brute Force Login Failure Outputlist,1,AmwayGcrSec,"index=windows-gcr EventCode=4625 
| search NOT `GCR_List_IP_VAScanner(Source_Network_Address)`NOT `GCR_List_IP_WindowsLoginFailed_Exception(Source_Network_Address)` Source_Network_Address!=""-""
| eval Login_Result=EventCode 
| foreach * 
    [ rex field=Login_Result mode=sed ""s/4625/failed/g""] 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(ComputerName) as ComputerName values(Account_Name) as Account_Name values(Message) as Message values(dvc) as dvc values(name) as name count by Source_Network_Address, EventCode, Login_Result 
| where count > 5 
| stats values(time) as time  values(dvc) as dvc values(name) as name count by Source_Network_Address,ComputerName,Account_Name ,EventCode,Login_Result ,Message
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - Windows Brute Force Login Failure Outputlist"" 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| lookup servercidrlookup ip as Source_Network_Address output name as src_asset_name 
| lookup networkcidrlookup ip as Source_Network_Address output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| table time Source_Network_Address src_asset_name src_ip_zone EventCode Login_Result  dest_ip dest_ip_zone Account_Name ComputerName dvc name Message 
| collect index=""output-gcr"" sourcetype=""gcr_windows_alert_outputlist""",None
GCR - Audit - Windows OS Log Deletion,1,AmwayGcrSec,"index=windows-gcr EventCode=1102 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - Windows OS Log Deletion"" 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| lookup servercidrlookup ip as host output name as dest_asset_name 
| lookup networkcidrlookup ip as host output name as dest_ip_zone 
| table time EventCode host Account_Name ComputerName dest_ip_zone dest_asset_name 
| collect index=""output-gcr"" sourcetype=""gcr_windows_alert_outputlist""",None
GCR - Audit - Windows Server Login to Other Servers Successfully(2/60),1,AmwayGcrSec,"index=windows-gcr EventCode=4624 
| search NOT `GCR_List_IP_VAScanner(Source_Network_Address)`NOT `GCR_List_IP_WindowsLoginFailed_Exception(Source_Network_Address)` NOT `GCR_List_Segment_PIM(Source_Network_Address)` NOT `ACCL_List_Segment_VDI(src_ip)` NOT `GCR_List_IP_WindowsLogin_Exception(Source_Network_Address)` AND `GCR_List_Segment_ServerFarm(Source_Network_Address)` 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(ComputerName) as ComputerName dc(ComputerName) as dc values(Account_Name) as Account_Name values(Message) as Message values(dvc) as dvc values(name) as name count by Source_Network_Address, EventCode 
| where dc > 1 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - Audit - Windows RDP Login More than Two Servers Success"" 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| lookup servercidrlookup ip as Source_Network_Address output name as src_asset_name 
| lookup networkcidrlookup ip as Source_Network_Address output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| table time Account_Name EventCode Source_Network_Address src_asset_name src_ip_zone  dest_ip   ComputerName  name Message
| collect index=""output-gcr"" sourcetype=""gcr_windows_alert_outputlist""",some
GCR - Audit -Okta Account sharing behaviour detection - low,1,AmwayGcrSec,"index=okta-corp outcome.result=SUCCESS earliest=-15m@m latest=now 
| iplocation src_ip 
| stats values(target{}.alternateId) as  alternateId values(action) as action  values(src_ip) AS src values(published) as time values(Country) AS Country values(City) AS City values(displayMessage) AS displayMessage dc(src) AS count by src_user 
| where count>1 
| rex field=src_ip ""(?<Client>\d+\.\d+\.\d+\.\d+)"" 
| lookup Global_Internet_SubNet_List.csv Client as ClientIP 
| lookup Global_Internet_IP_List.csv Client as ClientIP 
| lookup GCR_Internet_IP_List.csv CIDR as ClientIP 
| search NOT src IN(NULL,ClientIP) src_user=CN* OR src_user=HK* OR src_user=TW* 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",some
GCR - Audti - Imperva  Logon Report,1,AmwayGcrSec,"index=imperva sourcetype=""imperva:report"" source=""/opt/soft/ImpervaReport/Monthly_Login*""
    NOT `ACCL_List_IP_DbAllowOA_WhiteList(Destination IP)`
    NOT `ACCL_List_User_DBuser_WhiteList(User)`
    NOT `ACCL_List_User_DBASTRead_WhiteList(User)`
    NOT `ACCL_List_APP_WhiteList(Source Application)`
    NOT `ACCL_List_DB_WhiteList(Database)`
    NOT `ACCL_List_User_SPIIWhiteList(User)`
    NOT `ACCL_List_HostName_LogonClients_WhiteList(OS Host Names)`
    NOT `ACCL_List_OSUser_BIGDATA_DBuser_WhiteList(OS User Name)`
    AND User!=""Connected*""
    AND User!=""Hashed*""
    AND User!=""dev_read""
    AND User!=""ast_wr"" 
| table ""Time Group _ Days"" User ""OS User Name"" ""OS Host Names"" Database ""Source IP"" ""Destination IP"" ""Hits Sum"" ""Source Application"" ""Server Group"" team 
| replace ""na\*"" with ""*"" in ""OS User Name"" 
| lookup imperva_user_lookup account as ""OS User Name"" output team 
| rename ""OS User Name"" as name ,""Source IP"" as IP 
| eval team2=case(match(name,""cnt""),""vendor"",match(name,""cnv""),""vendor"",match(IP,""0.0.0.0""),""local"",match(IP,""10.140.9.""),""VPN"",match(IP,""10.143.9.""),""VPN"",match(IP,""10.140.48.""),""VDI"",match(IP,""10.140.184.""),""VDI"",match(IP,""10.140.185.""),""VDI"",match(IP,""10.143.160.""),""QA"",match(IP,""10.143.183.""),""QA"",match(IP,""10.140.208.""),""QA"",match(IP,""10.140.211.""),""QA"",match(IP,""10.140.15.""),""QA"",match(IP,""10.143.60.""),""QA"",match(IP,""10.140.60.""),""QA"",match(IP,""10.140.61.""),""QA"",match(IP,""10.143.61.""),""QA"") 
| eval Team=coalesce(team,team2) 
| fields - team team2 
| fillnull value=unknow Team 
| rename name as ""OS User Name"", IP as ""Source IP"",User as ""DB User""",None
GCR - Audti - Imperva Suspect SPII Access Report,1,AmwayGcrSec,"index=imperva sourcetype=""imperva:report"" source=""/opt/soft/ImpervaReport/Monthly_Suspect_All_SPII*""
 NOT `ACCL_List_APP_WhiteList(Source Application)`
    AND User!=""Connected*""
    AND User!=""Hashed*""
 NOT `ACCL_List_User_DBuser_WhiteList(User)`
 NOT `ACCL_List_DB_WhiteList(Database)`
 NOT `ACCL_List_OSUser_BIGDATA_DBuser_WhiteList(OS User Name)`
    NOT ( ""OS Host Names""=""cnwssca1wp101*"" ""Source IP""=""10.140.197.97"")
    NOT ( ""OS Host Names""=""cnwsgzrdcd243*"" ""Source IP""=""10.140.197.154"")
    NOT ( ""OS Host Names""=""amway_plc_serve*"" ""Source IP""=""10.140.197.241"")
    NOT ( ""OS Host Names""=""cnwsgzrdcd205*"" ""Source IP""=""10.140.197.57"")
    NOT ( ""OS Host Names""=""cnwsgzrdcd029*"" ""Source IP""=""10.140.197.87"")
    NOT ( ""OS Host Names""=""1-pc*"" ""Source IP""=""10.140.197.51"")
    NOT ( ""OS Host Names""=""workgroup\\1-pc*"" ""Source IP""=""10.140.197.51"")
    ( ""Source IP""!=10.140.16.* AND ""Source IP""!=10.140.17.* AND ""Source IP""!=10.140.18.* AND ""Source IP""!=10.140.19.* AND ""Source IP""!=10.140.20.* AND ""Source IP""!=10.140.21.* AND ""Source IP""!=10.140.22.* AND ""Source IP""!=10.140.23.* AND ""Source IP""!=10.140.24.* AND ""Source IP""!=10.140.25.* AND ""Source IP""!=10.140.26.* AND ""Source IP""!=10.140.27.* AND ""Source IP""!=10.140.28.* AND ""Source IP""!=10.140.29.* AND ""Source IP""!=10.140.30.* AND ""Source IP""!=10.140.31.* AND ""Source IP""!=10.140.32.* AND ""Source IP""!=10.140.33.* AND ""Source IP""!=10.140.34.* AND ""Source IP""!=10.140.35.* AND ""Source IP""!=10.140.36.* AND ""Source IP""!=10.140.37.* AND ""Source IP""!=10.140.38.* AND ""Source IP""!=10.140.39.* AND ""Source IP""!=10.140.40.* AND ""Source IP""!=10.140.41.* AND ""Source IP""!=10.140.42.* AND ""Source IP""!=10.140.43.* AND ""Source IP""!=10.140.44.* AND ""Source IP""!=10.140.45.* AND ""Source IP""!=10.140.46.* AND ""Source IP""!=10.140.47.* AND ""Source IP""!=10.140.49.* AND ""Source IP""!=10.140.50.* AND ""Source IP""!=10.140.51.* AND ""Source IP""!=10.140.52.* AND ""Source IP""!=10.140.53.* AND ""Source IP""!=10.140.54.* AND ""Source IP""!=10.140.55.* AND ""Source IP""!=10.140.56.* AND ""Source IP""!=10.140.57.* AND ""Source IP""!=10.140.58.* AND ""Source IP""!=10.140.59.* AND ""Source IP""!=10.140.60.* ) 
    ( ""Source IP""!=10.143.16.* AND ""Source IP""!=10.143.17.* AND ""Source IP""!=10.143.18.* AND ""Source IP""!=10.143.19.* AND ""Source IP""!=10.143.20.* AND ""Source IP""!=10.143.21.* AND ""Source IP""!=10.143.22.* AND ""Source IP""!=10.143.23.* AND ""Source IP""!=10.143.24.* AND ""Source IP""!=10.143.25.* AND ""Source IP""!=10.143.26.* AND ""Source IP""!=10.143.27.* AND ""Source IP""!=10.143.28.* AND ""Source IP""!=10.143.29.* AND ""Source IP""!=10.143.30.* AND ""Source IP""!=10.143.31.* AND ""Source IP""!=10.143.32.* AND ""Source IP""!=10.143.33.* AND ""Source IP""!=10.143.34.* AND ""Source IP""!=10.143.35.* AND ""Source IP""!=10.143.36.* AND ""Source IP""!=10.143.37.* AND ""Source IP""!=10.143.38.* AND ""Source IP""!=10.143.39.* AND ""Source IP""!=10.143.40.* AND ""Source IP""!=10.143.41.* AND ""Source IP""!=10.143.42.* AND ""Source IP""!=10.143.43.* AND ""Source IP""!=10.143.44.* AND ""Source IP""!=10.143.45.* AND ""Source IP""!=10.143.46.* AND ""Source IP""!=10.143.47.* AND ""Source IP""!=10.143.48.* AND ""Source IP""!=10.143.49.* AND ""Source IP""!=10.143.50.* AND ""Source IP""!=10.143.51.* AND ""Source IP""!=10.143.52.* AND ""Source IP""!=10.143.53.* AND ""Source IP""!=10.143.54.* AND ""Source IP""!=10.143.55.* AND ""Source IP""!=10.143.56.* AND ""Source IP""!=10.143.57.* AND ""Source IP""!=10.143.58.* AND ""Source IP""!=10.143.59.* AND ""Source IP""!=10.143.60.* ) 
    ( ""Source IP""!=10.140.228.* AND ""Source IP""!=10.140.229.* AND ""Source IP""!=10.140.230.* AND ""Source IP""!=10.140.231.* AND ""Source IP""!=10.140.232.* AND ""Source IP""!=10.140.233.* AND ""Source IP""!=10.140.234.* AND ""Source IP""!=10.140.235.* AND ""Source IP""!=10.140.236.* AND ""Source IP""!=10.140.237.* AND ""Source IP""!=10.140.238.* AND ""Source IP""!=10.140.239.* )
    ( ""Source IP""!=10.143.228.* AND ""Source IP""!=10.143.229.* AND ""Source IP""!=10.143.230.* AND ""Source IP""!=10.143.231.* AND ""Source IP""!=10.143.232.* AND ""Source IP""!=10.143.233.* AND ""Source IP""!=10.143.234.* AND ""Source IP""!=10.143.235.* AND ""Source IP""!=10.143.236.* AND ""Source IP""!=10.143.237.* AND ""Source IP""!=10.143.238.* AND ""Source IP""!=10.143.239.* ) 
    (""Source IP""!=""0.0.0.0"")
| table User  team  ""OS User Name"" ""Policy"" ""OS Host Names"" Database Object ""Destination IP"" ""Hits Sum"" ""Source Application"" ""Source IP"" Operation 
| lookup imperva_user_lookup account as ""User"" 
| fillnull value=unknow team 
| where team!=""AST"" 
| fields - computername team username",None
GCR - AWS - CloudTrail Granting Account Privilege Weekly Report,1,AmwayGcrSec,"index=aws-kinesis sourcetype=""aws:cloudtrail"" change_type=IAM errorCode=""success"" 
| rename requestParameters.policyDocument as policyDocument 
| where LIKE(policyDocument,""%\""*\""%"")  
| rename eventTime as time 
| table time recipientAccountId region action command eventType user_arn user_id policyDocument
| collect index=""output-gcr"" sourcetype=""gcr_aws_alert_outputlist""",None
GCR - AWS - WAF Blocked Source IP Hourly OutputList,1,AmwayGcrSec,"index=aws-waf action=block 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time  values(dest) as dest values(httpRequest.country) as countrys values(url) as urls values(rule) as rule values(ruleGroupList{}.terminatingRule.action) as action  values(webaclId) as webaclId count by src_ip 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - AWS - WAF Blocked Source IP Hourly OutputList"" 
| table time src_ip  countrys action dest rule webaclId urls 
| collect index=""output-gcr"" sourcetype=""gcr_AWS_alert_outputlist""",
GCR - CDN - DDOS Attack Events Monthly Report,1,AmwayGcrSec,"index=cdn-gcr sourcetype=cdn_ddos_log |rex field=source "".*\_(?P<website>\S+)\.log\.gz""|stats count by date_month,website|sort - count",None
GCR - CDN - WAF Attack Events Monthly Report,1,AmwayGcrSec,"index=cdn-gcr sourcetype=cdn_waf_log |stats count by date_month,attack_type,act|addcoltotals count labelfield=Total |sort + count",None
GCR - DHCP OutputList,1,AmwayGcrSec,"index=dhcp (host=CNVS001 OR host=CNVS002 OR host=twad*) ID=10 OR ID=11  
| stats latest(Date) as Date,latest(Time) as Time ,latest(Description) as Description,latest(Host_Name) as Host_Name,latest(MAC_Address) as MAC_Address by IP_Address|sort - Date Time |dedup  Host_Name
| fillnull value=unknown Host_Name 
| outputlookup GCR_DHCP_OutputList.csv",
GCR - EmailNotification - Weekly Alert Detail Report,1,AmwayGcrSec,"index=_internal source=""/opt/splunk/var/log/splunk/scheduler.log"" app=AmwayGcrSec alert_actions=email (savedsearch_name!=*report* AND savedsearch_name!=*HealthCheck* AND savedsearch_name!=""GCR - Web*"" AND savedsearch_name!=""AmwayGCR Splunk HF Persistent Queue Size Alert"" AND savedsearch_name!=""GCR  - Web - Website Attack Rules Statistics"" AND savedsearch_name!=""GCR - Panorama Threat alert"") OR ( savedsearch_name=""GCR - Web - Maybe Successful Compromise"") 
| eval time = strftime(_time,""%F %T"")
| table time savedsearch_name alert_actions user 
| sort time
| rename savedsearch_name as Alert_Name",None
GCR - EmailNotification - Weekly Alert Detail Report_Wednesday,1,AmwayGcrSec,"index=_internal source=""/opt/splunk/var/log/splunk/scheduler.log"" app=AmwayGcrSec alert_actions=email (savedsearch_name!=*report* AND savedsearch_name!=*HealthCheck* AND savedsearch_name!=""GCR - Web*"" AND savedsearch_name!=""AmwayGCR Splunk HF Persistent Queue Size Alert"" AND savedsearch_name!=""GCR  - Web - Website Attack Rules Statistics"" AND savedsearch_name!=""GCR - Panorama Threat alert"") OR ( savedsearch_name=""GCR - Web - Maybe Successful Compromise"") 
| table _time savedsearch_name alert_actions user 
| rename savedsearch_name as Alert_Name",None
GCR - EmailNotification - Weekly Alert Summary Report,1,AmwayGcrSec,"index=_internal source=""/opt/splunk/var/log/splunk/scheduler.log"" app=AmwayGcrSec alert_actions=email (savedsearch_name!=*report* AND savedsearch_name!=*HealthCheck* AND savedsearch_name!=""GCR - Web*"" AND savedsearch_name!=""AmwayGCR Splunk HF Persistent Queue Size Alert"" AND savedsearch_name!=""GCR  - Web - Website Attack Rules Statistics"" AND savedsearch_name!=""GCR - Panorama Threat alert"") OR ( savedsearch_name=""GCR - Web - Maybe Successful Compromise"") 
| stats count by savedsearch_name 
| rename savedsearch_name as Alert_Name,count as Alert_Counts 
| sort - Alert_Counts",None
GCR - EmailNotification - Weekly Alert Summary Report_Wednesday,1,AmwayGcrSec,"index=_internal source=""/opt/splunk/var/log/splunk/scheduler.log"" app=AmwayGcrSec alert_actions=email (savedsearch_name!=*report* AND savedsearch_name!=*HealthCheck* AND savedsearch_name!=""GCR - Web*"" AND savedsearch_name!=""AmwayGCR Splunk HF Persistent Queue Size Alert"" AND savedsearch_name!=""GCR  - Web - Website Attack Rules Statistics"" AND savedsearch_name!=""GCR - Panorama Threat alert"") OR ( savedsearch_name=""GCR - Web - Maybe Successful Compromise"") 
| stats count by savedsearch_name 
| rename savedsearch_name as Alert_Name,count as Alert_Counts 
| sort - Alert_Counts",None
GCR - FW - Connections to Internet 445 Port,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList"" Alert_name=""GCR - FW - Connections to Internet 445 Port"" 
| table _time,log_subtype,region,action,app,application,src_ip,src_ip_zone,src_country,src_port,src_user,user,src_zone,dest_ip,src_ip_zone,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat",
GCR - FW - Connections to Internet 445 Port Outputlist,1,AmwayGcrSec,"`GCR_Events_FW_DC`
   ((dvc_name=GZ_DC_PAN01 OR dvc_name=GZ_DC_PAN02) OR (dvc_name=HK_PAN01 OR dvc_name=HK_PAN02) OR dvc_name=ATL* OR (dvc_name=""OFFICE""))
    AND dest_port=445 
    AND src_ip=10.* 
    (dest_ip!=10.* dest_ip!=192.168.* dest_ip!=172.16.* dest_ip!=172.17.* dest_ip!=172.18.* dest_ip!=172.19.* dest_ip!=172.20.* dest_ip!=172.21.* dest_ip!=172.22.* dest_ip!=172.23.* dest_ip!=172.24.* dest_ip!=172.25.* dest_ip!=172.26.* dest_ip!=172.27.* dest_ip!=172.28.* dest_ip!=172.29.* dest_ip!=172.30.* dest_ip!=172.31.*) 
    AND dest_ip!=169.254.*.*
    AND rule!=alipaydev
    NOT `GCR_List_IP_VAScanner(src_ip)` 
| eventstats dc(dest_ip) as EventCount by src_ip,dest_port 
| where EventCount>=3 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - Connections to Internet 445 Port"" 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_ip_zone,src_country,src_port,src_user,user,src_zone,dest_ip,src_ip_zone,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time",
GCR - FW - DMZ Firewall Events Stat.Monthly Report,1,AmwayGcrSec,"`GCR_Events_FW_DC`   ((dvc_name=GZ_DR_SDN_PAN01 OR  dvc_name=GZ_DR_SDN_PAN02 OR dvc_name=GZ_CITIC_PAN03 OR dvc_name=GZ_CITIC_PAN04 OR dvc_name=GZ_MFG_DMZ_PAN03 OR dvc_name=GZ_MFG_DMZ_PAN04 OR   dvc_name=GZ_DR_Temp_5250) OR ( (dvc_name=HK_PAN01 OR dvc_name=HK_PAN02) AND src_zone!=LAN) OR ((dvc_name=ATL_PA-01* OR dvc_name=ATL_PA-02*) src_zone!=Trust) ) src_ip!=10.* AND src_ip!=192.168.* |stats count by date_month,action,dvc_name",None
GCR - FW - DMZ Firewall Events Stat.Monthly Report-v2,1,AmwayGcrSec,"`GCR_Events_FW_DC` |stats count by date_month,action,dvc_name",None
GCR - FW - DMZ IPS Interzone Deny Traffic,1,AmwayGcrSec,"`GCR_Events_FW_DC` rule=""interzone-default"" action!=allow (dvc_name=""GZ_MFG_DMZ_IPS01"" OR dvc_name=""GZ_MFG_DMZ_IPS02"" OR dvc_name=""GZ_CITIC_PAN05"" OR dvc_name=""GZ_CITIC_PAN06"" ) 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - DMZ IPS Interzone Deny Traffic"" 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_ip_zone,src_country,src_port,src_user,user,src_zone,dest_ip,dest_ip_zone,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time",
GCR - FW - Excessive Sinkhole Hits,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan dest_ip=72.5.65.111 src_zone=fw_inside src_ip!=192.142.*
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - FW - Excessive Sinkhole Hits"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name, Trigger_Time, _time,rule, action, src_ip,src_port,src_zone,dest_ip,dest_port, dest_zone,dest_location,dvc_name,app, log_subtype
| eventstats count as EventCount by src_ip 
| where EventCount>=50 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"" , "") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time",
GCR - FW - Firewall Device Login Failure Multiple Times(5/5),1,AmwayGcrSec,"index=pan_logs AND tag=gcr_pan AND sourcetype=""pan:system"" AND event_id=""auth-fail"" NOT ""User is not in allowlist"" object=""Amway_LDAP_Profile""
| rex field=description ""failed authentication for user '(?<suser>\w+)'.*server address '(?<server_address>\d+\.\d+\.\d+\.\d+)', From: (?<src>.*)"" 
| stats count values(server_address) as server_address values(action) as action values(dvc) as dvc values(dvc_name) as dvc_name values(suser) as suser by src
| where count > 5 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - Firewall Device Login Failure Multiple Times(5/5)"" 
|table Trigger_Time src suser action dvc dvc_name  server_address
| collect index=""output-gcr"" sourcetype=""gcr_fw_alert_outputlist""",
GCR - FW - Malware Blacklist IP Connection,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList"" Alert_name=""GCR - FW - Malware Blacklist IP Connection"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| where alert_count=1 
| where d_time<=301 
| table Trigger_Time,log_subtype,region,action,app,application,rule,src_ip,src_ip_zone,src_country,src_port,user,src_zone,dest_ip,dest_ip_zone,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,severity,signature,threat IPList",
GCR - FW - Malware Blacklist IP Connection OutputList,1,AmwayGcrSec,"`GCR_Events_FW_DC` ( rule=""Block_Malware_Blacklist"" OR rule=""Block_Miner_application"" OR rule=""Block_Dynamic_List_Outbound"") src_ip=10.* NOT (src_ip=10.210.65.246 OR src_ip=10.210.65.254)  dest_zone!=""*inside*"" AND dest_zone!=""*internal*""
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - Malware Blacklist IP Connection"" 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_ip_zone,src_port,src_user,user,src_zone,dest_ip,dest_ip_zone,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList""",
GCR - FW - Network Traffic Using not Default Protocol Port Weekly Report,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_firewall_report_outputlist"" Alert_name=""GCR - FW - Network Traffic Using not Default Protocol Port Weekly Report Outputlist"" 
| table Trigger_Time src_ip src_zone src_asset_tag src_country source_city dest_ip dest_zone dest_asset_tag dest_port application src_user action rule session_end_reason dvc count",None
GCR - FW - Network Traffic Using not Default Protocol Port Weekly Report Outputlist,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan sourcetype=""pan:traffic"" NOT `ACCL_List_Device_InternetAccessGateway` action=allowed session_end_reason=tcp-fin 
|search (application=ms-rdp AND dest_port!=3389) OR (application=telnet AND dest_port!=23) OR (application=""*dns*"" AND src_port!=53 dest_port!=53) OR (application=ssh AND dest_port!=22)
| eval Trigger_Time=strftime(now(),""%F %H:%M:%S"")
| stats values(src_user) as src_user values(src_country) as src_country values(src_city) as source_city values(dest_asset_tag) as dest_asset_tag values(src_asset_tag) as src_asset_tag count by src_zone src_ip dest_zone dest_ip dest_port rule application action dvc Trigger_Time session_end_reason
| table Trigger_Time src_ip src_zone src_asset_tag src_country source_city dest_ip dest_zone dest_asset_tag dest_port application src_user action rule session_end_reason dvc count

| eval Alert_name=""GCR - FW - Network Traffic Using not Default Protocol Port Weekly Report Outputlist""
| collect index=""output-gcr"" sourcetype=""gcr_firewall_report_outputlist""",None
GCR - FW - PaloAlto Internet Access Account List Report,1,AmwayGcrSec,"`GCR_Events_FW_DC` (dvc_name=GZ_DC_PAN* OR dvc_name=*OFFICE* ) action=allow* 
    rule=pre-rule3 OR
    rule=websense-amway OR 
    rule=Amway_Vender* OR
    rule=Internet-Amway OR
    rule=""Amwaynet_internet_access_ODC"" 
| stats count by src_user
| table  src_user",None
GCR - FW - PaloAlto Internet Access Audit  Specific Access Report,1,AmwayGcrSec,"`GCR_Events_FW_DC` (dvc_name=GZ_Internet_PAN* OR dvc_name=*OFFICE* ) action=allow* rule!=Office365 
    rule=Internet-weixin OR 
    rule=Wechart_windows_app OR
    rule=Internet-qqmail OR
    rule=Internet-webmail OR 
    rule=Qq* OR
    rule=sharedisk_korea OR 
    rule=Internet-139disk OR 
    rule=Internet-163disk OR 
    rule=Internet-Sharedisk OR 
    rule=360_yunpan OR 
    rule=360_yunpan_01 OR 
    rule=Internet-baiduyun OR 
    rule=Baiduyun_app OR 
    rule=Internet-Dropbox_MKT OR 
    rule=""Weixin for_wechat_base"" OR 
    rule=Internet-tencent OR 
    rule=*AmwayVendor* OR
    rule=*VPN*
| stats count by rule src_user 
| table rule src_user",some
GCR - FW - Suspicous Port Connection from Private Cloud,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList"" Alert_name=""GCR - FW - Suspicous Port Connection from Private Cloud"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| where alert_count=1 
| where d_time<=61 
| table _time src_ip src_ip_zone src_country dvc_name src_zone dest_ip dest_ip_zone dest_zone app log_subtype rule severity action IPList",
GCR - FW - Suspicous Port Connection from Private Cloud OutputList,1,AmwayGcrSec,"`GCR_Events_FW_DC` src_ip=10.210.* OR src_ip=10.211.* (dest_port=22 OR dest_port=23) 
    (dvc_name=""GZ_DR_SDN_PAN01"" OR dvc_name=""GZ_MFG_DMZ_IPS01"" OR dvc_name=""GZ_CITIC_LAN_IPS01"" )
    NOT `ACCL_List_IP_AssetScanner(src_ip)`
    NOT `GCR_List_IP_VAScanner(src_ip)` 
| eventstats dc(dest_ip) as EventCount by src_ip,rule,dest_zone 
| where EventCount>=10 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - Suspicous Port Connection from Private Cloud"" 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_ip_zone,src_country,src_port,src_user,user,src_zone,dest_ip,dest_ip_zone,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time",
GCR - FW - Tor Traffic,1,AmwayGcrSec,"`GCR_Events_FW_DC` rule=""Blacklist_TOR"" src_ip=10.* application=tor* 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - Tor Traffic"" 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_ip_zone,src_country,src_port,src_user,user,src_zone,dest_ip,dest_ip_zone,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time",
GCR - FW - WebLogic XMLDecoder Blacklist Connection,1,AmwayGcrSec,"`GCR_Events_FW_DC` rule=""WebLogic_XMLDecoder_IP_Block"" src_ip=10.* 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - WebLogic XMLDecoder Blacklist Connection"" 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_ip_zone,src_country,src_port,src_user,user,src_zone,dest_ip,dest_ip_zone,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
 | collect index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time",
GCR - HealthCheck - Alert Error,1,AmwayGcrSec,"index=_internal (host=sh*.*splunk*.* OR host=si*.*splunk*.*) sourcetype=scheduler (log_level=""ERROR"" OR log_level=""WARN*"") NOT ss_id=;; 
| rex field=event_message ""savedsearch_id=\""(?<sid>(\w|\s|[.;_-])*)\"",?"" 
| rex field=event_message mode=sed ""s/(savedsearch_id=\""(\w|\s|[.;_-])*\"",?)//g"" 
| stats count, values(sid) as savedsearch_ids by event_message 
| table event_message, savedsearch_ids, count 
| sort - count 
| eventstats sum(count) AS total 
| eval percent = round(count / total * 100, 2)."" %"" 
| fields - total 
| rename event_message as ""Error Message"", savedsearch_ids as ""Name"", count as Count, percent as ""Percent of Total"" 
| table Name ""Error Message"" Count 
| search Name=""*AmwayGcrSec*"" ""Error Message""!=""*Max alive instance_count*""",
GCR - HealthCheck - Cloud Real Time Log Interruption,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" search_name=""GCR - HealthCheck - Cloud Real Time Log Interruption - Outputlist"" 
| stats count by index account_name distance_s log_frequency_s status account_id product 
| where count>=4",
GCR - HealthCheck - Cloud Real Time Log Interruption - Outputlist,1,AmwayGcrSec,"| inputlookup Cloud_data_source_list.csv 
| rename ""Account ID"" as account_id1 
| rex field=account_id1 ""(?<account_id0>\S+) (?<account_id>\S+)"" 
| rename Index as index SourceType as sourcetype ""Log Frequency"" as log_frequency ""Device Name"" as dvc ""account_id"" as ""event.userIdentity.accountId"" Production as product 
| search index!=dcna-gcr 
| stats min(log_frequency) as log_frequency count by index dvc ""event.userIdentity.accountId"" product 
| join type=left index ""event.userIdentity.accountId"" log_frequency user_id 
    [| search index=* event.userIdentity.accountId=* 
    | stats max(_time) as time count by index,event.userIdentity.accountId 
    | eval distance=abs(time-now()) 
    | eval log_frequency=300 
    | eval status=case(distance>log_frequency,""Abnormal"",distance>=0 AND distance<=log_frequency,""Normal"") 
    | table index distance log_frequency status event.userIdentity.accountId ] 
| rename distance as distance_s log_frequency as log_frequency_s dvc as account_name event.userIdentity.accountId as account_id 
| fillnull value=No-log status 
| fillnull value=NULL distance_s 
| search status=No-log log_frequency_s=300
| stats count by index account_name distance_s log_frequency_s status account_id product| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",
GCR - HealthCheck - Domain Log Daily Interruption,1,AmwayGcrSec,"index=vmware-vdi sourcetype=syslog tag=gcr-vdi 
| stats max(_time) as time count by index,sourcetype,tag 
| eval distance=abs(time-now()) 
| eval log_frequency=86400 
| eval status=case(distance>log_frequency,""Abnormal"",distance>=0 AND distance<=log_frequency,""Normal"") 
| rename distance as distance_s log_frequency as log_frequency_s 
| fillnull value=No-log status 
| fillnull value=NULL distance_s 
| stats count by index distance_s log_frequency_s status sourcetype tag 
| table index sourcetype tag log_frequency_s distance_s status 
| search tag=gcr-vdi status=No-log",
GCR - HealthCheck - File server collect no security logs in 24 hours,1,AmwayGcrSec,"| inputlookup gcr_filesystem_list.csv 
| table host,hostname 
| eval host=lower(host) 
| append 
    [| metadata type=hosts index=windows-gcr 
    | replace *.na.intranet.msd with * in host 
    | search (host=10.140.18.172 OR host=10.143.17.210 OR host=bjfile01 OR host=shfile01 OR host=shrdfile01 OR host=SCSVR251 OR host=scsvr255) 
    | eval host=lower(host) 
    | fields + host totalCount] 
| stats count by host 
| eval message=""该文件服务器24小时内没接收到新日志，请检查。"" 
| fields + host,message,count 
| where count<2",
GCR - HealthCheck - HF Status,1,AmwayGcrSec,"| inputlookup GCR_HF_StatusInfo_Lookup.csv 
| join type=left host 
    [ search index=""_internal"" host=cnlvs474 OR host=cnlnx074 OR host=sclnx038 OR host=cnlvs712 OR host=TWSPLUNKV01 OR host=izwz92i80199nqi9o7b16ez OR  host=izbp1j6c7vo33jbn8tblwrz OR host=TWASV02 OR host=scvs366 OR host=cnvs012 OR host=tencent-splunk-pd
    | stats count as status by host |eval host=lower(host) ]  
| fillnull value=异常 status 
| search status=异常 
| eventstats values(host) as HostList 
| eval HostList=mvjoin(HostList,"" , "")",
GCR - HealthCheck - License Usage Alert (200G),1,AmwayGcrSec,"splunk_server=* pool=* index=""_internal"" source=*license_usage.log type=Usage (h=cnlvs712 OR h=cnlvs474 OR h=CNVS055 OR h=TWSPLUNKV01 OR h=izwz92i80199nqi9o7b16ez OR h=izbp1j6c7vo33jbn8tblwrz OR idx=windows-gcr OR idx=accesslog-gcr OR idx=unix-gcr OR idx=cdn-gcr OR idx=f5-gcr OR idx=gfi-gcr) 
| stats sum(b) as Total  | eval Total=round(Total/1024/1024/1024,2)
| search Total>=200  AND  Total<=250
| replace ""*"" with ""*GB"" in Total",
GCR - HealthCheck - License Usage Alert (250G),1,AmwayGcrSec,"splunk_server=* pool=* index=""_internal"" source=*license_usage.log type=Usage (h=cnlvs712 OR h=cnlvs474 OR h=CNVS055 OR h=TWSPLUNKV01 OR h=izwz92i80199nqi9o7b16ez OR h=izbp1j6c7vo33jbn8tblwrz OR idx=windows-gcr OR idx=accesslog-gcr OR idx=unix-gcr OR idx=cdn-gcr OR idx=f5-gcr OR idx=gfi-gcr) 
| stats sum(b) as Total  | eval Total=round(Total/1024/1024/1024,2)
| search Total>250 AND Total<=300
| replace ""*"" with ""*GB"" in Total",
GCR - HealthCheck - License Usage Alert (300G),1,AmwayGcrSec,"splunk_server=* pool=* index=""_internal"" source=*license_usage.log type=Usage (h=cnlvs712 OR h=cnlvs474 OR h=CNVS055 OR h=TWSPLUNKV01 OR h=izwz92i80199nqi9o7b16ez OR h=izbp1j6c7vo33jbn8tblwrz OR idx=windows-gcr OR idx=accesslog-gcr OR idx=unix-gcr OR idx=cdn-gcr OR idx=f5-gcr OR idx=gfi-gcr)  
| stats sum(b) as Total  | eval Total=round(Total/1024/1024/1024,2)
| search Total>=300 
| replace ""*"" with ""*GB"" in Total",
GCR - HealthCheck - License Usage Daily Statistics,1,AmwayGcrSec,"splunk_server=* pool=* index=""_internal"" source=*license_usage.log type=Usage (h=cnlvs712 OR h=cnlvs474 OR h=CNVS055 OR h=TWSPLUNKV01 OR h=izwz92i80199nqi9o7b16ez OR h=izbp1j6c7vo33jbn8tblwrz OR idx=windows-gcr OR idx=accesslog-gcr OR idx=unix-gcr OR idx=cdn-gcr OR idx=f5-gcr OR idx=gfi-gcr) 
| stats sum(b) as Total  | eval Total=round(Total/1024/1024/1024,2)
| search Total>=100
| replace ""*"" with ""*GB"" in Total",
GCR - HealthCheck - Not Triggered Alert List,1,AmwayGcrSec,"index=""output-gcr"" OR (index=_internal ""+0000 INFO	sendemail:184"" sourcetype=splunk_python) search_name=*GCR* OR search_name=""Global*"" OR search_name=""ATL*"" AND search_name=""*-*"" NOT search_name IN (*Report*,*Outputlist*,*_ACCELERATE*) 
| stats count by search_name 
| rename search_name as rule_name 
| eval index=""alert"" 
| table rule_name index 
| append 
    [| rest /servicesNS/-/-/saved/searches 
    | fields title eai:acl.app eai:acl.owner cron_schedule dispatch.earliest_time dispatch.latest_time search 
    | rename title AS rule_name eai:acl.app AS App eai:acl.owner AS Owner cron_schedule AS ""Cron Schedule"" dispatch.earliest_time AS ""Dispatch Earliest Time"" dispatch.latest_time AS ""Dispatch Latest Time"" search AS ""SPL Query""
    | makemv delim="","" values(host) 
    | sort - avg(run_time) 
    | search rule_name=*GCR* OR rule_name=""Global*"" OR rule_name=""ATL*"" AND rule_name=""*-*"" NOT rule_name IN (*Report*,*Outputlist*,*_ACCELERATE*) App=""AmwayGcrSec""
    | fillnull value=null 
    | eval index=""rest"" 
    | stats count by index rule_name ] 
| stats dc(index) as number values(index) as from by rule_name 
| search number!=2 AND from=rest",
GCR - HealthCheck - OS Audit Log Interruption Weekly Report,1,AmwayGcrSec,"| inputlookup linux_audit_log_0718.csv 
| join type=left IP 
    [ search index=unix-gcr sourcetype=unix:syslog sshdID=tag_audit_log 
    | stats count as total by host 
    | rename host as IP] 
| fillnull value=0 total 
| search total=0 
| fields - total 
| append 
    [ inputlookup windows_server_list.csv 
    | dedup ComputerName
    | eval now_time=time(),a=now_time-time 
    | where 604800>a 
    | join type=left ComputerName 
        [ search index=windows-gcr SourceName=""*audit*"" 
        | stats count as lastday_total by ComputerName ] 
    | fillnull value=0 lastday_total 
    | search lastday_total=0 
    | eval earliest_time=strftime(time,""%F %T"") 
    | fields - total,lastday_total,a,now_time,time,earliest_time 
    | rename ComputerName as Name 
    | eval OS=""windows""]",some
GCR - HealthCheck - Other Log Daily Interruption,1,AmwayGcrSec,"| inputlookup other_log_list.csv 
| search NOT index IN(domain,vmware-vdi) 
| fillnull value=NULL 
| search sourcetype!=NULL 
| table index sourcetype 
| join type=left index sourcetype 
    [| search `other_loglist` 
    | stats max(_time) as time count by index,sourcetype 
    | eval distance=abs(time-now()) 
    | eval log_frequency=86400 
    | eval status=case(distance>log_frequency,""Abnormal"",distance>=0 AND distance<=log_frequency,""Normal"") 
    | table index sourcetype distance log_frequency status 
    | rename distance as distance_s log_frequency as log_frequency_s 
        ] 
| fillnull value=No-log status 
| search index=* sourcetype=* status=No-log",
GCR - HealthCheck - Other Log Daily Interruption - index,1,AmwayGcrSec,"| inputlookup other_log_list.csv 
| search NOT index IN(domain,vmware-vdi) 
| fillnull value=NULL 
| search sourcetype=NULL 
| table index  
| join type=left index  
    [| search `other_loglist` 
    | stats max(_time) as time count by index,sourcetype 
    | eval distance=abs(time-now()) 
    | eval log_frequency=86400 
    | eval status=case(distance>log_frequency,""Abnormal"",distance>=0 AND distance<=log_frequency,""Normal"") 
    | table index sourcetype distance log_frequency status 
    | rename distance as distance_s log_frequency as log_frequency_s 
        ] 
| fillnull value=No-log status 
| search index=* status=No-log",
GCR - HealthCheck - PaloAlto Daily Log Interruption,1,AmwayGcrSec,"| inputlookup PaloAlto_data_source_list.csv 
| fillnull value=* 
| rename Index as index ha_status as device_status 
| stats min(""Log Frequency"") as log_frequency count by index dvc device_status Production SourceType 
| table index dvc log_frequency device_status 
| join type=left dvc log_frequency 
    [ search index=pan_logs tag=gcr_pan dvc=* 
    | stats max(_time) as time count by index,dvc 
    | eval distance=abs(time-now()) 
    | eval log_frequency=86400 
    | eval status=case(distance>log_frequency,""Abnormal"",distance>=0 AND distance<=log_frequency,""Normal"") 
    | table index dvc distance log_frequency status ] 
| rename distance as distance_s log_frequency as log_frequency_s dvc as device_name 
| table index device_name distance_s log_frequency_s status device_status 
| fillnull value=No-log status 
| fillnull value=NULL distance_s 
| search status=No-log log_frequency_s=86400 
| sort status 
| stats count by index device_name distance_s log_frequency_s status device_status",
GCR - HealthCheck - PaloAlto Real Time Log Interruption,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist"" search_name=""GCR - HealthCheck - PaloAlto Real Time Log Interruption - Outputlist"" 
| stats values(index) as index values(distance_s) as distance_s values(log_frequency_s) as log_frequency_s values(device_status) as device_status count by device_name status |search  NOT device_status IN(""Not in use"",""passive mode"")
| where count>=4",
GCR - HealthCheck - PaloAlto Real Time Log Interruption - Outputlist,1,AmwayGcrSec,"| inputlookup PaloAlto_data_source_list.csv 
| fillnull value=* 
| rename Index as index ha_status as device_status 
| stats min(""Log Frequency"") as log_frequency count by index dvc device_status 
| table index dvc log_frequency device_status 
| join type=left dvc log_frequency 
    [ search index=pan_logs tag=gcr_pan dvc=* 
    | stats max(_time) as time count by index,dvc 
    | eval distance=abs(time-now()) 
    | eval log_frequency=300 
    | eval status=case(distance>log_frequency,""Abnormal"",distance>=0 AND distance<=log_frequency,""Normal"") 
    | table index dvc distance log_frequency status ] 
| rename distance as distance_s log_frequency as log_frequency_s dvc as device_name 
| table index device_name distance_s log_frequency_s status device_status 
| fillnull value=No-log status 
| fillnull value=NULL distance_s 
| search status=No-log log_frequency_s=300 
| stats values(index) as index values(distance_s) as distance_s values(log_frequency_s) as log_frequency_s  values(device_status) as device_status count by  device_name   status
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",
GCR - HealthCheck - Server Audit Log List,1,AmwayGcrSec,"|tstats count where (index=windows-gcr OR (index=unix-gcr sourcetype=unix:syslog)) by host,index|rename index as type|sort +host limit=0",some
GCR - HealthCheck - VDI Log Daily Interruption,1,AmwayGcrSec,"index=domain host=CN* OR host=TW* OR host=HK 
| stats max(_time) as time count by index,sourcetype,host 
| eval distance=abs(time-now()) 
| eval log_frequency=86400 
| eval status=case(distance>log_frequency,""Abnormal"",distance>=0 AND distance<=log_frequency,""Normal"") 
| rename distance as distance_s log_frequency as log_frequency_s 
| fillnull value=No-log status 
| fillnull value=NULL distance_s 
| stats count by index distance_s log_frequency_s status sourcetype host 
| table index sourcetype host log_frequency_s distance_s status 
| search 
| search status=No-log",
GCR - IPS - [Critical] Ransomware Virus Detection,1,AmwayGcrSec,"`GCR_Events_Threat_DC` vendor_product=""Palo Alto Networks Firewall"" 
    AND src_ip=10.* dest_ip!=10.140.48.114
    AND (*WanaCrypt0r_immune* 
    OR (log_subtype=vulnerability (threat_name=""Microsoft Windows SMB Remote Code Execution Vulnerability"" OR threat_id=30016 OR threat_id=36289 OR threat_id=32052)) 
    OR 
    (log_subtype=spyware (threat_id=12096 OR threat_id=12454)) 
    OR 
    (log_subtype=virus ( threat_name=*Ransom* OR threat_id=3084814 OR threat_id=3059784))) 
| eval Alert_name=""GCR - IPS - [Critical] Ransomware Virus Detection"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_hostname dest_owner dest_app_name dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_hostname src_owner src_app_name src_ip_zone src_port src_user src_zone threat log_type url user vendor_action 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList"" 
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip, dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR - IPS - [High]  WebLogic XMLDecoder Attack Detected by LAN IPS,1,AmwayGcrSec,"`GCR_Events_IPS_DC`
    AND vendor_product=""Palo Alto Networks Firewall"" 
    AND (dvc_name=""GZ_CITIC_LAN_IPS01"" OR dvc_name=""GZ_MGF_LAN_IPS01"") 
    AND threat=""*WebLogic*"" 
    NOT (src_ip=10.143.18.58 OR src_ip=10.143.181.164)
    NOT (dest_ip=10.143.179.51 OR dest_ip=10.143.179.52 OR dest_ip=10.143.169.79 OR dest_ip=10.143.169.80 OR dest_ip=10.143.174.76 OR dest_ip=10.143.174.104 OR dest_ip=10.143.174.122)
    NOT `GCR_List_IP_VAScanner(src_ip)` 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - IPS - [High] IPS - WebLogic XMLDecoder Attack Detected by LAN IPS"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist"" 
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR - IPS - [High]IPS Blocked Source IP in Threshold hour,1,AmwayGcrSec,"index=""output-gcr"" Alert_name=""GCR - IPS - IPS Blocked Source IP Hourly Outputlist"" 
| stats values(dest_ips) as dest_ips values(urls) as urls values(category) as category values(countrys) as countrys count by src_ip 
| where count > `GCR-Audit-Firewall_Suspicious_IP_threshold` 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - IPS - [High]IPS Blocked Source IP in Threshold hour"" 
| collect index=""output-gcr"" sourcetype=""gcr_ips_alert_outputlist""",
GCR - IPS - DMZ IPS Alert Amount-Report,1,AmwayGcrSec,"`GCR_Events_IPS_DC` NOT (rule!=DMZ_SPAN (dvc_name=GZ_CITIC_LAN_IPS01 OR dvc_name=GZ_MGF_LAN_IPS01 OR dvc_name=""*AEC*"" OR (dvc_name=""*OFFICE*"" AND src_zone=""LAN_Span*""))) 
| stats count by date_month,dvc_name,vendor_action 
| sort - count",None
GCR - IPS - Internal HTTP Request Brute Force Attack OutputList,1,AmwayGcrSec,"`GCR_Events_IPS`
    ( threat=""HTTP Request Brute Force Attack(40059)"" 
    AND src_ip=""10.*""
    NOT `GCR_List_Segment_ServerFarm(src_ip)` ) 
    OR ( threat=""HTTP Unauthorized Brute Force Attack(40031)"" ) 
| where src_ip!=""NULL"" 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| fillnull value=null src_ip_zone dest_ip_zone 
| search src_ip_zone!=""*test*"" AND src_ip_zone!=""*server*"" 
| eval Alert_name=""GCR - IPS - Internal HTTP Request Brute Force Attack"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name 
| eventstats count by src_ip,dest_ip 
| where count>=5 
| collect index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist""",
GCR - IPS - Internal IPS Alert Report,1,AmwayGcrSec,"`GCR_Events_IPS_DC` vendor_product=""Palo Alto Networks Firewall"" 
AND (`ACCL_List_Device_IPS_Intranet` OR `ACCL_List_Device_InternetAccessGateway`)
AND (severity!=""low"" OR threat=""NetBIOS null session(31710)"" )
AND (NOT (  `ACCL_List_IP_AD(src_ip)`  application=ms-ds-smb severity=""low"" ))
AND (src_ip!=10.143.17.184 application!=msrpc )
AND (NOT (application!=adobe-cq threat=""Apache Tomcat Windows Installer Default Account Vulnerability(34106)"" (src_ip=10.140.58.231 OR  src_ip=10.140.58.232 OR src_ip=10.140.58.233 OR src_ip=10.140.58.234)))
AND threat!=""HTTP Non RFC-Compliant Response Found(32880)"" 
AND threat!=""Suspicious HTTP Response Found(39825)"" 
| rename dvc_name as Device_Name 
| stats count as EventCount by date_month,Device_Name 
| sort - EventCount",None
GCR - IPS - Internal Scan alerted by IPS,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist"" Alert_name=""GCR - IPS - Internal Scan alerted by IPS"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| where d_time<=61 
| table _time,threat,severity,application,vendor_action,src_ip,src_country, src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR - IPS - Internal Scan alerted by IPS OutputList,1,AmwayGcrSec,"`GCR_Events_IPS_DC` vendor_product=""Palo Alto Networks Firewall"" 
    AND log_type=""THREAT""
    AND src_ip=""10.*"" 
    AND (threat=""*Scan*"" OR threat=""UNIX Portmapper Remote Information Retrieving Attempt(32796)"")
    AND (NOT (src_ip=""10.140.20.63"" OR src_ip=""10.140.20.42"" OR src_ip=""59.41.186.136"" OR src_ip=""58.248.10.105"" OR src_ip=""10.140.20.187"" OR src_ip=""172.30.27.33"" OR src_ip=""10.180.161.230"" OR src_ip=""10.143.18.187"" OR src_ip=""10.143.18.188"" OR src_ip=""10.143.18.189"" OR src_ip=""10.143.18.179"") 
    NOT (src_ip=""10.72.16.9"" OR src_ip=""10.140.17.83"" OR src_ip=""10.140.17.84"" OR src_ip=""10.143.17.104"" OR src_ip=""10.143.17.107"" OR src_ip=""10.143.172.63"") 
    NOT (src_ip=""10.140.60.67"" OR src_ip=""10.143.60.67"" OR src_ip=""10.143.60.68"" OR src_ip=""10.143.60.69"" OR src_ip=""10.143.60.70"") application!=""adobe-cq"" 
    NOT (src_dns=""cnwsgzisdl999.na.intranet.msd"" OR src_dns=""cnwsvcoa008.na.intranet.msd"" OR src_dns=""cnwsvcsp015.na.intranet.msd"")
    NOT (src_ip=10.180.66.18 AND vendor_action=drop)
    NOT `ACCL_List_Segmen_LB(src_ip)`) 
| eventstats count as EventCount by src_ip 
| where EventCount>=3 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - IPS - Internal Scan alerted by IPS"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name 
| rename src_ip as ip 
| join type=left ip threat max=0 
    [ search index=pan_logs tag=gcr_pan threat!=""(9999)"" 
    | dedup src_ip dest_ip threat 
    | table src_ip dest_ip threat 
    | rename dest_ip as ip,src_ip as dd] 
| rename ip as src_ip 
| search NOT ( dd=10.211.192.* OR dd=10.211.193.* OR dd=10.211.194.* OR dd=10.211.195.* OR dd=10.211.196.* OR dd=10.211.197.* OR dd=10.211.198.* OR dd=10.211.199.* OR dd=10.211.202.* OR dd=10.211.203.* OR dd=10.211.204.* OR dd=10.211.205.* OR dd=10.211.206.* OR dd=10.211.207.* OR dd=10.211.208.* OR dd=10.211.209.* OR dd=10.210.0.* OR dd=10.210.1.* OR dd=10.210.2.* OR dd=10.210.3.* OR dd=10.210.4.* OR dd=10.210.5.* OR dd=10.210.6.* OR dd=10.210.7.* OR dd=10.210.8.* OR dd=10.210.9.* OR dd=10.210.10.* OR dd=10.210.11.* OR dd=10.210.12.* OR dd=10.210.13.* OR dd=10.210.14.* OR dd=10.210.15.* OR dd=10.210.16.* OR dd=10.210.17.* OR dd=10.140.236.* OR dd=10.140.237.* OR dd=10.140.59.* OR dd=10.143.236.* OR dd=10.143.237.* OR dd=10.143.59.* OR dd=10.143.158.* OR dd=10.143.159.6 OR dd=10.143.159.7 OR dd=10.143.159.8 OR dd=10.143.159.9 OR dd=10.143.159.10 OR dd=10.140.22.* OR dd=10.140.55.* OR dd=10.143.55.* OR dd=10.140.239.* OR dd=10.143.239.* OR dd=10.140.245.* OR dd=10.143.245.* OR dd=10.143.246.* OR dd=10.140.248.* OR dd=10.140.249.* OR dd=10.143.248.* OR dd=10.143.249.* OR dd=10.210.213.17 OR dd=10.210.213.18 OR dd=10.210.213.19 OR dd=10.210.213.20 OR dd=10.210.213.21 OR dd=10.210.213.22 OR dd=10.210.213.23 OR dd=10.210.213.24 OR dd=10.210.213.25 OR dd=10.210.213.26 OR dd=10.210.213.27 OR dd=10.210.213.28 OR dd=10.210.213.29 OR dd=10.210.213.30 OR dd=10.140.246.* OR dd=10.143.229.* OR dd=10.143.231.* OR dd=10.140.16.6 OR dd=10.72.16.9 OR dd=10.140.17.83 OR dd=10.140.17.84 OR dd=10.143.17.107 OR dd=10.143.172.63 OR dd=10.211.101.31 OR dd=10.211.101.32 ) 
| fields - dd 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist""",
GCR - IPS - Internal Suspicious Penetration Behavior,1,AmwayGcrSec,"`GCR_Events_IPS` src_ip=""10.*"" NOT (threat=""LinkSys*"" OR threat=""Avtech*"")
    (
    (
    `GCR_Events_IPS_XSSAttack` 
    NOT `GCR_List_IP_Trust` 
    NOT ( `GCR_List_IP_VAScanner(src_ip)` OR `ACCL_List_IP_AssetScanner(src_ip)` OR `ACCL_List_Segmen_LB(src_ip)`) 
    AND threat!=""*Code*"" 
    AND threat!=""*Privilege*""
    )
    OR ( 
    NOT ( `GCR_List_IP_VAScanner(src_ip)` OR `ACCL_List_IP_AssetScanner(src_ip)` OR `ACCL_List_Segmen_LB(src_ip)` ) 
    AND (threat=""*Privilege*"" (threat=""*Escalation*"" OR threat=""*Elevation*"") )
    AND threat!=""*Code*"" threat!=""*XXS*""
    )
    OR (
    NOT ( `GCR_List_IP_VAScanner(src_ip)` OR `ACCL_List_IP_AssetScanner(src_ip)`OR `ACCL_List_Segmen_LB(src_ip)` ) 
    AND threat=""*Injection*"" threat!=""*SQL*""
    AND (threat!=""LinkSys*"" threat!=""Avtech*"")
    )
    OR (
    NOT ( `GCR_List_IP_VAScanner(src_ip)` OR `ACCL_List_IP_AssetScanner(src_ip)` OR `GCR_List_IP_AppBruteForceAttempt_Exception` OR `ACCL_List_Segmen_LB(src_ip)`) 
    AND (threat!=""LinkSys*"" threat!=""Avtech*"") 
    AND (threat=""*Execution*"" threat!=""*Privilege*"" (threat=""*Code*"" OR threat=""*Command*"")) 
    )
    OR (
    NOT ( `GCR_List_IP_VAScanner(src_ip)` OR `ACCL_List_IP_AssetScanner(src_ip)`OR `ACCL_List_Segmen_LB(src_ip)` ) 
    AND threat=""*SQL Injection*""
    AND (threat!=""LinkSys*"" threat!=""Avtech*"")
    ) 
    ) 
| join type=left src_ip 
    [ search index=""output-gcr"" sourcetype=Unblocked_Multiple_Risk_Attacks earliest=-30d@d latest=now 
    | dedup src_ip 
    | table src_ip Alert_name] 
| search Alert_name =""GCR - IPS - Unblocked Multiple Risk Attacks"" 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - IPS - Internal Suspicious Penetration Behavior"" 
| table Trigger_Time _time threat vendor_action severity app:risk src_ip  src_zone src_user dest_ip dest_app_name dest_zone dest_port dest_user application url file_name rule dvc_name EventCount IPList
| rename src_ip as ip 
| join type=left ip threat max=0 
    [ search index=pan_logs tag=gcr_pan threat!=""(9999)"" 
    | dedup src_ip dest_ip threat 
    | table src_ip dest_ip threat 
    | rename dest_ip as ip,src_ip as dd] 
| rename ip as src_ip",
GCR - IPS - IPS Blocked Source IP Hourly Outputlist,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan sourcetype=""pan:threat"" action=blocked log_subtype=""vulnerability"" 
| where NOT cidrmatch(""192.168.0.0/16"", src_ip) AND NOT cidrmatch(""10.0.0.0/8"", src_ip) AND NOT cidrmatch(""172.16.0.0/12"", src_ip) 
| where cidrmatch(""192.168.0.0/16"", dest_ip) OR cidrmatch(""10.0.0.0/8"", dest_ip) OR cidrmatch(""172.16.0.0/12"", dest_ip) 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(dest_ip) as dest_ips values(app:category) as appcategory values(category) as category count by src_ip 
| append 
    [ search 
        index=ali (sourcetype=amwayacclpd-fw-log OR sourcetype=*cloudfirewall*) AND log_type=""internet_log"" AND direction=in AND rule_result!=pass AND attack_type_name!="""" AND vul_level>0 
    | eval time = strftime(_time,""%F %H:%M:%S"") 
    | stats values(time) as time values(dst_ip) as dest_ips values(app_name) as app_names values(country_id) as countrys values(region_id) as region_ids values(url) as urls count by src_ip ] 
| append 
    [ search 
        index=ali eventtype=waf-alert final_action=block 
    | rename src as src_ip 
    | eval time = strftime(_time,""%F %H:%M:%S"") 
    | stats values(time) as time values(dhost) as dhosts values(status) as statuses values(region) as regions values(request_path) as request_pathes count by src_ip ] 
| append 
    [ search 
        index=aws-waf action=block 
    | eval time = strftime(_time,""%F %H:%M:%S"") 
    | stats values(time) as time values(dest) as dest_ips values(httpRequest.country) as countrys values(url) as urls count by src_ip ] 
| lookup GCR_Global_Internet_IP_range public_ip_range as src_ip OUTPUT gateway_location 
| fillnull value=NULL gateway_location 
| search gateway_location=""NULL"" 
| stats values(time) as time values(dest_ips) as dest_ips values(urls) as urls values(category) as category values(countrys) as countrys count by src_ip ```| table time src_ip dest_ips urls category countrys```
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - IPS - IPS Blocked Source IP Hourly Outputlist"" 
| collect index=""output-gcr"" sourcetype=""gcr_ips_alert_outputlist""",
GCR - IPS - Lots of IPS Attack Alerts in a short time,1,AmwayGcrSec,"index=""output-gcr"" Alert_name=""GCR - IPS - Many Blocked Attack alerted by IPS (INFO)"" OR Alert_name=""GCR - IPS - Many IPS Suspicious Attack in a short time(50/5)"" src_ip!=10.* src_ip!=52.220.10.101 
| eventstats dc(Trigger_Time) as Alert_count 
| where Alert_count>=10 
| table Alert_name EventCount Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name 
| eval Alert_name=""GCR - IPS - Lots of IPS Attack Alerts in a short time"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist"" 
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR - IPS - Many Blocked Attack alerted by IPS (INFO),1,AmwayGcrSec,"`GCR_Events_IPS` vendor_action!=alert
    AND (NOT `GCR_List_Segment_DMZ(src_ip)`) 
    AND (NOT `GCR_List_IP_VAScanner(src_ip)` )
    AND (NOT(src_ip=10.* AND dest_port=4503) app!=dns NOT `ACCL_List_IP_Printserver(dest_ip)`) 
| regex severity!=""low|information"" 
| regex src_ip=""."" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - IPS - Many Blocked Attack alerted by IPS (INFO)"" 
| eventstats count as EventCount by src_ip dvc_name app log_subtype threat vendor_action 
| where EventCount>=200 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_country,src_hostname,src_owner,src_app_name,src_port,src_user,src_zone,src_dns,dest_ip,dest_hostname,dest_owner ,dest_app_name,dest_location,dest_port,dest_zone,dvc_name,EventCount,vendor_action,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist"" 
| fields - Alert_name Trigger_Time",
GCR - IPS - Many IPS Suspicious Attack in a short time OutputList,1,AmwayGcrSec,"`GCR_Events_IPS` 
    vendor_action!=drop vendor_action!=reset* 
    NOT ( ""*Brute Force Attempt*""  )
   
    NOT (log_type=THREAT AND log_subtype=viurs )
    AND 
    (
    `Global_List_Segment(dest_ip)`
    AND (NOT `GCR_List_Segment_DMZ(src_ip)`) 
    AND (NOT `GCR_List_IP_VAScanner(src_ip)` )
    AND (NOT (threat=""SMB:User Password Brute Force Attempt(40004)"") NOT ( `ACCL_List_IP_FileServer(src_ip)` OR src_ip=192.168.4.33 OR src_10.143.17.210 ))
    AND (NOT `GCR_List_IP_Trust`)
    AND ( application!=soap AND application!=sip AND application!=""sharepoint-base"" AND application!=""adobe-cq"" AND application!=""sharepoint\-documents"")
    AND (src_ip!=10.140.17.65 AND src_ip!=10.140.17.67 AND src_ip!=10.140.25.254 AND src_ip!=10.143.17.163 )
    AND (dest_ip!=10.140.11.1 AND dest_ip!=10.140.11.2)
    AND (threat!=Novell*)
    NOT ((application=ssh OR application=tableau OR application=oralce)  AND `GCR_List_Segment_TestZone(dest_ip)` )
    AND (NOT (dest_ip=10.140.208.27 dest_port=445 (src_ip=10.143.16.110 OR src_ip=10.143.16.162 OR src_ip=10.143.16.163 OR src_ip=10.143.16.164 OR src_ip=10.143.16.206)))
    AND (NOT (application=ssh src_ip=10.143.18.58))
    AND (threat!=""HTTP302_brutal(410008)"")
    AND (NOT (threat=""Microsoft Windows IIS Script Filename Wrong Parsing Remote Code Execution Vulnerability(32545)"" src_ip=10.*))
    AND (NOT (application=ssh src_ip=10.143.34.51 (dest_ip=10.143.18.93 OR dest_ip=10.143.18.94) ))
    AND (NOT (src_ip=10.140.208.202 AND application=""ms-ds-smbv2""))
    AND (NOT (application=ssh src_ip=10.143.34.65 dest_ip=10.140.19.85))
    AND (NOT (application=ssh (src_ip=10.143.18.93 OR src_ip=10.143.18.94) dest_ip=10.143.57.22))
    AND (NOT `ACCL_List_IP_AssetScanner(src_ip)`)
    AND (NOT (application=ldap src_ip=10.140.15.106 (dest_ip=10.143.172.53 OR dest_ip=10.143.173.52)))
    )
| regex severity=""high|medium|critical"" 
| regex url!=""\""obrareq.cgi\"""" 
| eventstats count as EventCount by src_ip application log_subtype threat vendor_action 
| where EventCount>=50 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - IPS - Many IPS Suspicious Attack in a short time""
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist""",
GCR - IPS - Many IPS Suspicious Attack in a short time(50/5),1,AmwayGcrSec,"index=""output-gcr"" AND sourcetype=""GCR_IPS_Alert_Outputlist"" AND Alert_name=""GCR - IPS - Many IPS Suspicious Attack in a short time""
| search NOT ( src_app_name=*LB* OR threat=""*Brute Force*"")
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR - IPS - Non-Compliant Network Access IPS Weekly Report,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan sourcetype=""pan:threat"" 
| where cidrmatch(""192.168.0.0/16"", dest_ip) OR cidrmatch(""10.0.0.0/8"", dest_ip) 
| where cidrmatch(""192.168.0.0/16"", src_ip) OR cidrmatch(""10.0.0.0/8"", src_ip) 
| search `GCR_List_Segment_QAServerFarm(src_ip)` AND `GCR_List_Segment_PDServerFarm(dest_ip)` 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| lookup servercidrlookup ip as src_ip output name as src_asset_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - IPS - Non-Compliant Network Access IPS Alert"" 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(src_ip) as src_ip values(src_ip_zone) as src_ip_zones values(src_asset_name) as src_asset_names values(dest_ip_zone) as dest_ip_zones values(dest_asset_name) as dest_asset_names values(action) as actions values(app) as apps values(app:subcategory) as app:subcategorys values(dest_port) as dest_ports count by dest_ip 
| table  time src_ip  src_ip_zones src_asset_names  actions  apps  app:subcategorys dest_ports dest_ip  dest_ip_zones dest_asset_names",None
GCR - IPS - PAN Blocked Source IP Hourly OutputList,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan sourcetype=""pan:threat"" action=blocked log_subtype=""vulnerability"" 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| where NOT cidrmatch(""192.168.0.0/16"", src_ip) AND NOT cidrmatch(""10.0.0.0/8"", src_ip) AND NOT cidrmatch(""172.16.0.0/12"", src_ip) 
| where cidrmatch(""192.168.0.0/16"", dest_ip) OR cidrmatch(""10.0.0.0/8"", dest_ip) OR cidrmatch(""172.16.0.0/12"", dest_ip) 
| stats values(time) as time values(dest_ip) as dest_ips values(client_location) as client_location values(dest_asset_tag) as dest_asset_tag values(app:category) as appcategory values(category) as category values(dest_zone) as dest_zone values(src_zone) as src_zone values(file_path) as file_path  values(rule) as rule values(severity) as severity count by src_ip 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - IPS - PAN Blocked Source IP Hourly OutputList"" 
| table time severity src_zone src_ip client_location appcategory  category rule file_path  dest_ips dest_asset_tag dest_zone
| collect index=""output-gcr"" sourcetype=""gcr_PAN_alert_outputlist""",
GCR - IPS - Possible Application Brute Force Attempt OutputList,1,AmwayGcrSec,"`GCR_Events_IPS` sourcetype=""pan:threat"" application!=""ms-ds-smb*"" 
    NOT `GCR_List_IP_Trust` 
    NOT (`GCR_List_IP_VAScanner(src_ip)` OR `ACCL_List_IP_AssetScanner(src_ip)` OR `GCR_List_IP_AppBruteForceAttempt_Exception` OR `ACCL_List_Segmen_LB(src_ip)`)
    AND (threat=""*Brute*"" threat!=""*DoS*"" (threat=""*Attempt*"" OR threat=""*accack*""))
    NOT (src_ip=10.143.172.171 dest_ip=10.143.172.169) 
    AND src_ip!=10.143.34.178
    AND dest_ip!=10.140.239.72
| eventstats count as EventCount by src_ip dest_ip 
| where EventCount>=5 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - IPS - Possible Application Brute Force Attempt"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name EventCount  Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"" , "") 
| collect index=""output-gcr"" sourcetype=""Unblocked_Multiple_Risk_Attacks""",
GCR - IPS - Possible Application Brute Force Attempt Report,1,AmwayGcrSec,"index=""output-gcr"" Alert_name=""GCR - IPS - Possible Application Brute Force Attempt"" 
| stats dc(Trigger_Time) as Alert_Count by src_ip ,dest_ip threat |sort - Alert_Count",None
GCR - IPS - Possible Information Leak Attack,1,AmwayGcrSec,"`GCR_Events_IPS` 
    NOT `GCR_List_IP_Trust` threat!=""*Code*"" threat!=""*Privilege*"" 
    NOT ( `GCR_List_IP_VAScanner(src_ip)` OR `ACCL_List_IP_AssetScanner(src_ip)` OR `ACCL_List_Segmen_LB(src_ip)`) 
    AND threat!=""*Code*"" 
    AND `GCR_Events_IPS_InformationLeakage` 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""IPS - Possible Information Leak Attack"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eventstats count as EventCount by src_ip dest_ip 
| where EventCount>=5 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action 
| collect index=""output-gcr"" sourcetype=""Unblocked_Multiple_Risk_Attacks""",
GCR - IPS - Unblocked High Risk Attack from DMZ to Internal,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist"" Alert_name=""GCR - IPS - Unblocked High Risk Attack from DMZ to Internal"" NOT `ACCL_List_Segmen_LB(src_ip)` 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| search alert_count=1 
| where d_time<=181 
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR - IPS - Unblocked High Risk Attack from DMZ to Internal OutputList,1,AmwayGcrSec,"`GCR_Events_IPS_DC`
    AND (dvc_name=GZ_CITIC_LAN_IPS01 OR dvc_name=GZ_MGF_LAN_IPS01) 
    AND threat!=""*WebLogic*"" threat!=""Sun*"" src_ip!=""10.140.56.*"" src_ip!=""10.143.56.*"" 
    NOT ( (application=ssh src_ip=10.143.34.51 (dest_ip=10.143.34.72 OR dest_ip=10.143.34.73)) OR (src_ip=10.140.15.196 dest_ip=10.143.173.52 dest_port=389) ) 
    NOT ( (dest_ip=10.143.17.184 OR dest_ip=10.143.172.134) OR (src_ip=10.143.16.98 OR src_ip=10.140.18.172 OR src_ip=10.142.65.22 OR src_ip=10.142.8.42 OR src_ip=10.140.193.41 OR src_ip=10.141.8.80) OR (src_ip=10.143.17.210) dest_port=445 )
    AND dest_ip!=10.140.20.42 threat!=""HTTP:User Authentication Brute Force Attempt(40006)"" threat!=""HTTP Unauthorized Brute Force Attack(40031)"" 
| eval src_ip=if(cidrmatch(""10.140.57.0/21"",src_ip) OR cidrmatch(""10.143.57.0/21"",src_ip) OR cidrmatch(""10.140.228.1/22"",src_ip) OR src_ip=""10.140.232.*"" OR src_ip=""10.140.233.*"" OR src_ip=""10.140.234.*"" OR src_ip=""10.140.235.*"" OR src_ip=""10.140.236.*"" OR src_ip=""10.140.237.*"" OR src_ip=""10.143.60.*"" OR src_ip=""10.143.61.*"" OR cidrmatch(""10.143.158.1/23"",src_ip) OR src_ip=""10.143.160.*"" OR src_ip=""10.143.161.*"" OR src_ip=""10.143.162.*"" OR src_ip=""10.143.163.*"" OR src_ip=""10.143.164.*"" OR src_ip=""10.143.165.*"" OR src_ip=""10.143.166.*"" OR src_ip=""10.143.167.*"" OR src_zone=""DMZ*"",src_ip,NULL) 
| where src_ip!=""NULL"" 
| regex severity=""high|critical"" 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - IPS - Unblocked High Risk Attack from DMZ to Internal"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name EventCount  Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist""",
GCR - IPS - Unblocked High Risk Attack from DMZ to Internal(F5),1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist"" Alert_name=""GCR - IPS - Unblocked High Risk Attack from DMZ to Internal"" `ACCL_List_Segmen_LB(src_ip)`
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| search alert_count=1 
| where d_time<=181 
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR - IPS - Unblocked Multiple Risk Attacks,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""Unblocked_Multiple_Risk_Attacks"" 
    Alert_name=""GCR - IPS - Unblocked Multiple Risk Attacks"" threat!=""*Brute Force*"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| where alert_count=1 
| where d_time<=301 
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR - IPS - Unblocked Multiple Risk Attacks OutputList,1,AmwayGcrSec,"`GCR_Events_IPS` 
    AND vendor_action=alert
    NOT `GCR_List_IP_Trust` 
    NOT (`GCR_List_IP_VAScanner(src_ip)` OR `ACCL_List_IP_AssetScanner(src_ip)` OR `ACCL_List_Segmen_LB(src_ip)`) 
| regex severity=""medium|high|critical"" 
| eventstats dc(threat) as EventCount by src_ip,dest_ip 
| where EventCount>=3 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| search NOT name=""Public IP Segment (China Telecom )"" 
| eval Alert_name=""GCR - IPS - Unblocked Multiple Risk Attacks"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"" , "") 
| collect index=""output-gcr"" sourcetype=""Unblocked_Multiple_Risk_Attacks""",
GCR - IPS - Unblocked Scan Alert,1,AmwayGcrSec,"index=""output-gcr"" AND sourcetype=""GCR_IPS_Alert_Outputlist"" AND Alert_name=""GCR - IPS - Unblocked Scan Alert"" AND severity!=""informational"" AND  severity!=""low""
| table _time,threat,severity,application,vendor_action,src_ip,src_country, src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone",
GCR - IPS - Unblocked Scan Alert Outputlist,1,AmwayGcrSec,"`GCR_Events_IPS_DC` threat=""*scan*"" vendor_action=alert 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - IPS - Unblocked Scan Alert"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name 
| collect index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist"" 
| table _time,threat,severity,application,vendor_action,src_ip,src_country, src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone",
GCR - IPS - VP Computer IPS Alert,1,AmwayGcrSec,"`GCR_Events_IPS_DC`
    `ACCL_List_Device_IPS_Intranet`
    AND (NOT (dest_ip=10.140.239.72 type=""HTTP:IIS ism.dll/SSI Buffer Overflow""))
    AND (NOT (threat=""Microsoft Windows SMB Segmentation of RPC Request Attempt(36489)"" url=""""\""spoolss\"""""")) 
    AND type!=""TCP:ACK Host Sweep"" 
    AND type!=""SIP:SIP Express Route Contact Header Buffer Overflow"" 
    AND type!=""UDS-Web Attempt Attack Others"" type!=""UDS-XSS"" 
    AND type!=""ICMP:Nachi-like Ping"" 
    AND type!=IM* 
    AND type!=P2P* 
    AND application!=""sharepoint-base"" 
    AND dest_ip!=10.140.239.72 
    AND (NOT (threat=""FTP:login Brute Force attempt(40001)"" misc=""acclftp*"") ) 
| regex severity!=""informational|low"" 
| rename src_ip as IP_Address 
| lookup GCR_DHCP_OutputList.csv IP_Address output Host_Name 
| rex field=Host_Name ""(?<computername>\w+)\.*?"" 
| eval computername=lower(computername) 
| lookup Director_Computers.csv computername output Tag 
| lookup VP_computers.csv computername output Status 
| search Status=enable OR Tag=dc 
| rename IP_Address as src_ip 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone  
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - IPS - VP Computer IPS Alert"" 
| table Alert_name EventCount  Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat log_type url user vendor_action  src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"" , "") 
| collect index=""output-gcr"" sourcetype=""GCR_IPS_Alert_Outputlist""
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname src_owner src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
GCR - Monthly Report - Ali WAF,1,AmwayGcrSec,"| from datamodel:Alibaba_Logs.WAF_Threat_Logs
| stats count as total by year, month,matched_host, final_plugin, final_rule_id, final_action",None
GCR - Monthly Report - PA NGFW Threat,1,AmwayGcrSec,"| from datamodel:GCR_Palo_Alto.NGFW_Threat
| stats count by log_year, log_month,dvc, log_subtype, threat, threat_category, severity, src_type, direction, dest_type, dest_port, action",None
GCR - Monthly Report - ProofPoint,1,AmwayGcrSec,"index=""proofpoint""
| stats count by date_year, date_month, sender, ""recipient{}"", phishScore, malwareScore,spamScore,impostorScore,threatsInfoMap{}.classification, threatsInfoMap{}.threatType, eventType",None
GCR - Panorama Threat alert,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan (severity=high OR severity=critical) vendor_action=drop (src_ip=""10.*"" AND dest_ip=""10.*"" ) 
| eventstats count by dvc_name
| where count>=10 
| table _time vendor_action app app:risk application dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_country src_ip_zone src_port src_user src_zone threat type url user",
GCR - POS Computer Access Source IP Info,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan dest_ip=10.211.138.224 dest_port=8088
| table src_ip 
| dedup src_ip 
| lookup GCR_DHCP_OutputList.csv IP_Address as src_ip",
GCR - Ransomware Last 30d IP OutputList,1,AmwayGcrSec,"index=pan_logs    (sourcetype=pan:threat signature=""SMB DoublePulsar Ping Detection"") OR (sourcetype=pan:threat signature=""Microsoft Windows SMB Remote Code Execution Vulnerability"") OR (""iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea"" OR ""ifferfsodp9ifjaposdfjhgosurijfaewrwergwea"") 
|stats count by src_ip |outputlookup ransomware_last_30d_src_ip.csv",
GCR - Ransomware Lastday New InfectedIP,1,AmwayGcrSec,"index=pan_logs (sourcetype=pan:threat signature=""SMB DoublePulsar Ping Detection"") OR (sourcetype=pan:threat signature=""Microsoft Windows SMB Remote Code Execution Vulnerability"") OR (""iuqerfsodp9ifjaposdfjhgosurijfaewrwergwea"" OR ""ifferfsodp9ifjaposdfjhgosurijfaewrwergwea"")
| table _time src_ip,src_country,log_subtype,signature, action,dest_ip,dest_zone,app,rule,dvc_name 
| lookup ransomware_last_30d_src_ip.csv src_ip |fillnull value=null count
| search count=null|fields - count|collect index=summary sourcetype=""Ransomware-New-InfectedIP""",
GCR - TencentCloud - HostsecurityAlert - Security Alert,1,AmwayGcrSec,"index=tencent sourcetype=hostsecurity 

| table Event_time,SsaSource,Name,Srcip,Dstip,Dstport,MachineName 
| rename SsaSource as alert_type,Name as alert_name",
GCR - TencentCloud - WAFAlert - Security Alert,1,AmwayGcrSec,"index=tencent sourcetype=waf Srcip!=58.248.178.101

| table Event_time,SsaSource,Name,Srcip,Dstip,Dstport,Domain,AttackType,RequestUri,RequestMethod,AttackContent 
| rename SsaSource as alert_type,Name as alert_name",
GCR - URL Filtering - Command and Control Traffic Detection,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList"" Alert_name=""GCR - URL Filtering - Command and Control Traffic Detection OutputList"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| where alert_count=1 
| search d_time<=301 AND src_user!=""*cnv*"" AND src_ip_zone!=o_gzdc_public_guest
| table _time,log_subtype,rule,severity,threat,http_category,action,src_port,src_ip,src_ip_zone,src_country,dest_ip,dest_port,src_user,application,url,dvc_name,IPList",
GCR - URL Filtering - Command and Control Traffic Detection OutputList,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan log_subtype=url http_category=command-and-control src_ip=10.* dest_zone!=vpn_span src_user!=""*cnv*"" 
| search date_hour>=21 OR date_hour<=9 
| eval Alert_name=""GCR - URL Filtering - Command and Control Traffic Detection OutputList"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone,area as src_country
| fillnull value=""unknow""  src_ip_zone
| search src_ip_zone!=""*VPN*""
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,http_category,app,application,src_ip,src_ip_zone,src_country,src_port,src_user,src_zone,dest_ip,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList""",
GCR - URL Filtering - Unkown or Malware Traffic Detection,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList"" Alert_name=""GCR - URL Filtering - Unkown or Malware Traffic Detection"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| where alert_count=1 
| where d_time<=121 
| table Alert_name,Trigger_Time,time,src_ip,dest_ip,dest_port,user,application,http_category,action,src_zone,dest_zone,dvc_name,url 
| rename dest_ip as ip 
| lookup ip_threatlist.csv ip OUTPUT rf_a_risk_score 
| fillnull value=NULL rf_a_risk_score 
| where rf_a_risk_score!=""NULL"" 
| eval risk_level=case(rf_a_risk_score<23,""Low"",rf_a_risk_score>=23 AND rf_a_risk_score<65,""Medium"",rf_a_risk_score>=65,""High"") 
| where risk_level!=""Low"" 
| rename ip as dest_ip 
| fields + Alert_name Trigger_Time time,src_ip,dest_ip,dest_port,user,application,http_category,action,src_zone,dest_zone,dvc_name,url,rf_a_risk_score,risk_level",
GCR - URL Filtering - Unkown or Malware Traffic Detection OutputList,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan log_subtype=url application!=wechat-base (src_zone!=fw_vender AND src_zone!=vpn )  (http_category=unknown OR http_category=malware) (application=ssl OR application=""web-browsing"") url!=""*mmtls*"" url!=""*qq.com*"" url!=""*apple.com*"" 
| eventstats dc(dest_ip) as EventCount by src_ip 
| where EventCount>=3 
| eval Alert_name=""GCR - URL Filtering - Unkown or Malware Traffic Detection"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name Trigger_Time,_time,src_ip,src_country,dest_ip,dest_port,user,application,http_category,action,src_zone,dest_zone,dvc_name,url 
| rename dest_ip as ip 
| lookup ip_threatlist.csv ip OUTPUT rf_a_risk_score 
| fillnull value=NULL rf_a_risk_score 
| where rf_a_risk_score!=""NULL"" 
| eval risk_level=case(rf_a_risk_score<23,""Low"",rf_a_risk_score>=23 AND rf_a_risk_score<65,""Medium"",rf_a_risk_score>=65,""High"") 
| rename ip as dest_ip 
| fields + Alert_name Trigger_Time _time,src_ip,src_country,dest_ip,dest_port,user,application,http_category,action,src_zone,dest_zone,dvc_name,url,risk_level,rf_a_risk_score
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","")
| collect index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList""",
GCR - Vendor - AD Account Sharing Report,1,AmwayGcrSec,"index=domain signature_id=4624 `ACCL_List_HostName_AD` user=cnv* 
    (NOT (Source_Network_Address=10.140.226.* OR Source_Network_Address=10.140.227.* OR Source_Network_Address=10.140.228.* OR Source_Network_Address=10.140.229.* OR Source_Network_Address=10.140.230.* OR Source_Network_Address=10.140.231.* )) AND
    (NOT (Source_Network_Address=10.143.226.* OR Source_Network_Address=10.143.227.* OR Source_Network_Address=10.143.228.* OR Source_Network_Address=10.143.229.* OR Source_Network_Address=10.143.230.* OR Source_Network_Address=10.143.231.*)) AND 
    Source_Network_Address=10.* AND
    (NOT (Source_Network_Address=10.198.161.* OR Source_Network_Address=10.180.160.* OR Source_Network_Address=10.180.161.* OR Source_Network_Address=10.54.* OR Source_Network_Address=10.55.*)) user!=""cnview01"" user!=""*\$"" user!=cnvid*
    user!=""cnvrops01""  Workstation_Name!=""-"" 
| bucket span=20m _time 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats dc(Source_Network_Address) as number by _time,user,First_name,Last_name 
| where number>=4 
| eval User=lower(user) 
| stats dc(number) as ""AD_Account_Sharing"" by _time,User,First_name,Last_name 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - Hit Sinkhole Report,1,AmwayGcrSec,"`GCR_Events_FW_DC` dest_ip=72.5.65.111 src_zone=fw_inside src_user=""na\\cnv*"" 
| bucket span=24h _time 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as number by _time,src_user,First_name,Last_name 
| where number>=50 
| eval User=lower(src_user) 
| replace ""na\*"" with ""*"" in User 
| stats dc(_time) as ""Excessive_Sinkhole_Hits"" by Date,User,First_name,Last_name 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - PA C&C URL Report,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan log_subtype=url http_category=command-and-control src_ip=10.* dest_zone!=vpn_span src_user=""na\\cnv*"" (date_hour>=21 OR date_hour<=9) 
| eval User=lower(src_user) 
| replace ""na\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""C&C_URL"" by _time,User,First_name,Last_name 
| sort - ""C&C_URL"" 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - PA CoinMine Report,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_FW_PA_Alert_OutputList"" Alert_name=""GCR - FW - Malware Blacklist IP Connection"" src_user=na\\\\cnv* 
| eval User=lower(src_user) 
| replace ""na\\\\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""Coin_Mining"" by _time,User,First_name,Last_name 
| sort - ""Coin_Mining"" 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - PA Malware URL Report,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan log_subtype=url application!=wechat-base (src_zone!=fw_vender AND src_zone!=vpn ) http_category=malware (application=ssl OR application=""web-browsing"") url!=""*mmtls*"" src_user=""na\\cnv*"" 
| eval User=lower(src_user) 
| replace ""na\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""Malware_URL"" by _time,User,First_name,Last_name 
| sort - ""Malware_URL"" 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - PA Ransomware Report,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList"" Alert_name=""GCR - IPS - [Critical] Ransomware Virus Detection"" 
| eval User=lower(src_user) 
| replace ""na\\\\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""Ransomware"" by _time,User,First_name,Last_name 
| sort - ""Ransomware"" 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - PA Spyware Report,1,AmwayGcrSec,"`GCR_Events_Spyware_DC` src_user=""na\\cnv*"" 
| where severity=""medium"" OR severity=""high"" OR severity=""critical"" 
| eval User=lower(src_user) 
| replace ""na\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""PA_Spyware"" by _time,User,First_name,Last_name 
| sort - ""PA_Spyware"" 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - PA Virus Report,1,AmwayGcrSec,"`GCR_Events_Virus_DC` src_user=""na\\cnv*"" 
| where severity=""medium"" OR severity=""high"" OR severity=""critical"" 
| eval User=lower(src_user) 
| replace ""na\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""PA_Virus"" by _time,User,First_name,Last_name 
| sort - PA_Virus 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - PA Vulnerability Report,1,AmwayGcrSec,"`GCR_Events_IPS_DC` src_user=""na\\cnv*"" 
| where severity=""medium"" OR severity=""high"" OR severity=""critical"" 
| eval User=lower(src_user) 
| replace ""na\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""PA_Vulnerability"" by _time,User,First_name,Last_name 
| sort - PA_Vulnerability 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - PA Wildfire-Virus Report,1,AmwayGcrSec,"`GCR_Events_Threat_DC` log_subtype=wildfire-virus src_user=""na\\cnv*"" 
| where severity=""medium"" OR severity=""high"" OR severity=""critical"" 
| eval User=lower(src_user) 
| replace ""na\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""Wildfire-Virus"" by _time,User,First_name,Last_name 
| sort - ""Wildfire-Virus"" 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - VPN AV Noncompliance Report,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan hip_name=HIPP_Notification_AV (src_user=na\\cnv* OR (src_user!=na\\cnv* AND hostname!=cnws*)) 
| eval User=lower(src_user) 
| replace ""na\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""VPN_AV_Noncompliance"" by _time,User,First_name,Last_name 
| sort - ""VPN_AV_Noncompliance"" 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Vendor - VPN Patch Noncompliance Report,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan hip_name=HIPP_Notification_Patch (src_user=na\\cnv* OR (src_user!=na\\cnv* AND hostname!=cnws*)) 
| eval User=lower(src_user) 
| replace ""na\*"" with ""*"" in User 
| fillnull value=""-"" user_first user_last 
| rename user_first as First_name,user_last as Last_name 
| stats count as ""VPN_Patch_Noncompliance"" by _time,User,First_name,Last_name 
| sort - ""VPN_Patch_Noncompliance"" 
| collect index=""output-gcr"" sourcetype=""GCR_Vendor_SecurityEvents_Report""",None
GCR - Virus - [Critical] Spreading Reached 10 Times,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList"" Alert_name=""GCR - Virus - [Critical] Spreading Reached 10 Times"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| where alert_count=1 
| where d_time<=901 
| table Alert_name Trigger_Time timestamp vendor_product user region severity category signature process file_name file_path vendor_action hostname username src_country product engine_version event_description signature_version src_ip src_dns dest_ip dest_asset_name dest_nt_host IPList 
| fields - Alert_name,Trigger_Time",
GCR - Virus - [Critical] Spreading Reached 10 Times OutputList,1,AmwayGcrSec,"`GCR_Events_Virus_EndPoint` (NOT (sprot=""25"" (src_ip=10.54.180.23 OR src_ip=10.55.18.44 OR src_ip=10.54.248.77 OR src_ip=167.23.249.41 OR src_ip=167.23.48.49)))
    AND (signature!=TFTPD32 OR signature!=""防病毒标准保护:禁止群发邮件蠕虫发送邮件"" OR signatrue!= ""Anti-virus Standard Protection:Prevent mass mailing worms from sending mail"" OR signature!=""防病毒標準保護:防止大宗郵件蠕蟲病毒傳送郵件"") 
| regex src_ip=""."" 
| where src_ip!=dest_ip 
| regex signature!=""Artemis"" 
| eventstats count as EventCount by src_ip 
| where EventCount>=10 
| eval Alert_name=""GCR - Virus - [Critical] Spreading Reached 10 Times"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name Trigger_Time _time timestamp vendor_product user region severity category signature process file_name file_path vendor_action hostname username src_country product engine_version event_description signature_version src_ip src_dns dest_ip dest_nt_host 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList""",
GCR - Virus - ATL Server Is Infected With Virus,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList"" Alert_name=""GCR - Virus - ATL Server Is Infected With Virus"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by dest_ip 
| where alert_count=1 
| where d_time<=181 
| dedup signature dest_nt_host
| table _time vendor_product user region severity category signature process file_name vendor_action hostname username src_country product engine_version event_description signature_version src_ip src_dns dest_ip dest_nt_host dest_asset_name",
GCR - Virus - ATL Server Is Infected With Virus OutputList,1,AmwayGcrSec,"`ATL_Events_Virus_EndPoint`  
    AND (dest_ip=10.180.161.* OR dest_ip=10.180.66.*  OR fqdn!=twws* )
| lookup servercidrlookup ip as dest_ip output Cluster as dest_asset_name
| fillnull value=null dest_asset_name 
| search dest_asset_name!=""*Wireless*"" AND dest_asset_name!=""*Client*""
| eval Alert_name=""GCR - Virus - ATL Server Is Infected With Virus"" 
| eval Trigger_Time=strftime(now(),""%F %T"")
| table Alert_name Trigger_Time _time user region severity category signature threat_type process file_name file_path vendor_action fqdn hostname username src_country product engine_version event_description signature_version src_ip src_dns dest_ip dest_nt_host dest_asset_name vendor_product
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList""",
GCR - Virus - ATL Virus Propagation,1,AmwayGcrSec,"`ATL_Events_Virus_EndPoint`
    AND threat_type!=none 
    AND signature!=*IRC* 
    AND NOT((signature=""*防止大宗*"" OR signature=""Anti-virus Standard Protection:Prevents mass mailing worms from sending mail"") AND (src_ip=10.54.180.23 OR src_ip=10.55.18.44 src_ip=10.54.248.77 OR src_ip=167.23.249.41 OR src_ip=167.23.248.49)) 
    AND src_ip=""*""
| where src_ip!=dest_ip 
| lookup servercidrlookup ip as dest_ip output Cluster as dest_asset_name 
| fillnull value=null dest_asset_name 
| eval Alert_name=""GCR - Virus - ATL Virus Propagation"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name Trigger_Time _time user region severity category signature threat_type process file_name file_path vendor_action fqdn hostname username src_country product engine_version event_description signature_version src_ip src_dns dest_ip dest_nt_host dest_asset_name vendor_product 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR - Virus - ATL Virus Propagation"" 
| fields - Alert_name Trigger_Time",
GCR - Virus - Host Virus Spreading,1,AmwayGcrSec,"`GCR_Events_Virus_EndPoint` (NOT (sprot=""25"" (src_ip=10.54.180.23 OR src_ip=10.55.18.44 OR src_ip=10.54.248.77 OR src_ip=167.23.249.41 OR src_ip=167.23.48.49)))
    AND (signature!=TFTPD32 OR signature!=""防病毒标准保护:禁止群发邮件蠕虫发送邮件"" OR signatrue!= ""Anti-virus Standard Protection:Prevent mass mailing worms from sending mail"" OR signature!=""防病毒標準保護:防止大宗郵件蠕蟲病毒傳送郵件"") 
| regex src_ip=""."" 
| where src_ip!=dest_ip 
| eval Alert_name=""GCR - Virus - Host Virus Spreading"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name,Trigger_Time,_time,fqdn,src_ip,dest_ip,user,logon_user,file_name,product,severity,event_description,signature,signature_version,vendor_action 
| lookup servercidrlookup ip as dest_ip output name as dest_area_name 
| search name!=""*文件服务器*"" 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time",
GCR - Virus - Infected Statisics Count >=100 Within 7 Days,1,AmwayGcrSec,"`GCR_Events_Virus_EndPoint` 
| rename file_path as file_name 
| regex file_name!=""C:\\Windows\\Amway_MKT.scr*"" 
| regex file_name="".*C:.*|.*D:.*"" 
| eval Alert_name=""GCR - Virus - Infected Statisics Count >=100 Within 7 Days"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eventstats count as ip_event_count by src_ip 
| eventstats count as host_event_count by hostname 
| search ip_event_count>=100 OR host_event_count>=100 
| table Alert_name Trigger_Time _time timestamp src_country product severity process engine_version event_description signature signature_version src_ip hostname dest_ip dest_nt_host file_name user vendor_action host_event_count 
| join type=left hostname 
    [ search `GCR_Events_Virus_EndPoint` earliest=@d latest=now 
    | rename file_path as file_name 
    | regex file_name!=""C:\\Windows\\Amway_MKT.scr*"" 
    | regex file_name="".*C:.*|.*D:.*"" 
    | stats count by hostname ] 
| lookup servercidrlookup hostname output name as dest_asset_name 
| replace *.na.intranet.msd with * in hostname 
| fillnull value=""null"" count 
| where count!=""null"" 
| eventstats values(hostname) as IPList 
| eval IPList=mvjoin(IPList,"","")
| collect index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList"" 
| fields - Alert_name Trigger_Time _time",
GCR - Virus - Infected statistics,1,AmwayGcrSec,"`GCR_Events_Virus_EndPoint` 
| eval Alert_name=""Virus - Infected statistics"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""Unblocked_Multiple_Risk_Attacks""",
GCR - Virus - Palo Alto Virus Monthly Report（Event Report),1,AmwayGcrSec,"`GCR_Events_Virus_DC` OR `GCR_Events_Spyware_DC` vendor_product=""Palo Alto Networks Firewall"" application!=dns application!=sip (dest_ip=10.* OR src_ip=10.* OR src_ip=192.168.*) 
| rename src_ip as ip 
| iplocation ip 
| eval src_ip_zone=Region+ ""-"" + City 
| rename ip as src_ip 
| rename dest_ip as ip 
| lookup networkcidrlookup ip output region name
| eval dest_ip_zone=region+ ""-"" +name 
| rename ip as dest_ip 
| eval Date=strftime(_time, ""%Y-%m"") 
| table src_ip src_ip_zone threat vendor_action severity log_subtype application dest_ip dest_ip_zone dvc_name user url vendor_product rule Date Country 
| fillnull value="" "" Date src_ip src_ip_zone threat vendor_action application dest_ip dest_ip_zone dvc_name user url vendor_product rule Country 
| stats count as Eventcounts by Date log_subtype severity threat vendor_action dest_ip dest_ip_zone dvc_name src_ip src_ip_zone Country user application rule url 
| sort - Eventcounts",None
GCR - Virus - PaloAlto Virus Alerts Reached 5 Times,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList"" Alert_name=""GCR - Virus - PaloAlto Virus Alerts Reached 5 Times"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by dest_ip,threat 
| where alert_count=1 
| where d_time<=601 
| table _time,log_subtype,file_name,rule,severity,threat,action,src_port,src_ip,src_country,dest_ip,dest_port,dest_asset_name,user,application,url,dvc_name,IPList",
GCR - Virus - PaloAlto Virus Alerts Reached 5 Times OutputList,1,AmwayGcrSec,"`GCR_Events_Virus_DC` vendor_product=""Palo Alto Networks Firewall"" ( src_ip!=192.168* AND dest_ip!=192.168*) 
NOT 'ACCL_List_IP_FileServer(dest_ip)'
NOT 'ACCL_List_IP_FileServer(src_ip)'
| eval Alert_name=""GCR - Virus - PaloAlto Virus Alerts Reached 5 Times"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_country,src_port,src_user,user,src_zone,dest_ip,dest_location,dest_port,dest_zone,dvc_name,file_name,url,rule,severity,signature,threat 
| fillnull value="""" 
| eventstats count as EventCount by src_ip,dvc_name,dest_ip,user,application 
| where EventCount>=5 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList""",
GCR - Virus - PaloAlto Virus Alerts To Different Dest_IP,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_Lateral_Attack_OutputList"" Alert_name=""GCR - Virus - PaloAlto Virus Alerts To Different Dest_IP"" 
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by dest_ip,threat 
| where alert_count=1 
| where d_time<=601 
| table _time,log_subtype,rule,severity,threat,action,src_port,src_ip,src_country,dest_ip,dest_port,dest_asset_name,user,application,url,dvc_name,IPList",
GCR - Virus - PaloAlto Virus Alerts To Different Dest_IP OutputList,1,AmwayGcrSec,"`GCR_Events_Virus_DC` vendor_product=""Palo Alto Networks Firewall"" ( src_ip!=192* AND dest_ip!=192*) 
| eval Alert_name=""GCR - Virus - PaloAlto Virus Alerts To Different Dest_IP"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_country,src_port,src_user,user,src_zone,dest_ip,dest_location,dest_port,dest_zone,dvc_name,file_name,url,rule,severity,signature,threat 
| fillnull value="""" 
| eventstats dc(dest_ip) as EventCount by src_ip 
| where EventCount>=2
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_Lateral_Attack_OutputList""",
GCR - Virus - POS Computer Is Infected with Virus (SECP),1,AmwayGcrSec,"index=sccm sourcetype=scep_china hostname=cnws* AND hostname!=cnwsbj* AND hostname!=cnwssh* AND hostname!=cnwsgz* 
| table _time username category action hostname resource severity process signature 
| lookup pos_computer_lookup Host_Name as hostname output src_ip as ip 
| search ip=""*""
| lookup servercidrlookup hostname output name as dest_asset_name 
| table _time category action signature username resource hostname dest_asset_name ip severity process  
| eval Alert_name=""GCR - Virus - POS Computer Is Infected with Virus (SECP)"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList"" 
| fields - Trigger_Time Alert_name",
GCR - Virus - Ransomware Virus Detection,1,AmwayGcrSec,"`GCR_Events_Virus_EndPoint` *ransom* OR *wannaCry* (file_path!=""C:\\Windows\\PSEXESVC.exe"" AND file_name!=""C:\\Windows\\PSEXESVC.exe"") 
| eval Alert_name=""GCR - Virus - Ransomware Virus Detection"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name Trigger_Time _time timestamp vendor_product user region severity category signature process file_path vendor_action hostname username src_country product engine_version event_description signature_version src_ip src_dns dest_ip dest_nt_host file_name vendor_action 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time,_time",
GCR - Virus - Server is Infected with Virus,1,AmwayGcrSec,"`GCR_Events_Virus_EndPoint` 
    `ACCL_List_HostName_Server(hostname)` OR `ACCL_List_HostName_Server(dest_dns)` 
| regex signature!=""TFTPD32|Spyware-AdaEbook|Generic\.dx|Artemis"" 
| regex file_name!=""\\cn"" 
| eval Alert_name=""GCR - Virus - Server is Infected with Virus"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| table Alert_name Trigger_Time _time timestamp vendor_product user region severity category signature process file_name vendor_action hostname username src_country product engine_version event_description signature_version src_ip src_dns dest_ip dest_asset_name dest_nt_host 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time,_time",
GCR - Virus - Server is Infected with Virus (PA),1,AmwayGcrSec,"`GCR_Events_Virus_DC` vendor_product=""Palo Alto Networks Firewall"" 
    (`GCR_List_Segment_ServerFarm(src_ip)` AND (severity!=low AND severity!=informational )) 
    OR
    ( (`GCR_List_Segment_ServerFarm(dest_ip)` AND src_ip!=10.* AND src_ip!=""172.*"" AND src_ip!=""192.*"" ) AND (severity!=low AND severity!=informational ) ) 
| eval Alert_name=""GCR - Virus - Server is Infected with Virus (PA)"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| lookup servercidrlookup ip as src_ip output name as src_asset_name 
| search src_asset_name!=""*文件*"" AND src_asset_name!=""*file*"" AND dest_asset_name!=""*文件*"" AND dest_asset_name!=""*file*"" 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_asset_name,src_country,src_port,src_user,user,src_zone,dest_ip,dest_location,dest_asset_name,dest_port,dest_zone,dvc_name,file_name,url,rule,severity,signature,threat
| eventstats values(dest_ip) as IPList 
| eval IPList=mvjoin(IPList,"" , "") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList"" 
| fields - Alert_name Trigger_Time",
GCR - Virus - VP Computer Is Infected With Virus,1,AmwayGcrSec,"`GCR_Events_Virus_EndPoint` 
| rename dest as Computername 
| rex field=hostname ""(?<Computername>\w+)\.\w+\.\w+\.\w+"" 
| eval computername=lower(Computername) 
| lookup Director_Computers.csv computername output Tag 
| lookup VP_computers.csv computername output Status 
| search Status=enable OR Tag=dc 
| eval Alert_name=""GCR - Virus - VP Computer Is Infected With Virus"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name Trigger_Time _time action vendor_product user region severity category signature process file_name file_path vendor_action hostname username src_country product engine_version event_description signature_version src_ip src_dns dest_ip dest_nt_host 
| lookup servercidrlookup ip as dest_ip output name as dest_asset_name 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList"" 
| fields - Alert_name,Trigger_Time",
GCR - Web - [Critical] New LoginCenter Successful Login to Many Different Account,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList_New"" Alert_name=""GCR - Web - [Critical] New LoginCenter Successful Login to Many Different Account"" AND src_ip!=10.* NOT (AppID=amwaylivestream AND src_ip=58.248.178.103)
| eval u_t_time=strptime(Trigger_Time,""%F %T"") 
| eval d_time=now()-u_t_time 
| eventstats dc(Trigger_Time) as alert_count by src_ip 
| where alert_count=1 
| where d_time<=181 
| table _time AppID Ada Result ChannelID  src_ip cdn_ip ali_ip  City Region Country",
GCR - Web - [Critical] New LoginCenter Successful Login to Many Different Account OutputList,1,AmwayGcrSec,"eventtype=""accllogincenter"" Result=SUCCESS  |rex field=RequestIp ""(?<src_ip>[^\,]+)\,*\s*(?<cdn_ip>[^\,]*)\,*\s*(?<ali_ip>[^\,]*)"" |search `GCR_List_IP_logincenter_Exception(src_ip)` AND src_ip!=10.*  NOT (AppID=amwaylivestream AND src_ip=58.248.178.103)
| eventstats dc(Ada) as count by src_ip 
| where count>=20 
| iplocation src_ip 
| table _time AppID Ada Result ChannelID src_ip  cdn_ip ali_ip City Region Country  
| eval Alert_name=""GCR - Web - [Critical] New LoginCenter Successful Login to Many Different Account"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList_New""",
GCR - Web - Attempt Attack (Administrator),1,AmwayGcrSec,"`GCR_Events_ApplicationLog` 
    AND req=""*admin*""
    AND src!=10.*
    AND request!=""/callers/ConAdmin.aspx""
    AND request!=""/EDI_WEB_ADMIN/*""
    AND request!=""*wechatframework/*""
    AND request!=""/push2customsForAdmin?orderCodes=*""
    AND request!=""/solr/dev/admin/""
    AND req!=""*/careers/admin*""
    AND req!=""/ccwebsite*""
    AND req!=""*/Courses/*""
    AND req!=""*.gfi""
    AND request_filename!=""*.svg""
    AND request_filename!=""*.js""
    AND req!=""*/content/china/accl/qrcodedeadmin.html""
    AND req!=""/DriveRegister/admin*""
    AND req!=""/cmsAdmin/*""
    AND req!=""/front/MainPageAction/admin.do""
    AND req!=""/*wechatframework/*""
    AND req!=""/wechatframework-binder/resources/admin/js/jquery.js*""
    AND referer!=""*/lms-china.intranet.local/madmin/*""
    AND referer!=""https://servicewechat.com/wx7c293700498579cd/*""
    AND referer!=""https://servicewechat.com/wx291322f17bdfd90c/*""
    AND dhost!=weixin-qa.amwaynet.com.cn
    AND dhost!=cp-manager.amwaynet.com.cn
    AND dhost!=zhibo.amway.com.cn
    AND dhost!=supplychaincontroltower.amway.com.cn
    AND dhost!=toybank.amway.com.cn
| lookup servercidrlookup ip as dst output name as dest_ip_zone 
| fillnull value=null dest_ip_zone
| search dest_ip_zone!=""Wechat Ordering*"" AND dest_ip_zone!=""DCP*"" AND dest_ip_zone!=""AA Workshop Web*"" 
| eval Alert_name=""GCR_Web_Web_Attempt_Attack_(Administrator)"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| iplocation src 
| rename City as src_city,Country as src_country 
| rename req as request_filename 
| table Alert_name Trigger_Time _time time sourcetype src shost sourceTranslatedAddress src_city src_country dst destinationTranslatedAddress dhost requestMethod cat request request_filename referer dpt 
| eval request=urldecode(urldecode(request)) 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList""",
GCR - Web - Attempt Attack (CGI Vulnerablity),1,AmwayGcrSec,"`GCR_Events_Web_CGIVulnerabilityAttemptAttack` 
| eval Alert_name=""Web_Attempt_Attack_(CGI Vulnerablity)"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| iplocation src 
| rename City as src_city,Country as src_country 
| rename req as request_filename 
| table Alert_name Trigger_Time _time time sourcetype src shost sourceTranslatedAddress src_city src_country dst destinationTranslatedAddress dhost requestMethod cat request request_filename referer dpt 
| eval request=urldecode(urldecode(request)) 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList""",
GCR - Web - Attempt Attack (others),1,AmwayGcrSec,"`GCR_Events_ApplicationLog` src=""*"" 
    dhost!=""pd.amway.com.cn"" AND dhost!=""pd.amway.com.tw""
    NOT(`ACCL_List_IP_DCPServer(dst)`)
    ((req=""*.ini"" req!=""/contenthr/*"" req!=""*/aicc/template/template.ini"")
    OR req=""*.abt""
    OR req=""*.log""
    OR req=""*.cfg""
    OR req=""*.cfm""
    OR req=""*.sh""
    OR (req=""*.bak"" dhost!=hkecommerce.amwaynet.com.cn)
    OR req=""*.abt""
    OR req=""*.conf""
    OR req=""*.abt""
    OR reqMethod=""scanner""
    OR reqMethod=""lock""
    OR reqMethod=""delete""
    OR reqMethod=""tarce""
    OR (req=""*/..*"" req!=""/EBIZWAP/*"")
    OR req=""*.bin""
    OR req=""*.dll"" )
    AND (NOT `GCR_Events_Web_CrossSiteScripting` NOT `GCR_Events_Web_CGIVulnerabilityAttemptAttack`)
    AND req!=""*.swf""
    AND req!=""*.exe""
    AND req!=""*.xsd""
    AND req!=""*/manage*""
    AND req!=""*admin*""
    AND (NOT (dhost=pd.amway.com.cn req=""*accesibility_refreshScreenReadBufferField=*"")) 
| eval Alert_name=""Web_Attempt_Attack_(others)"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| iplocation src 
| rename City as src_city,Country as src_country 
| rename req as request_filename 
| eval request=urldecode(urldecode(request)) 
| table Alert_name Trigger_Time _time time sourcetype src shost sourceTranslatedAddress src_city src_country dst destinationTranslatedAddress dhost requestMethod cat request request_filename referer dpt 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList""",
GCR - Web - Attempt Attack (Password),1,AmwayGcrSec,"`GCR_Events_ApplicationLog`
    (request=""*.pwd*"" OR request=""*.pw*"" OR request=""*/iisadmpwd/*"" OR request=""*.passwd*"" OR request=""*asp::*"" OR (request=""*method=to*"" AND request=""*password*""))
    AND req=""*.htm*"" 
    AND req=""*.html"" 
    AND req=""*.aspx"" 
    AND req=""*.asp"" 
    AND req=""*.swf"" 
    AND req=""*.jsp"" 
| eval Alert_name=""Web_Attempt_Attack_(password)"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| iplocation src 
| rename City as src_city,Country as src_country 
| rename req as request_filename 
| table Alert_name Trigger_Time _time time sourcetype src shost sourceTranslatedAddress src_city src_country dst destinationTranslatedAddress dhost requestMethod cat request request_filename referer dpt 
| eval request=urldecode(urldecode(request)) 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList""",
GCR - Web - Cross Site Scripting,1,AmwayGcrSec,"`GCR_Events_Web_CrossSiteScripting` NOT (src=10.140.20.63 OR src=10.140.20.42) NOT (`GCR_List_IP_FirewallGateway(src)`) 
| eval Alert_name=""Web_Cross_Site_Scripting"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| iplocation src 
| rename City as src_city,Country as src_country 
| rename req as request_filename 
| eval request=urldecode(urldecode(request)) 
| table Alert_name Trigger_Time _time time sourcetype src shost sourceTranslatedAddress src_city src_country dst destinationTranslatedAddress dhost requestMethod cat request request_filename referer dpt 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList""",
GCR - Web - Java Struts2 Remote Command Execution Attack,1,AmwayGcrSec,"`GCR_Events_Web_JavaStruts2RemoteCommandExecutionAttack` 
| eval Alert_name=""Web_Java_Struts2_Remote_Command_Execution_Attack"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| iplocation src 
| rename City as src_city,Country as src_country 
| rename req as request_filename 
| eval request=urldecode(urldecode(request)) 
| table Alert_name Trigger_Time _time time sourcetype src shost sourceTranslatedAddress src_city src_country dst destinationTranslatedAddress dhost requestMethod cat request request_filename referer dpt 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList""",
GCR - Web - Maybe Successful Compromise,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=GCR_WebAttack_Alert_OutputList Alert_name!=""GCR - Web - Maybe Successful Compromise"" 
| fillnull value=""-"" 
| search 
    ( NOT `GCR_List_IP_CUCC(src)` 
    AND NOT `GCR_List_IP_CTCC(src)` 
    AND src!=162.223.124.2*  
    AND cat=2*
    AND ( NOT (`GCR_List_IP_VAScanner(src)`))
    AND dhost!=""www.amwaucti.com""
    AND request_filename!=""*/..*""
    AND ( NOT (dhost=pd.amway.com.cn request=""*accesibility_refreshScreenReaderBufferField=*"")) 
    AND `GCR_List_IP_WebCompromise_Exception(dst)` )

| rename cat as statuscode 
| rename dst as ip 
| lookup networkcidrlookup ip OUTPUT region name 
| eval dest_ip_zone=region+ "" "" +name 
| lookup servercidrlookup ip output name as dest_app_name 
| rename ip as dst 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eventstats values(src) as IPList 
| eval IPList=mvjoin(IPList,"" , "") 
| rename Alert_name as basis_rule 
| table Trigger_Time _time time orig_sourcetype src shost sourceTranslatedAddress src_city src_country dst dest_app_name dest_ip_zone destinationTranslatedAddress dhost requestMethod statuscode request_filename request referer IPList dpt basis_rule 
| eval Alert_name=""GCR - Web - Maybe Successful Compromise"" 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList"" | lookup GCR_Domain_Asset.csv domainName as dhost OUTPUT Application,""IT Contact Point"" as IT_contact, CloudID as cloud_id
| table time orig_sourcetype src shost sourceTranslatedAddress src_city src_country dst dpt dest_app_name dest_ip_zone destinationTranslatedAddress dhost Application IT_contact cloud_id requestMethod statuscode request_filename request referer IPList basis_rule 
| rename orig_sourcetype as source_type",
GCR - Web - Maybe Successful Compromise Report,1,AmwayGcrSec,"index=""output-gcr"" Alert_name=""GCR - Web - Maybe Successful Compromise"" | table time orig_sourcetype src shost sourceTranslatedAddress src_city src_country dst dpt AssetName Dest_Zone_Name  dhost requestMethod statuscode request referer",None
GCR - Web - New LoginCenter Failed Login to Many Different Account,1,AmwayGcrSec,"eventtype=accllogincenter Result=FAIL  |rex field=RequestIp ""(?<src_ip>[^\,]+)\,*\s*(?<cdn_ip>[^\,]*)\,*\s*(?<ali_ip>[^\,]*)"" |search `GCR_List_IP_logincenter_Exception(src_ip)`
| eventstats dc(Ada) as count by src_ip
| where count>=20 
| iplocation src_ip 
| table _time AppID Ada Result ChannelID src_ip cdn_ip ali_ip City Region Country
| eval Alert_name=""GCR - Web - New LoginCenter Failed Login to Many Different Account"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList_New"" 
| fields - Trigger_Time Alert_name",
GCR - Web - Spring Component Or Cloud Service Access,1,AmwayGcrSec,"`GCR_Events_ApplicationLog` 
    AND req=""*swagger-ui.html""
    OR req=""*/actuator/*""
    OR request_filename=""*swagger-ui.html""
    OR request_filename=""*/actuator/*""
    OR request_filename=""*/actuator/*""
    OR request_filename=""*/druid/*""   
| lookup servercidrlookup ip as dst output name as dest_ip_zone 
| fillnull value=null dest_ip_zone
| eval Alert_name=""GCR - Web - Spring Component Or Cloud Service Access"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| iplocation src 
| rename City as src_city,Country as src_country 
| rename req as request_filename 
| table Alert_name Trigger_Time _time time sourcetype src shost sourceTranslatedAddress src_city src_country dst destinationTranslatedAddress dhost requestMethod cat request request_filename referer dpt 
| eval request=urldecode(urldecode(request)) 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList""",
GCR - Web - SQL Injection Activity,1,AmwayGcrSec,"`GCR_Events_ApplicationLog` request!=""*@2x.png""
    AND ( (request=""*select20%*"" AND request=""*from*"")
    OR (request=""*select*"" AND request=""*@*"" AND request!=""*selective*"" AND request!=""*/select*"" )
    OR (request=""*declare*"" AND request=""*@*"" )
    OR request=""*or 1=1*""
    OR request=""*'having*""
    OR request=""*;insert*""
    OR request=""*;delete*""
    OR request=""*;update*""
    OR request=""*;drop*""
    OR request=""*;truncate*""
    OR request=""*;declare*""
    OR request=""*exec(@*""
    OR request=""*xp_cmdshell*""
    OR request=""*xp_subdirs*""
    OR request=""*;exec*""
    OR request=""*and 1=*""
    OR request=""*or +'*""
    OR request=""*and exists*""
    OR request=""*WAITFOR DELAY*""
    OR request=""*--&Title=2&Category=3*""
    OR (request=""*sysdate*"" AND request=""*now*"")
    OR (request=""*select*"" AND request=""*sleep*"")
    OR (request=""*case when*"" AND request=""*then*""))
    AND (NOT `GCR_Events_Web_JavaStruts2RemoteCommandExecutionAttack` AND req!=""/courses/app/*"" AND request!=""*?_VIEWSTATE=*"")
    src!=10.143.20.63 
| eval Alert_name=""Web_Sql_Injection_Activity"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| iplocation src 
| rename City as src_city,Country as src_country 
| rename req as request_filename 
| eval request=urldecode(urldecode(request)) 
| table Alert_name Trigger_Time _time time sourcetype src shost sourceTranslatedAddress src_city src_country dst destinationTranslatedAddress dhost requestMethod cat request request_filename referer dpt 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList""",
GCR - Web - Torjan or Execution Activity,1,AmwayGcrSec,"`GCR_Events_ApplicationLog`
    AND ( (req!=""*/voting/voting/1.aspx*"" AND req=""*/1.asp*"")
    OR (req=""*/1a.*"" AND req!=""*.mp3"" AND req!=""*.swf"")
    OR req=""*.asa""
    OR req=""*/ri.asp*""
    OR req=""*/s.asp*""
    OR req=""*cmdshell*""
    OR req=""*configdir=*""
    OR req=""*.w3chelp.dll""
    OR (req=""*isapi.dll"" AND host!=CNPWS00086)
    OR req=""*.asp;.*""
    OR req=""*.cer;.*""
    OR req=""*.asp.*""
    OR req=""*.cer.*""
    OR ( req=""*.war"" AND (dst!=10.198.168.25 AND dst!=10.198.168.26) ))
    AND NOT `GCR_Events_Web_CrossSiteScripting` 
| eval Alert_name=""Web_Torjan_or_Execution_Activity"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| iplocation src 
| rename City as src_city,Country as src_country 
| rename req as request_filename 
| eval request=urldecode(urldecode(request)) 
| table Alert_name Trigger_Time _time time sourcetype src shost sourceTranslatedAddress src_city src_country dst destinationTranslatedAddress dhost requestMethod cat request request_filename referer dpt 
| eventstats values(src) as IPList 
| eval IPList=mvjoin(IPList,"" , "") 
| collect index=""output-gcr"" sourcetype=""GCR_WebAttack_Alert_OutputList""",
GCR - Web - Website Attack Rules Statistics,1,AmwayGcrSec,"index=""output-gcr"" sourcetype=GCR_WebAttack_Alert_OutputList
    NOT `GCR_List_IP_VAScanner(src)` NOT `GCR_List_IP_FirewallGateway(src)` cat!=2* 
| eval Date=substr(Trigger_Time,0,7) 
| rename dst as Target_Address 
| stats count by Date Alert_name Target_Address 
| sort -count",
GCR - XDR - [High&Medium] Abnormal Process Alert,1,AmwayGcrSec,"index=cortex_xdr_alert severity=medium NOT ""events{}.actor_process_instance_id""=null (severity=high OR severity=medium)  host_name=cn*
| eval time = strftime(_time,""%F %H:%M:%S"") 
| rename host_ip{} as host_ip 
```| search `GCR_List_Segment_ServerFarm(host_ip)` ```
| stats values(time) as time values(agent_os_type) as agent_os_type values(agent_fqdn) as agent_fqdn values(category) as category values(events{}.user_name) as user_name values(events{}.action_remote_ip) as action_remote_ip values(severity) as severity values(events{}.actor_process_command_line) as actor_process_command_line values(events{}.actor_process_signature_vendor) as actor_process_signature_vendor values(description) as description count by host_ip , host_name 
| where count > 1 
| lookup servercidrlookup ip as host_ip output name as src_asset_name 
| lookup networkcidrlookup ip as host_ip output name as src_ip_zone 
| table time host_ip host_name severity agent_os_type agent_fqdn category user_name action_remote_ip actor_process_command_line actor_process_signature_vendor description",
GCR - XDR - [High&Medium] Abnormal Process Alert Outputlist,1,AmwayGcrSec,"index=cortex_xdr_alert severity=medium NOT ""events{}.actor_process_instance_id""=null (severity=high OR severity=medium)  host_name=cn*
| eval time = strftime(_time,""%F %H:%M:%S"") 
| rename host_ip{} as host_ip 
```| search `GCR_List_Segment_ServerFarm(host_ip)` ```
| stats values(time) as time values(agent_os_type) as agent_os_type values(agent_fqdn) as agent_fqdn values(category) as category values(events{}.user_name) as user_name values(events{}.action_remote_ip) as action_remote_ip values(severity) as severity values(events{}.actor_process_command_line) as actor_process_command_line values(events{}.actor_process_signature_vendor) as actor_process_signature_vendor values(description) as description count by host_ip , host_name 
| where count > 1 
| lookup servercidrlookup ip as host_ip output name as src_asset_name 
| lookup networkcidrlookup ip as host_ip output name as src_ip_zone 
| table time host_ip host_name severity agent_os_type agent_fqdn category user_name action_remote_ip actor_process_command_line actor_process_signature_vendor description 
| collect index=""output-gcr"" sourcetype=""gcr_xdr_alert_outputlist""",
GCR - XDR - [High] XDR Alert Correlation Firewall Malicious URL Outbound Access,1,AmwayGcrSec,"index=""output-gcr"" search_name=""GCR - XDR * Alert Outputlist"" 
| join type=inner src 
    [ search index=pan_logs tag=gcr_pan sourcetype=""pan:threat"" log_subtype=url action=""blocked"" earliest=-10m latest=now 
    | eval time = strftime(_time,""%F %H:%M:%S"") 
    | where category IN (""block malware host"",""ScanTools"",""malware"",""hacking"",""command-and-control"",""phishing"") 
    | table time src category dest] 
| lookup servercidrlookup ip as src output name as src_asset_name 
| lookup networkcidrlookup ip as src output name as src_ip_zone 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - XDR - XDR Alert Correlation Firewall Malicious URL Outbound Access"" 
| table time xdr_url src src_asset_name src_ip_zone category dest 
| collect index=""output-gcr"" sourcetype=""gcr_xdr_alert_outputlist""",
GCR - XDR - [High] XDR High Risk Alert,1,AmwayGcrSec,"index=cortex_xdr sourcetype=pan:xdr_incident (severity=high OR critical_severity_alert_count!=0) 
| rex field=hosts{} ""(?<src>.*):\w+"" 
| search `GCR_List_Segment_Network_All(src)` OR src=cn* OR src=tw* OR src=hk* 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| eval src=upper(src) 
| rename src as host_name 
| append 
    [ search index=""cortex_xdr_alert"" sourcetype=cortex:xdr:alerts severity=high 
    | search `GCR_List_Segment_Network_All(host_name)` OR host_name=cn* OR host_name=tw* OR host_name=hk* 
    | search NOT `GCR_Events_XDR_Command_Exception` 
    | eval time = strftime(_time,""%F %H:%M:%S"") 
        ] 
| stats values(xdr_url) as xdr_url values(description) as description values(alert_categories{}) as alert_categories values(assigned_user_mail) as assigned_user_mail values(notes) as notes values(severity) as severity values(events{}.user_name) as user_name values(events{}.actor_process_command_line) as command_line values( events{}.action_remote_ip) as remote_ip values(mac) as mac count by host_name,time 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| search `GCR_List_Segment_Network_All(host_name)` OR host_name=cn* OR host_name=tw* OR host_name=hk* 
| table time host_name mac severity user_name src_asset_name src_ip_zone description command_line remote_ip alert_categories xdr_url assigned_user_mail notes",
GCR - XDR - [High] XDR High Risk Alert Outputlist,1,AmwayGcrSec,"index=cortex_xdr sourcetype=pan:xdr_incident (severity=high OR critical_severity_alert_count!=0) 
| rex field=hosts{} ""(?<src>.*):\w+"" 
| search `GCR_List_Segment_Network_All(src)` OR src=cn* OR src=tw* OR src=hk* 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| eval src=upper(src) 
| rename src as host_name 
| append 
    [ search index=""cortex_xdr_alert"" sourcetype=cortex:xdr:alerts severity=high 
    | search `GCR_List_Segment_Network_All(host_name)` OR host_name=cn* OR host_name=tw* OR host_name=hk* 
    | search NOT `GCR_Events_XDR_Command_Exception` 
    | eval time = strftime(_time,""%F %H:%M:%S"") 
        ] 
| stats values(xdr_url) as xdr_url values(description) as description values(alert_categories{}) as alert_categories values(assigned_user_mail) as assigned_user_mail values(notes) as notes values(severity) as severity values(events{}.user_name) as user_name values(events{}.actor_process_command_line) as command_line values( events{}.action_remote_ip) as remote_ip values(mac) as mac count by host_name,time 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| search `GCR_List_Segment_Network_All(host_name)` OR host_name=cn* OR host_name=tw* OR host_name=hk* 
| table time host_name mac severity user_name src_asset_name src_ip_zone description command_line remote_ip alert_categories xdr_url assigned_user_mail ```notes```
| collect index=""output-gcr"" sourcetype=""gcr_xdr_alert_outputlist""",
GCR - XDR - [Low] Abnormal Process Alert Outputlist,1,AmwayGcrSec,"index=cortex_xdr sourcetype=pan:xdr_incident severity=low low_severity_alert_count!=0 
| rex field=description ""'(?<casename>.*).*'"" 
| where LIKE(casename,""%proecss%"") 
| rex field=hosts{} ""(?<host_name>.*):\w+"" 
| eval Alert_name=""GCR - XDR - [Low] Abnormal Process Alert Outputlist"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(xdr_url) as xdr_url values(description) as description values(alert_categories{}) as alert_categories values(assigned_user_mail) as assigned_user_mail values(notes) as notes values(severity) as severity count by host_name 
| where dc > 3 
| lookup servercidrlookup ip as host_name output name as src_asset_name 
| lookup networkcidrlookup ip as host_name output name as src_ip_zone 
| table time host_name severity  src_asset_name  src_ip_zone alert_categories xdr_url assigned_user_mail notes
| collect index=""output-gcr"" sourcetype=""gcr_xdr_alert_outputlist""",
GCR - XDR - [Medium&Low] XDR Medium and Low Risk Alert Outputlist,1,AmwayGcrSec,"index=cortex_xdr sourcetype=pan:xdr_incident (severity=medium OR severity=low ) 
| rex field=hosts{} ""(?<host_name>.*):\w+"" 
| search `GCR_List_Segment_Network_All(host_name)` OR host_name=cn* OR host_name=tw* OR host_name=hk* 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(xdr_url) as xdr_url values(description) as description values(alert_categories{}) as alert_categories values(assigned_user_mail) as assigned_user_mail values(notes) as notes values(severity) as severity count by host_name 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| where count > 2 
| eval Alert_name=""GCR - XDR - [Medium&Low] XDR Medium and Low Risk Alert Outputlist"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| lookup servercidrlookup ip as host_name output name as src_asset_name 
| lookup networkcidrlookup ip as host_name output name as src_ip_zone 
| table time host_name severity src_asset_name src_ip_zone description alert_categories xdr_url assigned_user_mail notes 
| collect index=""output-gcr"" sourcetype=""gcr_xdr_alert_outputlist""",
GCR- Virus - TOP 20 Statistics Report,1,AmwayGcrSec,"((index=sccm sourcetype=scep_china vendor_product=SystemCenterEndpointProtection ) OR (index=mcafee (category=""av.detect"" OR category=""av.pup"") ( source=Mcafee_China_EPO OR source=Mcafee_ATL_EPO )) ) 
| top signature showperc=false",None
Generate posix_identities lookup,16,TA-linux_auditd,"| inputlookup directory_posix_identities | eval source=""directory"" | append [|inputlookup local_posix_identities | eval source=""local""] | append[|inputlookup learnt_posix_identities | rename _key as uid | search NOT uid=4294967295 | eval source=""learnt""] | eventstats dc(user) as dc by uid | eval user=if(dc>1,uid,user) | dedup uid | table uid user | sort 0 +uid | outputlookup posix_identities",None
Geographically Improbable Access,1,InfoSec_App_for_Splunk,"| tstats summariesonly=true allow_old_summaries=true values(Authentication.app) as app from datamodel=Authentication.Authentication by Authentication.user, Authentication.src _time span=1s 
| rename ""Authentication.*"" as ""*"" 
| eventstats dc(src) as src_count by user 
| search src_count>1 
| sort 0 + _time 
| iplocation src 
| where isnotnull(lat) AND isnotnull(lon) 
| streamstats window=2 global=false earliest(lat) as prev_lat, earliest(lon) as prev_lon, earliest(_time) as prev_time, earliest(src) as prev_src, earliest(City) as prev_city, earliest(Country) as prev_country, earliest(app) as prev_app by user 
| where (src != prev_src) 
| eval lat1_r=((lat * 3.14159265358) / 180), lat2_r=((prev_lat * 3.14159265358) / 180), delta=(((prev_lon - lon) * 3.14159265358) / 180), distance=(3959 * acos(((sin(lat1_r) * sin(lat2_r)) + ((cos(lat1_r) * cos(lat2_r)) * cos(delta))))), distance=round(distance,2) 
| fields - lat1_r, lat2_r, long1_r, long2_r, delta 
| eval time_diff=if((('_time' - prev_time) == 0),1,('_time' - prev_time)), speed=round(((distance * 3600) / time_diff),2) 
| where (speed > 500) 
| eval prev_time=strftime(prev_time,""%Y-%m-%d %H:%M:%S"")
| table user, src, _time, City, Country, app, prev_src, prev_time, prev_city, prev_country, prev_app, distance, speed",
Global - Audit -  [High]Okta Account Password Brute Force Last For One Hour,1,AmwayGcrSec,"index=""output-gcr"" search_name=""Global - Audit - Okta Brute Force Login Failure Outputlist"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eventstats count by src_ip 
| where count >15 
| stats values(alternateId) as alternateId values(action) as action values(username) as username values(result) as result values(city) as city values(country) as country values(credentialType) as credentialType values(browser) as browser values(userAgentos) as userAgentos values(behaviors) as behaviors values(reason) as reason count by src_ip,time 
| table time src_ip username alternateId action result credentialType reason country city browser userAgentos behaviors 
| eval Alert_name=""Global - Audit -  [High] Okta Account Password Brute Force Last For One Hour"" 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",some
Global - Audit - [High] VPN Login Brute Force Last For One Hour,1,AmwayGcrSec,"index=""output-gcr"" search_name=""Global - Audit - VPN Brute Force Login Failure Outputlist"" 
| stats values(time) as time values(src_users) as src_user values(objects) as object values(descriptions) as description values(dvc) as dvc count by src_ip 
| where count >3 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""Global - Audit - [High] VPN Login Brute Force Last For One Hour"" 
| table time src_user src_ip dvc object description 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",some
Global - Audit - Okta Brute Force Login Failure Outputlist,1,AmwayGcrSec,"index=okta-corp event_type=okta_event_authentication eventType=""user.authentication.auth_via_AD_agent"" outcome.result=""FAILURE"" 
| rename outcome.result as result 
| foreach * 
    [ rex field=result mode=sed ""s/FAILURE/failedbefore/g""] 
| lookup GCR_Global_Internet_IP_range public_ip_range as src_ip OUTPUT gateway_location 
| fillnull value=NULL gateway_location 
| search gateway_location=""NULL"" 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| eventstats  count by src_ip 
| where count >4 
| stats values(client.ipAddress) AS src values(target{}.displayName) as username values(target{}.alternateId) as  alternateId values(action) as action values(result) as result values(client.geographicalContext.city) as city values(client.geographicalContext.country) as country values(authenticationContext.credentialType) as credentialType values(client.userAgent.browser) as browser values(client.userAgent.os) as userAgentos values(debugContext.debugData.behaviors) as behaviors values(outcome.reason) as reason count by  src_ip, time
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""Global - Audit - Okta Brute Force Login Failure Outputlist"" 
| table time src_ip username alternateId action result credentialType reason country city browser userAgentos behaviors 
| collect index=""output-gcr"" sourcetype=""gcr_okta_alert_outputlist""",some
Global - Audit - Okta Brute Force Login Success(5/5),1,AmwayGcrSec,"index=""output-gcr"" sourcetype=""gcr_okta_alert_outputlist"" Alert_name=""Global - Audit - Okta Brute Force Login Failure Outputlist"" 
| append 
    [ search index=okta-corp event_type=okta_event_authentication eventType=""user.authentication.auth_via_AD_agent"" outcome.result=""SUCCESS"" 
    | rename outcome.result as result 
    | foreach * 
        [ rex field=result mode=sed ""s/SUCCESS/successed/g""] ] 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(target{}.displayName) as username  values(result) as result dc(result) as dc values(client.geographicalContext.city) as city values(client.geographicalContext.country) as country values(authenticationContext.credentialType) as credentialType values(client.userAgent.browser) as browser values(client.userAgent.os) as userAgentos values(debugContext.debugData.behaviors) as behaviors values(outcome.reason) as reason count by src_ip 
| where dc=2 
| lookup Global_Internet_SubNet_List.csv Client as ClientIP 
| lookup Global_Internet_IP_List.csv Client as ClientIP 
| lookup GCR_Internet_IP_List.csv CIDR as ClientIP 
| search NOT src_ip IN(NULL,ClientIP) 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""Global - Audit - Okta Brute Force Login Success(5/5)""   
| table time src_ip username result credentialType reason country city browser userAgentos behaviors 
| collect index=""output-gcr"" sourcetype=""gcr_okta_alert_outputlist""",some
Global - Audit - VPN Brute Force Login Failure Outputlist,1,AmwayGcrSec,"index=pan_logs tag=gcr_pan sourcetype=pan:system log_subtype=globalprotect ""tag::eventtype""=authentication action=""failure"" ""Invalid username or password"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""Global - Audit - VPN Brute Force Login Failure Outputlist"" 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats values(time) as time values(src_user) as src_users values(object) as objects values(description) as descriptions values(dvc) as dvc count by src_ip 
| where count > 4 
| table time src_users src_ip dvc objects descriptions 
| collect index=""output-gcr"" sourcetype=""gcr_audit_alert_outputlist""",some
Global - Phishing - [High]Outbound Phishing Email Detection,1,AmwayGcrSec,"index=proofpoint quarantineRule=outbound_phish sender!="""" fromAddress{}!=postmaster@amway.com headerFrom!=""<postmaster@Amway.com>"" 
| eval time = strftime(_time,""%F %H:%M:%S"") 
| stats ```values(time) as time ``` values(toAddresses{) as toAddresses{} values(recipient{}) as recipient{} values(threatsInfoMap{}.threatUrl) as urls values(fromAddress{}) as fromAddress{} values(spamScore) as spamScore values(sender) as sender values(quarantineRule) as quarantineRule values(eventType) as eventType values(threatsInfoMap{}.threat) as threatsInfoMap{}.threats count by senderIP, time 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""Global - Phishing - [High]Outbound Phishing Email Detection"" 
| table time sender senderIP eventType recipient{} quarantineRule spamScore urls threatsInfoMap{}.threats 
| collect index=""output-gcr"" sourcetype=""gcr_phishing_alert_outputlist""",
Global - Phishing - ProofPoint Blocked Source IP Outputlist,1,AmwayGcrSec,"index=proofpoint threatsInfoMap{}.threatType=""url"" phishScore >60 eventType=messagesBlocked 
| stats values(fromAddress{}) as fromAddress values(messageTime) as messageTime values(subject) as subject values(sender) as sender values(recipient{}) as recipient values(eventType) as eventType values(phishScore) as phishScore count by senderIP 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""Global - Phishing - ProofPoint Blocked Source IP Outputlist"" 
| table messageTime fromAddress subject sender senderIP recipient eventType phishScore 
| collect index=""output-gcr"" sourcetype=""gcr_proofpoint_alert_outputlist""",
Global - Phishing - ProofPoint Clicked Phishing URL Allowed By Firewall,1,AmwayGcrSec,"index=proofpoint classification=phish eventType=clicksPermitted 
| rename url as fullurl 
| rex field=fullurl ""http[s]?://(?<url_domain>.*?)/.*"" 
| stats values(senderIP) as senderIP values(recipient) as recipient values(fullurl) as fullurl count by clickIP 
| join type=inner url_domain 
    [ search index=pan_logs log_subtype=url action=""allowed"" 
    | where NOT cidrmatch(""192.168.0.0/16"", dest_ip) AND NOT cidrmatch(""10.0.0.0/8"", dest_ip) AND NOT cidrmatch(""172.16.0.0/12"", dest_ip) 
        ] 
| stats values(senderIP) as senderIPs values(recipient) as recipients values(fullurl) as fullurl values(category) as categorys values(client_ip) as client_ips values(action) as actions 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""Global - Phishing - ProofPoint Phishing URL Clicked"" 
| collect index=""output-gcr"" sourcetype=""gcr_Phishing_alert_outputlist""",
HDSI - ES - Alerting,1,SplunkEnterpriseSecuritySuite,"`notable` | search rule_name IN (""HDSI Heartbeat"", ""Hurricane Maintenance Complete"", ""Hurricane Webhook Test Complete"") OR NOT (`suppression` OR urgency=""informational"")
| lookup hdsi_es_alerting.csv rule_name OUTPUT should_alert
| search should_alert=""yes"" OR should_alert=""phantom"" OR should_alert=""tuning"" OR rule_name IN (""HDSI Heartbeat"", ""Hurricane Maintenance Complete"", ""Hurricane Webhook Test Complete"")
| eval webhook_tags=case(should_alert==""phantom"", ""do_not_alert"", should_alert=""tuning"", ""tuning"", true(), ""soc_alert"")
| fields - should_alert
| expandtoken drilldown_name,drilldown_search,rule_description,rule_title
| convert ctime(_time) AS timestamp
| fields - _* comment default_owner default_status eventtype host index index_guid info_*_time owner* review_time reviewer search_now source sourcetype splunk_server* status* suppression tag* *_asset_id *_is_expected *_pci_domain *_requires_av *_should_timesync *_should_update
| lookup dnslookup clientip AS src OUTPUTNEW clienthost AS src_dns
| lookup dnslookup clientip AS dest OUTPUTNEW clienthost AS dest_dns
| table *
| dedup 20 rule_name",
HDSI alerting failed,1,search,"index=_* savedsearch_name=""HDSI - ES - Alerting"" status=skipped reason=""The maximum number of concurrent running jobs for this historical scheduled search on this instance has been reached""",
HDSI Auto SNOW Ticket to Phantom,1,SplunkEnterpriseSecuritySuite,"_index_earliest=-10m `notable` 
| lookup phantom_auto_snow_ticket.csv rule_name 
| search send_to_phantom=yes
| fields - send_to_phantom 
| expandtoken drilldown_name,drilldown_search,rule_description,rule_title 
| fields - comment default_owner default_status eventtype host index index_guid info_*_time owner* review_time reviewer search_now source sourcetype splunk_server* status* suppression tag* *_asset_id *_is_expected *_pci_domain *_requires_av *_should_timesync *_should_update
| lookup dnslookup clientip AS src OUTPUTNEW clienthost AS src_dns
| lookup dnslookup clientip AS dest OUTPUTNEW clienthost AS dest_dns
| convert ctime(_time) AS timestamp 
| table *
| rename _raw as orig_raw",
HDSI Error in Live HDSI Rule,1,SplunkEnterpriseSecuritySuite,"index=""_internal"" sourcetype=""scheduler"" ""ERROR SavedSplunker"" NOT [search index=_audit TERM(action=splunkShuttingDown) action=splunkShuttingDown | stats min(_time) as minTime max(_time) as maxTime | eval maxTime=maxTime+600 | eval search=""_time>="".minTime."" _time<="".maxTime | table search | format | eval search=replace(search, ""\"""", """")] 
| eval savedsearch_name=mvindex(split(savedsearch_id, "";""), -1) 
| rex field=savedsearch_name ""\s-\s(?<rule_name>.*?)\s-\sRule"" 
| search [| inputlookup hdsi_es_alerting.csv | search should_alert=yes OR risk_alerting=yes | fields rule_name] 
| eval message=coalesce(message, event_message), rule_name=coalesce(rule_name, savedsearch_name) 
| stats values(message) AS error min(_time) as minTime max(_time) as maxTime count by savedsearch_id rule_name 
| eval message=""Error in live HDSI rule: "".rule_name, failure_duration=maxTime-minTime 
| search NOT (error IN (*macro*, *lookup*) failure_duration<3600) 
| convert ctime(*Time) 
| eval alias=message",
HDSI ES Alerting Summary Search,1,HurricaneCustomerMetrics,"| inputlookup hdsi_es_alerting.csv
| eval orig_time=now()
| eval summary_search=""hdsi_es_alerting_summary""
| table orig_time, comments, implementation_date, in_tuning, risk_alerting, rule_name, should_alert, summary_search
| collect index=summary sourcetype=stash source=""HDSI ES Alerting Summary Search""",
HDSI GCR Asset - Lookup Gen,1,search,"| inputlookup gcr_asset_info.csv | eval ip=if(like(ip, ""%/32""), mvindex(split(ip, ""/""),0), ip) | eval hostname=if(like(hostname, ""NULL""), null, hostname) | eval Owner=if(like(Owner, ""NULL""), null, Owner) | rename name AS category, Owner AS owner, hostname AS dns | fields + category,owner,dns,ip
| join type=outer ip [|inputlookup amwaygcr_list.csv | eval nt_host=lower(amway_hostname) | rename amway_ip AS ip, amway_system AS bunit | fields + nt_host,ip,bunit]
| table ip,mac,nt_host,dns,owner,priority,lat,long,city,country,bunit,category,pci_domain,is_expected,should_timesync,should_update,requires_av
| outputlookup hdsi_gcr_assets.csv",None
HDSI HL correlation audit - lookup gen,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local count=0 /servicesNS/-/-/saved/searches
| search action.correlationsearch.enabled=""*"" disabled=0 action.notable=1 
| rename action.correlationsearch.label AS rule_name
| rename eai:acl.app as app, eai:acl.owner as author, title as csearch_name, rule_name as csearch_label, action.notable.param.security_domain as security_domain
| search NOT [| inputlookup hdsi_es_alerting.csv | search should_alert=no | rename rule_name AS csearch_label | fields csearch_label] AND NOT [|inputlookup HL_correlation_audit.csv | fields csearch_name]
| fillnull value=0 count
| table csearch_name, ""Last Modified By"", ""Last Modified Time"", ""Last Modified Epoch"", app, csearch_label, description, author, previous_search, search, security_domain
| lookup hdsi_es_alerting.csv rule_name AS csearch_label output should_alert
| outputlookup append=t HL_correlation_audit.csv",None
HDSI Incorrect Default Notable Status,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local /servicesNS/admin/-/configs/conf-savedsearches
| search action.notable=1 disabled=0 [inputlookup reviewstatuses_lookup | search label=""In Tuning"" | table status | rename status AS action.notable.param.default_status]
| rename action.correlationsearch.label as rule_name, action.notable.param.severity AS severity, action.notable.param.default_status AS default_status
| lookup hdsi_es_alerting.csv rule_name OUTPUT should_alert
| table default_status title rule_name should_alert cron_schedule search description severity
| search should_alert=""yes""
| eval message=""Live correlation search "".rule_name."" has a default notable status of \""In Tuning\""""
| eval alias=message",
HDSI Live HL Alert Disabled,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local /servicesNS/admin/-/configs/conf-savedsearches 
| search disabled=1 
| rename action.correlationsearch.label as rule_name 
| lookup hdsi_es_alerting.csv rule_name 
| search should_alert=yes OR risk_alerting=yes 
| table title rule_name should_alert risk_alerting 
| eval message=""Live correlation search "".rule_name."" in alerting lookup is disabled"" 
| eval alias=message",
HDSI Live HL alert was modified,1,SplunkEnterpriseSecuritySuite,"index=_internal sourcetype=splunkd_ui_access host=""sh-i-*"" method=POST uri=""*%20-%20Rule*"" uri_query=""output_mode=json""
| eval title=urldecode(file)
| rename user as ""Last Modified By"" 
| eval  ""Last Modified Time""=strftime(_time,""%m/%d/%y, %I:%M %p""), ""Last Modified Epoch""=_time
| dedup  title
| table  title ""Last Modified By"", ""Last Modified Time"", ""Last Modified Epoch"" 
| lookup HL_correlation_audit.csv csearch_name AS title output search AS previous_search
| join type=outer title [| rest splunk_server=local count=0 /servicesNS/-/-/saved/searches 
  | search action.correlationsearch.enabled=""*"" disabled=0 action.notable=1 
  | rename action.correlationsearch.label AS rule_name
  | rename eai:acl.app as app, eai:acl.owner as author, rule_name as csearch_label, action.notable.param.security_domain as security_domain
  | fillnull value=0 count
  | table title, author, csearch_label, app, security_domain, description, search]
| rename title as csearch_name
| lookup hdsi_es_alerting.csv rule_name AS csearch_label output should_alert
| where should_alert=""yes"" AND previous_search!=search
| fields - _*
| appendpipe [|inputlookup HL_correlation_audit.csv]
| dedup csearch_name
| sort + csearch_name
| outputlookup HL_correlation_audit.csv
| search [search index=_internal method=POST uri=""*%20-%20Rule*"" uri_query=""output_mode=json"" | eval csearch_name=urldecode(file) | table csearch_name]
| where should_alert!=""no""
| eval message=""Live HL alert was modified by "".'Last Modified By'."" ("".csearch_label."")"", alias=csearch_name."" @ "".'Last Modified Time'
| eval alias=message",
HDSI Lookup Populator - Suppression Changes,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local /services/alerts/suppressions | addinfo
| table title, author, description, search, eai:acl.app, info_min_time, info_max_time
| convert ctime(info_min_time) as info_min_time, ctime(info_max_time) as info_max_time
| rename search as current_search, info_min_time as earliest_time, info_max_time as latest_time
| lookup HL_known_suppression_change.csv title OUTPUT current_search as lookup_search
| eval suppression_modified=if(isnotnull(lookup_search), ""Changed between "".earliest_time."" and "".latest_time, """")
| eval is_new=if(isnull(lookup_search), ""true"", ""false"")
| eval lookup_search=if(isnull(lookup_search), current_search, lookup_search)
| eval change_made=if(current_search!=lookup_search, ""true"", ""false"")
| WHERE change_made=""true"" OR is_new=""true"" | rename lookup_search as previous_search
| eval updated_in_lookup=now()
| fields title, author, description, current_search, previous_search, eai:acl.app, suppression_modified, updated_in_lookup
| eval sort=""1""
| append [| inputlookup HL_known_suppression_change.csv | eval sort=""0""]
| dedup title, author, description | fields - sort
| outputlookup HL_known_suppression_change.csv",
HDSI Mitre Mapping Audit,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local count=0 /servicesNS/-/-/saved/searches
| search action.correlationsearch.enabled=""*""
| rename action.correlationsearch.label AS rule_name
| search [| inputlookup hdsi_es_alerting.csv | search should_alert=yes OR risk_alerting=""yes"" | fields rule_name] `hdsi_mitre_mapping_audit_filter`
| join type=outer title [|rest /services/analyticstories/configs/analytic_story splunk_server=local
| table name, searches | mvexpand searches | eval mitre_mapped=if(isnull(searches),""false"",""true"")
| rename name AS analytic_story_name, searches AS title]
| eval mitre_mapped=if(match('action.correlationsearch.annotations', ""mitre_attack""), ""true"", mitre_mapped)
| fillnull mitre_mapped value=""false""
| table title, rule_name, analytic_story_name, mitre_mapped
| where mitre_mapped=""false""
| eval message=""Live search not mapped to Mitre ("".rule_name."")""
| eval alias=message
| search NOT rule_name=""HDSI Heartbeat""",
HDSI New correlation search configured to alert to HL SOC,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local count=0 /servicesNS/-/-/saved/searches
  | search action.correlationsearch.enabled=""*"" disabled=0 action.notable=1 NOT [inputlookup HL_known_csearches.csv | table csearch_name | rename csearch_name AS title]
  | rename action.correlationsearch.label AS rule_name
  | search action.correlationsearch.enabled=""*"" [| inputlookup hdsi_es_alerting.csv | search should_alert=yes | fields rule_name]
  | eval disabled=case(disabled=0, ""Enabled"", disabled=1, ""Disabled"") 
  | rename eai:acl.app as app, title as csearch_name, rule_name as csearch_label, action.notable.param.security_domain as security_domain, disabled AS ""Current Status"" 
  | fillnull value=0 count
  | table csearch_name, csearch_label, app, security_domain , ""Current Status"", eai:acl.owner, description, search
  | eval first_seen=now()
  | outputlookup append=t HL_known_csearches.csv
  | eval message=""'"".csearch_label.""'""."" now configured to alert HL SOC by "".'eai:acl.owner'
  | eval alias=message",
HDSI Okta Geographically Improbable Access History Retention,1,SplunkEnterpriseSecuritySuite,"| inputlookup hdsi_okta_location_history | where last_day_seen>=relative_time(now(), ""-90d"") | outputlookup hdsi_okta_location_history override_if_empty=f create_empty=f",
HDSI Outbound SMB Detected Report,1,SplunkEnterpriseSecuritySuite,"| tstats `security_content_summariesonly` count earliest(_time) as earliest latest(_time) as latest values(All_Traffic.action) as action values(All_Traffic.dest_port) as dest_port values(All_Traffic.user) as user from datamodel=Network_Traffic where All_Traffic.action!=blocked All_Traffic.dest_category!=internal (All_Traffic.dest_port=139 OR All_Traffic.dest_port=445 OR All_Traffic.app=smb) by All_Traffic.src_ip All_Traffic.dest_ip,_time span=1h | `drop_dm_object_name(""All_Traffic"")` | search (src_ip=10.0.0.0/8 OR src_ip=172.16.0.0/12 OR src_ip=192.168.0.0/16) ( dest_ip!=10.0.0.0/8 AND dest_ip!=172.16.0.0/12 AND dest_ip!=192.168.0.0/16) | `security_content_ctime(earliest)`| `security_content_ctime(latest)` | `detect_outbound_smb_traffic_filter` | sort - count",None
HDSI Prisma Defender Alert,1,search,"index=""prisma"" NOT ""dynatrace-oneagent"" AND ""message.category""=""*""
| rex field=_raw max_match=0 ""(?P<event_block>(Container runtime alert at|Host runtime alert at|Defender health alert at|Kubernetes incident at).+?)(\\n+|Container runtime alert|Host runtime alert|Defender health alert|Kubernetes incident|\"",\"")""
| rex field=event_block ""(Container runtime alert|Host runtime alert|Defender health alert|Kubernetes incident)+\s+at\s+(?P<event_type>.+?)\s+UTC:\s+Host\s+-\s+(?P<event_host>.+?),(\s+FQDN\s+-\s+(?P<event_dns>.+?),|)(\s+Container\s+-\s+(?P<event_container>.+?),|)(\s+Image\s+-\s+(?P<event_image>.+?),|)(\s+Rule\s+-\s+(?P<event_rule>.+?),|)\s+Message\s+-\s+(?P<event_message>.+?)(\s+IP:\s+(?P<event_ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})|)$""
| mvexpand event_block
| eval ""Short Description""='message.type', Description=app."": "".'message.type'
| table ""Short Description"",Description,message.accountID,message.cluster,message.host,message.image,message.message",
HDSI Risk Gen - misp_IPDST Activity,1,SA-HLThreatIntelligenceFeed,"index=threat_activity threat_key=""misp_IPDST"" threat_match_field=""dest"" `hdsi_misp_risk_gen_customizations`
| rename threat_match_value AS dest
| table _time src dest orig_sourcetype",
HDSI Risk Gen - rf_ip_risklist Activity,1,SA-HLThreatIntelligenceFeed,"index=threat_activity threat_key=""rf_ip_risklist"" threat_match_field=""dest""
| lookup p_default_ip_risklist.csv Name as threat_match_value OUTPUT Risk
| where Risk > 78
| rename threat_match_value as dest
| table _time Risk src dest orig_sourcetype",
HDSI SOC Content Repo Content Update,1,SplunkEnterpriseSecuritySuite,"| inputlookup hdsi_soc_content_repo 
| join search_name [| rest splunk_server=local /servicesNS/-/-/configs/conf-savedsearches | table title description search action.correlationsearch.label | rename title as search_name search as deployed_search description as deployed_description action.correlationsearch.label as rule_name | eval deployed=""yes""] 
| spath input=sse_content path=json.search output=repo_search 
| eval compare_deployed_search=deployed_search, compare_repo_search=repo_search 
| rex field=compare_deployed_search mode=sed ""s/\s//g"" 
| rex field=compare_repo_search mode=sed ""s/\s//g"" 
| eval different_from_repo=if(compare_deployed_search!=compare_repo_search AND match(deployed_description, ""^v\d""), ""yes"", ""no"") 
| search different_from_repo=yes 
| rename description as repo_description 
| lookup hdsi_es_alerting.csv rule_name 
| table package_name search_name different_from_repo deployed_description repo_description deployed_search repo_search should_alert risk_alerting",
HDSI SOC Content Repo Data Introspection - Lookup Gen,1,SplunkEnterpriseSecuritySuite,"| inputlookup hdsi_soc_content_repo 
| where isnotnull(prereq_search) 
| join search_name type=left [| rest splunk_server=local /servicesNS/-/-/configs/conf-savedsearches | table title | rename title as search_name | eval deployed=""yes""] 
| where isnull(deployed) 
| eval search_name=search_name.""@@"".package_name 
| stats values(search_name) as search_name by prereq_search 
| eval search_name=mvjoin(search_name, "","") 
| map maxsearches=100 search=""search [|makeresults | eval search=$prereq_search$ | return $search] | head 1 | stats count | eval has_logs=if(count>0, \""yes\"", \""no\""), search_name=\""$search_name$\"", search_name=split(search_name, \"",\"") | mvexpand search_name | eval package_name=mvindex(split(search_name, \""@@\""), 1), search_name=mvindex(split(search_name, \""@@\""), 0) | table package_name search_name has_logs"" 
| outputlookup hdsi_soc_content_repo_data_introspection.csv 
| eval [inputlookup hdsi_es_alerting.csv | search rule_name=""HDSI Risk Score Exceeded on Object"" | eval rba_enabled=if(should_alert=""yes"" OR should_alert=""tuning"", ""yes"", ""no"") | return rba_enabled] 
| fillnull rba_enabled value=""no"" 
| lookup hdsi_soc_content_repo package_name output tags sse_content 
| spath input=sse_content path=json{}.name output=rule_name 
| eval auto_sprint=if(((rba_enabled=""no"" AND tags=""base"") OR (rba_enabled=""yes"" AND tags=""rba_base"")) AND has_logs=""yes"", ""yes"", ""no"") 
| rename tags as content_tags 
| fields - sse_content",None
HDSI SOC Content Repo Datamodel Introspection - Lookup Gen,1,SplunkEnterpriseSecuritySuite,"| inputlookup hdsi_soc_content_repo 
| where isnotnull(datamodel) 
| join search_name type=left [| rest splunk_server=local /servicesNS/-/-/configs/conf-savedsearches | table title | rename title as search_name | eval deployed=""yes""] 
| where isnull(deployed) 
| eval search_name=search_name.""@@"".package_name 
| stats values(search_name) as search_name by datamodel 
| eval search_name=mvjoin(search_name, "","") 
| map maxsearches=40 search=""tstats count from datamodel=$datamodel$ | eval has_logs=if(count>0, \""yes\"", \""no\""), search_name=\""$search_name$\"", search_name=split(search_name, \"",\"") | mvexpand search_name | eval package_name=mvindex(split(search_name, \""@@\""), 1), search_name=mvindex(split(search_name, \""@@\""), 0) | table package_name search_name has_logs"" 
| outputlookup hdsi_soc_content_repo_datamodel_introspection.csv 
| eval [inputlookup hdsi_es_alerting.csv | search rule_name=""HDSI Risk Score Exceeded on Object"" | eval rba_enabled=if(should_alert=""yes"" OR should_alert=""tuning"", ""yes"", ""no"") | return rba_enabled] 
| fillnull rba_enabled value=""no"" 
| lookup hdsi_soc_content_repo package_name output tags sse_content 
| spath input=sse_content path=json{}.name output=rule_name 
| eval auto_sprint=if(((rba_enabled=""no"" AND tags=""base"") OR (rba_enabled=""yes"" AND tags=""rba_base"")) AND has_logs=""yes"", ""yes"", ""no"") 
| rename tags as content_tags 
| fields - sse_content",None
HDSI SOC Content Repo Mirror To Security Essentials,1,SplunkEnterpriseSecuritySuite,"| inputlookup hdsi_soc_content_repo | table sse_content 
| spath input=sse_content path=json 
| spath input=sse_content path=showcaseId 
| spath input=sse_content path=user 
| fields - sse_content 
| eval _time=now(), channel=""custom"", key=showcaseId 
| outputlookup custom_content_lookup key_field=key override_if_empty=f",
HDSI SOC Content Repo Security Essentials Live Content Mappings,1,SplunkEnterpriseSecuritySuite,"| inputlookup hdsi_soc_content_repo 
| join search_name type=left [| rest splunk_server=local /servicesNS/-/-/configs/conf-savedsearches | table title | rename title as search_name | eval deployed=""yes""] 
| search deployed=yes 
| spath input=sse_content path=showcaseId 
| spath input=sse_content path=user 
| fields - sse_content 
| rename search_name as search_title 
| table search_title showcaseId user 
| eval _time=now(), key=search_title 
| rex field=key mode=sed ""s/\W//g"" 
| outputlookup local_search_mappings_lookup key_field=key override_if_empty=f",
HDSI SOC In Use Logs - Lookup Gen,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local /servicesNS/-/-/configs/conf-savedsearches 
| rename action.correlationsearch.label as rule_name 
| lookup hdsi_es_alerting.csv rule_name 
| search should_alert=yes OR risk_alerting=yes 
| rex field=search max_match=0 ""source=\""?(?<source>.+?)[\s\"")]"" 
| rex field=search max_match=0 ""sourcetype=\""?(?<sourcetype>.+?)[\s\"")]"" 
| rex field=search max_match=0 ""datamodel=\""?(?<datamodel>.+?)[\s\"")]"" 
| rex field=search max_match=0 ""`(?<macro>.+?)[(`]"" 
| table rule_name sourcetype source datamodel macro
| join type=left macro 
    [| rest splunk_server=local /servicesNS/-/-/configs/conf-macros 
    | eval title=mvindex(split(title, ""(""), 0) 
    | rename definition as _raw 
    | extract 
    | table title sourcetype source 
    | rename title as macro] 
| fields - macro 
| foreach sourcetype source datamodel [eval <<FIELD>>=mvdedup(<<FIELD>>)] 
| eval sourcetype=lower(sourcetype) 
| outputlookup hdsi_in_use_logs",None
HDSI SOC In Use Logs From Datamodels - Lookup Gen,1,SplunkEnterpriseSecuritySuite,"| inputlookup hdsi_in_use_logs | stats values(rule_name) as rule_name by datamodel | eval rule_name=mvjoin(rule_name, ""||"") 
| map maxsearches=40 search=""tstats summariesonly=true count from datamodel=$datamodel$ by sourcetype | eval datamodel=\""$datamodel$\"", rule_name=\""$rule_name$\"""" 
| eval rule_name=split(rule_name, ""||"") 
| table datamodel sourcetype rule_name | eval sourcetype=lower(sourcetype) | outputlookup hdsi_in_use_logs_from_datamodels",None
HDSI Suppression Change Made,1,SplunkEnterpriseSecuritySuite,"| inputlookup HL_known_suppression_change.csv | eval time_since_change=now()-updated_in_lookup | eval hour=3600 | WHERE time_since_change <= hour AND suppression_modified!="""" | fields - hour, time_since_change",
HDSI Vulnerability Scanner Detected Internal - Weekly Report,1,SplunkEnterpriseSecuritySuite,"index=notable source=""*HDSI Vulnerability Scanner Detected Internal*"" NOT src IN (""172.21.27.30"", ""10.74.20.26"", ""10.74.20.57"", ""172.30.27.90"", ""172.30.27.91"", ""10.75.20.68"", ""10.200.67.37"", ""10.184.199.95"", ""10.75.20.68"", ""172.30.27.91"", ""10.74.20.26"", ""172.21.27.30"", ""172.30.27.137"", ""10.143.18.187"", ""10.143.18.188"", ""10.143.18.189"", ""10.125.18.128/25"", ""10.130.88.128/25"", ""10.133.127.64/26"") | stats dc(dest) as dest_count 
        dc(signature) as sig_count 
        values(action) as action 
        values(dest) as dest 
        values(category) as category 
        values(signature) as signature 
        values(severity) as orig_severity 
        values(sourcetype) as orig_sourcetype 
        values(day_count) as signature_day_count 
        by src",None
hdsi_es_alerting Mapping Audit,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local count=0 /servicesNS/-/-/saved/searches
| search action.correlationsearch.enabled=""*"" disabled=0
| rename action.correlationsearch.label AS rule_name
| search `hdsi_es_alerting_mapping_audit_filter`
| join type=outer rule_name [| inputlookup hdsi_es_alerting.csv | eventstats count AS row_count by rule_name | table rule_name row_count]
| eval message=if(row_count > 1, ""Live correlation search has more than one definition in hdsi_es_alerting.csv ("".rule_name."")"", NULL)
| search message=* OR NOT [| inputlookup hdsi_es_alerting.csv  | search should_alert IN (""yes"", ""no"", ""phantom"", ""tuning"") `hdsi_es_alerting_mapping_audit_should_alert_customization` | fields rule_name]
| lookup hdsi_es_alerting.csv rule_name OUTPUT should_alert
| table title message rule_name ""eai:acl.owner"" should_alert
| rename title AS search_name, ""eai:acl.owner"" AS owner
| eval message=case(isnull(should_alert) AND isnull(message), ""Live correlation search not present in hdsi_es_alerting.csv ("".rule_name."")"", isnull(message), ""Live correlation search has an invalid should_alert setting ("".rule_name."")"", 1==1, message)
| eval alias=message",
High Severity Intrusion,1,InfoSec_App_for_Splunk,"| tstats local=false summariesonly=true allow_old_summaries=true count from datamodel=Intrusion_Detection.IDS_Attacks where IDS_Attacks.severity=""high"" by IDS_Attacks.signature, IDS_Attacks.severity | rename ""IDS_Attacks.*"" as ""*""",
Hurricane Alerts - Incremental Lookup Gen,1,HurricaneCustomerMetrics,"index=hurricane_customer_metrics sourcetype=""hurricane:alerts""
| dedup id sortby -_time
| table seen,id,tinyId,alias,message,status,acknowledged,isSeen,""orig_tags{}"",snoozed,count,lastOccurredAt,createdAt,updatedAt,orig_source,owner,priority
| rename ""orig_tags{}"" AS tags
| eval key=id
| outputlookup hurricane_alerts key_field=key create_empty=f override_if_empty=f",None
Hurricane Tickets - Incremental Lookup Gen,1,HurricaneCustomerMetrics,"index=hurricane_customer_metrics sourcetype=""hurricane:tickets""
| dedup id sortby -_time
| table via.source.from.ticket_id, via.source.rel, updated_at, submitter.id, submitter.name, submitter.email, assignee.id, assignee.name, assignee.email, brand_id, id, priority, subject, type, _key, status, description, tags{}, forum_topic_id, organization.id, organization.name, requester.id, requester.name, requester.email, recipient, problem_id, _user, url, created_at, raw_subject, due_at, has_incidents, group.id, group.name, external_id
| rename ""tags{}"" AS tags, via.source.from.ticket_id AS via__source__from__ticket_id, via.source.rel AS via__source__rel *.* AS *__*
| eval key=id
| outputlookup hurricane_tickets key_field=key create_empty=f override_if_empty=f",None
Identity - Asset Truncations,1,SA-IdentityManagement,"index=_internal sourcetype=""identity_correlation:merge"" WARNING type=""asset"" | timechart span=1m sum(entities_truncated) as total_entities_truncated values(source_lookup) as source_lookups | where total_entities_truncated > 0 AND source_lookups != """" | sort - _time | head 1 | eval source_lookups = mvdedup(source_lookups), source_lookups=mvjoin(source_lookups, "", "") | fields total_entities_truncated source_lookups",
Identity - Identity Manager Error,1,SA-IdentityManagement,"index=_internal (sourcetype=""identity_correlation:modular_input"" OR sourcetype=""identity_correlation:merge"") ERROR status=""*"" | regex _raw=""ERROR"" | eval log_filename=mvindex(split(source, ""/""), -1) | fields _time, status, error, source, file, log_filename, index, _raw",
Identity - Identity Truncations,1,SA-IdentityManagement,"index=_internal sourcetype=""identity_correlation:merge"" WARNING type=""identity"" | timechart span=1m sum(entities_truncated) as total_entities_truncated values(source_lookup) as source_lookups | where total_entities_truncated > 0 AND source_lookups != """" | sort - _time | head 1 | eval source_lookups = mvdedup(source_lookups), source_lookups=mvjoin(source_lookups, "", "") | fields total_entities_truncated source_lookups",
Identity - Make Categories - Lookup Gen,1,SA-IdentityManagement,"| from inputlookup:category_lookup | fillnull value=""static"" category_source | inputlookup append=t asset_lookup_by_str | inputlookup append=t asset_lookup_by_cidr | fillnull value=""asset"" category_source | inputlookup append=t identity_lookup_expanded | fillnull value=""identity"" category_source | stats count by category, category_source | sort category, category_source | fields category category_source | outputlookup category_lookup | stats count",None
Identity - Make PCI Domains - Lookup Gen,1,SA-IdentityManagement,"| from inputlookup:pci_domains_lookup | fillnull value=""static"" pci_domain_source | inputlookup append=t asset_lookup_by_str | inputlookup append=t asset_lookup_by_cidr | fillnull value=""asset"" pci_domain_source | stats count by pci_domain, pci_domain_source | sort pci_domain, pci_domain_source | fields pci_domain pci_domain_source | outputlookup pci_domains_lookup | stats count",None
IDS - High Severity Attacks,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count as current_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-24h@h latest=+0s (IDS_Attacks.severity=""critical"" OR IDS_Attacks.severity=""high"") | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-48h@h latest=-24h@h (IDS_Attacks.severity=""critical"" OR IDS_Attacks.severity=""high"")] | `get_delta`",
IDS - Unique Categories,1,DA-ESS-NetworkProtection,| tstats `summariesonly` dc(IDS_Attacks.category) as current_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` dc(IDS_Attacks.category) as historical_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-48h@h latest=-24h@h] | `get_delta`,
IDS - Unique Destinations,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(IDS_Attacks.dest) as current_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(IDS_Attacks.dest) as historical_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-48h@h latest=-24h@h] | `get_delta`,
IDS - Unique Signature Count,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(IDS_Attacks.signature) as current_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(IDS_Attacks.signature) as historical_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-48h@h latest=-24h@h] | `get_delta`,
IDS - Unique Sources,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(IDS_Attacks.src) as current_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(IDS_Attacks.src) as historical_count from datamodel=Intrusion_Detection.IDS_Attacks where earliest=-48h@h latest=-24h@h] | `get_delta`,
Insights: EBS,1,splunk_app_aws,"earliest=-1d `aws-description-resource((aws_account_id=""*""),  (region=""**"") , ""ec2_volumes"")` 
                         | where status!=""in-use""
                         | eval abnormaltype=""Unused"", Severity=1| append[search earliest=-1d `aws-description-resource((aws_account_id=""*""),  (region=""**"") , ""ec2_volumes"")` 
                         | where type=""io1""
                         | where status=""in-use""
                         | rename attach_data.instance_id as instanceId
                         | join instanceId type=""inner"" [search earliest=-1d `aws-description-resource((aws_account_id=""*""),  (region=""**"") , ""ec2_instances"")`
                         | where ebs_optimized=""false"" | rename id as instanceId ]
                         | eval abnormaltype=""Non-Optimized"", Severity=1]| append[search earliest=-1d `aws-description-resource((aws_account_id=""*""),  (region=""**"") , ""ec2_volumes"")` 
                             | join id type=""outer"" [search earliest=-1d `aws-description-resource((aws_account_id=""*""),  (region=""**"") , ""ebs_snapshots"")` 
                             | rename volume_id as id, id as snapshotId] 
                             | eval snapTime=strptime(start_time, ""%Y-%m-%dT%T"") 
                             | eval diff=round((now()-snapTime)/86400,0) 
                             | where NOT (diff>0 AND diff<30)
                             | eval abnormaltype=""No Recent Snapshot"", Severity=2]| append[search earliest=-7d@h `aws-cloudwatch-ebs(""*"", ""*"")` (metric_name=""VolumeWriteOps"" OR metric_name=""VolumeReadOps"")
                         | eval Average = Average / period
                         | stats avg(Average) as iops by metric_dimensions 
                         | eval iops = round(iops*2, 2)
                         | sort +iops
                         | `aws-cloudwatch-dimension-rex(""VolumeId"", ""id"")` 
                         | join type=inner id [search earliest=-1d `aws-description-resource((aws_account_id=""*""),  (region=""**"") , ""ec2_volumes"")` 
                         | rename iops as piops]
                         | where piops != ""null""
                         | where type=""io1""
                         | where iops/piops < 0.1
                         | eval abnormaltype=""Small IOPS"", Severity=3]| append[search earliest=-7d@h `aws-cloudwatch-ebs(""*"", ""*"")` (metric_name=""VolumeWriteOps"" OR metric_name=""VolumeReadOps"")
                         | eval Average = Average / period
                         | stats avg(Average) as iops by metric_dimensions 
                         | eval iops = round(iops*2, 2)
                         | sort -iops
                         | `aws-cloudwatch-dimension-rex(""VolumeId"", ""id"")` 
                         | join type=inner id [search earliest=-1d `aws-description-resource((aws_account_id=""*""),  (region=""**"") , ""ec2_volumes"")` 
                         | rename iops as piops]
                         | where piops != ""null""
                         | where iops/piops > 0.9
                         | eval abnormaltype=""Large IOPS"", Severity=3] | stats count by account_id region",
Insights: EIP,1,splunk_app_aws,"`aws-unused-eip(""*"", ""*"")` | search insight=""*"" | stats count by account_id region",
Insights: ELB,1,splunk_app_aws,"`aws-unused-elb((""*""), (""*""))` | append [search earliest=-1d `aws-not-autoscaling-elb((""*""), (""*""))`] | append [search earliest=-1d `aws-not-enough-request-elb((""*""), (""*""))`] | append [search earliest=-1d `aws-not-cross-zone-elb((""*""), (""*""))`] | append [search earliest=-1d `aws-insecure-listener-elb((""*""), (""*""))`] | stats count by account_id region",
Insights: IAM,1,splunk_app_aws,"`aws-password-policy-iam((""*""))` | append [search earliest=-1d `aws-key-rotation-iam((""*""))`] | append [search earliest=-1d `aws-long-unused-iam((""*""))`] | stats count by account_id",
Insights: SG,1,splunk_app_aws,"`aws-specific-ports-unrestricted-sg((""*""), (""*""))` | append [search earliest=-1d `aws-unrestricted-access-sg((""*""), (""*""))`] | append [search earliest=-1d `aws-unused-sg((""*""), (""*""))`] | append [search earliest=-1d `aws-redundant-sg((""*""), (""*""))`] | append [search earliest=-1d `aws-large-number-rules-sg((""*""), (""*""))`] | stats count by account_id region",
instrumentation.usage.admissionRules.report,23,splunk_instrumentation,"'|rest splunk_server=local /services/server/info | appendcols [|rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry | fields telemetrySalt]| eval telemetrySalt=if(isnull(telemetrySalt), """", telemetrySalt), hashHost=sha1(telemetrySalt+splunk_server), roleCombine=mvjoin(server_roles, "", "") | fields guid, hashHost, roleCombine| appendcols [|savedsearch instrumentation.usage.admissionRules.enabled] | appendcols [|savedsearch instrumentation.usage.admissionRules.rules] | appendcols [|savedsearch instrumentation.usage.admissionRules.rulesTriggered] | fillnull value=0 | eval data=""{\""host\"": \""""+hashHost+""\"", \""guid\"": \""""+guid+""\"", \""admissionRulesEnabled\"": \""""+enabled+""\"", \""serverRoles\"": \""""+roleCombine+""\"", \""rules\"":{\""totalCount\"":\""""+ruleTotal+""\""""+if(ruleTotal>0, "", ""+ruleCombined, """")+""}, \""rulesTriggered\"":[""+if(rulesTriggeredTotal>0, rulesTriggeredCombined, """")+""]}"", _time=now(), date=strftime(_time, ""%Y-%m-%d"")| fields _time date data' |rest splunk_server=local /services/server/info | appendcols [|rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry | fields telemetrySalt]| eval telemetrySalt=if(isnull(telemetrySalt), """", telemetrySalt), hashHost=sha1(telemetrySalt+splunk_server), roleCombine=mvjoin(server_roles, "", "") | fields guid, hashHost, roleCombine| appendcols [|savedsearch instrumentation.usage.admissionRules.enabled] | appendcols [|savedsearch instrumentation.usage.admissionRules.rules] | appendcols [|savedsearch instrumentation.usage.admissionRules.rulesTriggered] | fillnull value=0 | eval data=""{\""host\"": \""""+hashHost+""\"", \""guid\"": \""""+guid+""\"", \""admissionRulesEnabled\"": \""""+enabled+""\"", \""serverRoles\"": \""""+roleCombine+""\"", \""rules\"":{\""totalCount\"":\""""+ruleTotal+""\""""+if(ruleTotal>0, "", ""+ruleCombined, """")+""}, \""rulesTriggered\"":[""+if(rulesTriggeredTotal>0, rulesTriggeredCombined, """")+""]}"", _time=now(), date=strftime(_time, ""%Y-%m-%d"")| fields _time date data",splunk-system-user
instrumentation.usage.authMethod.config,35,splunk_instrumentation,"'|rest splunk_server=local /services/admin/auth-services| join type=left splunk_server [|rest splunk_server=local /services/server/info | fields guid, splunk_server] | appendcols [|rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry | fields telemetrySalt]| eval telemetrySalt=if(isnull(telemetrySalt), """", telemetrySalt), hashHost=sha1(telemetrySalt+splunk_server)| eval data=""{\""host\"": \""""+hashHost+""\"",\""guid\"": \""""+guid+""\"", \""authentication method\"": \""""+active_authmodule+""\"",\""mfa type\"": "" +""\"""" + if(mfa_type=="""", ""none"", mfa_type) +""\""}"", _time=now(), date=strftime(_time, ""%Y-%m-%d"") | fields data _time date' |rest splunk_server=local /services/admin/auth-services| join type=left splunk_server [|rest splunk_server=local /services/server/info | fields guid, splunk_server] | appendcols [|rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry | fields telemetrySalt]| eval telemetrySalt=if(isnull(telemetrySalt), """", telemetrySalt), hashHost=sha1(telemetrySalt+splunk_server)| eval data=""{\""host\"": \""""+hashHost+""\"",\""guid\"": \""""+guid+""\"", \""authentication method\"": \""""+active_authmodule+""\"",\""mfa type\"": "" +""\"""" + if(mfa_type=="""", ""none"", mfa_type) +""\""}"", _time=now(), date=strftime(_time, ""%Y-%m-%d"") | fields data _time date",splunk-system-user
instrumentation.usage.healthMonitor.report,35,splunk_instrumentation,"'|rest splunk_server=local /services/server/health-config | eval thresh="""" | foreach indicator*red,indicator*yellow [eval thresh =if(' |rest splunk_server=local /services/server/health-config | eval thresh="""" | foreach indicator*red,indicator*yellow [eval thresh =if('<<FIELD>>'!="""", thresh+""\""<<FIELD>>\"":"" + '<<FIELD>>' + "","", thresh)] | eval thresh=rtrim(thresh, "",""), enabled=if(disabled=='' or disabled==0 or isnull(disabled), 1,0) | eval feature=""\""""+title+""\"":{\""threshold\"": {""+thresh+""}, \""enabled\"": \""""+enabled+""\""}"", distinct=if(like(title, ""feature%""), ""feature"", ""alert"") | eval disable=coalesce('alert.disabled', disabled), action=coalesce('alert.actions','action.to','action.url', 'action.integration_url_override') | eval action=if(action=="""" or isnull(action), ""empty"", action) | eval alert=""\""""+title+""\"": {\""disabled\"": \""""+disable+""\"", \""action/ action.to/ action.url/ action.integration_url_override\"": \""""+action+""\""}"" | stats list(alert) AS alertList, list(feature) AS feaList by distinct | eval alertCombined=mvjoin(alertList, "",""), feaCombined=mvjoin(feaList, "","") | eval alertCombined=""\""alert\"":{""+alertCombined+""}"" | eval feaCombined=if(distinct==""alert"", null, feaCombined), alertCombined=if(distinct==""feature"", null, alertCombined) | eval dataCombined=coalesce(alertCombined, feaCombined) | stats list(dataCombined) AS dataList| eval data=mvjoin(dataList, "","") | eval data=""{""+data+""}"",_time=now(), date=strftime(_time, ""%Y-%m-%d"") | fields data _time date",splunk-system-user
instrumentation.usage.passwordPolicy.config,35,splunk_instrumentation,"'|rest splunk_server=local /services/admin/Splunk-auth/splunk_auth| join type=left splunk_server [|rest splunk_server=local /services/server/info | fields guid, splunk_server] | appendcols [|rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry | fields telemetrySalt]| eval telemetrySalt=if(isnull(telemetrySalt), """", telemetrySalt), hashHost=sha1(telemetrySalt+splunk_server)| replace ""1"" with ""true"", ""0"" with ""false"" in enablePasswordHistory,expireUserAccounts, forceWeakPasswordChange, lockoutUsers, verboseLoginFailMsg | eval data=""{\""host\"": \""""+hashHost+""\"",\""guid\"": \""""+guid+""\"", \""constant login time\"":\""""+constantLoginTime+""\"", \""enable password history\"":\""""+enablePasswordHistory+""\"", \""expiration alert in days\"":\""""+expireAlertDays+""\"", \""days until password expires\"":\""""+expirePasswordDays+""\"", \""enable password expiration\"":\""""+expireUserAccounts+""\"", \""force existing users to change weak passwords\"":\""""+forceWeakPasswordChange+""\"", \""failed login attempts\"":\""""+lockoutAttempts+""\"", \""lockout duration in minutes\"":\""""+lockoutMins+""\"", \""lockout threshold in minutes\"":\""""+lockoutThresholdMins+""\"", \""enable lockout users\"":\""""+lockoutUsers+""\"", \""minimum number of digits\"":\""""+minPasswordDigit+""\"", \""minimum number of characters\"":\""""+minPasswordLength+""\"", \""minimum number of lowercase letters\"":\""""+minPasswordLowercase+""\"", \""minimum number of special characters\"":\""""+minPasswordSpecial+""\"", \""minimum number of uppercase letters\"":\""""+minPasswordUppercase+""\"", \""password history count\"":\""""+passwordHistoryCount+""\"", \""enable verbose login fail message\"":\""""+verboseLoginFailMsg+""\""}"",_time=now(), date=strftime(_time, ""%Y-%m-%d"") | fields data _time date' |rest splunk_server=local /services/admin/Splunk-auth/splunk_auth| join type=left splunk_server [|rest splunk_server=local /services/server/info | fields guid, splunk_server] | appendcols [|rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry | fields telemetrySalt]| eval telemetrySalt=if(isnull(telemetrySalt), """", telemetrySalt), hashHost=sha1(telemetrySalt+splunk_server)| replace ""1"" with ""true"", ""0"" with ""false"" in enablePasswordHistory,expireUserAccounts, forceWeakPasswordChange, lockoutUsers, verboseLoginFailMsg | eval data=""{\""host\"": \""""+hashHost+""\"",\""guid\"": \""""+guid+""\"", \""constant login time\"":\""""+constantLoginTime+""\"", \""enable password history\"":\""""+enablePasswordHistory+""\"", \""expiration alert in days\"":\""""+expireAlertDays+""\"", \""days until password expires\"":\""""+expirePasswordDays+""\"", \""enable password expiration\"":\""""+expireUserAccounts+""\"", \""force existing users to change weak passwords\"":\""""+forceWeakPasswordChange+""\"", \""failed login attempts\"":\""""+lockoutAttempts+""\"", \""lockout duration in minutes\"":\""""+lockoutMins+""\"", \""lockout threshold in minutes\"":\""""+lockoutThresholdMins+""\"", \""enable lockout users\"":\""""+lockoutUsers+""\"", \""minimum number of digits\"":\""""+minPasswordDigit+""\"", \""minimum number of characters\"":\""""+minPasswordLength+""\"", \""minimum number of lowercase letters\"":\""""+minPasswordLowercase+""\"", \""minimum number of special characters\"":\""""+minPasswordSpecial+""\"", \""minimum number of uppercase letters\"":\""""+minPasswordUppercase+""\"", \""password history count\"":\""""+passwordHistoryCount+""\"", \""enable verbose login fail message\"":\""""+verboseLoginFailMsg+""\""}"",_time=now(), date=strftime(_time, ""%Y-%m-%d"") | fields data _time date",splunk-system-user
instrumentation.usage.smartStore.config,35,splunk_instrumentation,"'|savedsearch instrumentation.usage.smartStore.global | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.perIndex] | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.capacity] | eval data=""{""+globalConfig+"", ""+capCombined+"", ""+indexConfig+"", ""+s2Enabled+""}"",_time=now(), date=strftime(_time, ""%Y-%m-%d"") | fields data _time date' '|savedsearch instrumentation.usage.smartStore.global | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.perIndex] | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.capacity] | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.accountTypes] | eval data=""{""+globalConfig+"", ""+capCombined+"", ""+indexConfig+"", ""+s2Enabled+"", ""+accountTypes+""}"",_time=now(), date=strftime(_time, ""%Y-%m-%d"") | fields data _time date' |savedsearch instrumentation.usage.smartStore.global | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.perIndex] | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.capacity] | eval data=""{""+globalConfig+"", ""+capCombined+"", ""+indexConfig+"", ""+s2Enabled+""}"",_time=now(), date=strftime(_time, ""%Y-%m-%d"") | fields data _time date |savedsearch instrumentation.usage.smartStore.global | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.perIndex] | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.capacity] | join type=left splunk_server [|savedsearch instrumentation.usage.smartStore.accountTypes] | eval data=""{""+globalConfig+"", ""+capCombined+"", ""+indexConfig+"", ""+s2Enabled+"", ""+accountTypes+""}"",_time=now(), date=strftime(_time, ""%Y-%m-%d"") | fields data _time date",splunk-system-user
instrumentation.usage.workloadManagement.report,35,splunk_instrumentation,"'|rest splunk_server=local /services/server/info | appendcols [|rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry | fields telemetrySalt]| eval telemetrySalt=if(isnull(telemetrySalt), """", telemetrySalt), hashHost=sha1(telemetrySalt+splunk_server), roleCombine=mvjoin(server_roles, "", "") | fields guid, hashHost, roleCombine| appendcols [|savedsearch instrumentation.usage.workloadManagement.enabled] | appendcols [|savedsearch instrumentation.usage.workloadManagement.category]| appendcols [|savedsearch instrumentation.usage.workloadManagement.pools] | appendcols [|savedsearch instrumentation.usage.workloadManagement.rules] | fillnull value=0 | eval data=""{\""host\"": \""""+hashHost+""\"", \""guid\"": \""""+guid+""\"", \""wlm supported\"": \""""+support+""\"", \""os\"": \""""+os_name+""\"", \""osVersion\"": \""""+os_version+""\"", \""wlm enabled\"": \""""+enabled+""\"", \""server roles\"": \""""+roleCombine+""\"""", poolTotal=if(isnull(poolTotal),0, poolTotal), ruleTotal=if(isnull(ruleTotal),0, ruleTotal) | eval data=if(support==1, data+"", \""categories\"":{""+categoryCombined+""}, \""pools\"":{\""total count\"":\""""+poolTotal+""\""""+ if(poolTotal>0, "", ""+poolCombined+"""", """") + ""}, \""rules\"":{\""total count\"":\""""+ruleTotal+""\""""+if(ruleTotal>0, "", ""+ruleCombined, """")+""}}"", data+""}""), _time=now(), date=strftime(_time, ""%Y-%m-%d"")| fields _time date data' |rest splunk_server=local /services/server/info | appendcols [|rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry | fields telemetrySalt]| eval telemetrySalt=if(isnull(telemetrySalt), """", telemetrySalt), hashHost=sha1(telemetrySalt+splunk_server), roleCombine=mvjoin(server_roles, "", "") | fields guid, hashHost, roleCombine| appendcols [|savedsearch instrumentation.usage.workloadManagement.enabled] | appendcols [|savedsearch instrumentation.usage.workloadManagement.category]| appendcols [|savedsearch instrumentation.usage.workloadManagement.pools] | appendcols [|savedsearch instrumentation.usage.workloadManagement.rules] | fillnull value=0 | eval data=""{\""host\"": \""""+hashHost+""\"", \""guid\"": \""""+guid+""\"", \""wlm supported\"": \""""+support+""\"", \""os\"": \""""+os_name+""\"", \""osVersion\"": \""""+os_version+""\"", \""wlm enabled\"": \""""+enabled+""\"", \""server roles\"": \""""+roleCombine+""\"""", poolTotal=if(isnull(poolTotal),0, poolTotal), ruleTotal=if(isnull(ruleTotal),0, ruleTotal) | eval data=if(support==1, data+"", \""categories\"":{""+categoryCombined+""}, \""pools\"":{\""total count\"":\""""+poolTotal+""\""""+ if(poolTotal>0, "", ""+poolCombined+"""", """") + ""}, \""rules\"":{\""total count\"":\""""+ruleTotal+""\""""+if(ruleTotal>0, "", ""+ruleCombined, """")+""}}"", data+""}""), _time=now(), date=strftime(_time, ""%Y-%m-%d"")| fields _time date data",splunk-system-user
ISR Volume Limit Alarm,1,SplunkEnterpriseSecuritySuite,"index=_internal source=*license_usage.log type=Usage (idx=pan_logs OR idx=ali OR idx=domain OR idx=gfi-gcr OR idx=accesslog-gcr OR idx=f5-gcr OR idx=cdn-gcr OR idx=aws-kinesis OR idx=azure OR idx=unix OR idx=vpn OR idx=okta-corp OR idx=dhcp OR idx=trendmicro OR idx=mcafee OR idx=symantec OR idx=vmware-vdi OR idx=snort OR idx=pim-gcr OR idx=domain-qa OR idx=secretserver OR idx=ldap OR idx=proofpoint OR idx=sccm_status OR idx=sccm OR idx=laps OR idx=aws-guardduty OR idx=exabeam OR idx=aws-accounts OR idx=aws-cloudtrail-gcr) | timechart span=1d sum(b) AS Total_Bytes | eval GB1=Total_Bytes/1024/1024/1024 | eval ISR_Volume=round(GB1,2) | table _time, ISR_Volume | where ISR_Volume > 500",
Korea WAF Rate Limit Detected Alert,1,search,"index=""aws-waf"" webaclId=""*854335969683*"" OR webaclId=""*157213108253*"" terminatingRuleId=""KOREA_PROD_RATE_LIMIT"" OR terminatingRuleId=""kor-prod-hybris-ratelimit""
| rename terminatingRuleId as rule, uri_query as uri, http_method as method, http_user_agent as user_agent, httpRequest.country as country 
| fillnull value=""""
| stats values(src) as src,values(site) as site,values(country) as country,values(method) as method, values(user_agent) as user_agent by _time",
Locked Out Accounts,1,InfoSec_App_for_Splunk,"`wineventlog-index` EventCode=4740 | table user, _time",
Lookup Gen - monitored_soc_dm_indexes.csv,1,HurricaneCustomerMetrics,"| rest /servicesNS/-/-/admin/macros count=0 | search title=""*cim*indexes*"" NOT definition=""()""
| rex max_match=0 field=definition ""index=(?<monitored_index>[\w\:\_\-]+)""
| mvexpand monitored_index
| rex field=title ""\_(?<tag>.+)\_indexes""
| table monitored_index, tag
| outputlookup override_if_empty=false monitored_soc_dm_indexes.csv",
Machine Learning: Recommendation,1,splunk_app_aws,| recommend,
MAGIC PROD Thread Pool Alert,2025,,"'search index=magic-prod *thread pool ""WebContainer"" has reached*' search index=magic-prod *thread pool ""WebContainer"" has reached*",admin
Malware - Average Infection Length,1,DA-ESS-EndpointProtection,"| from inputlookup:malware_tracker | `dayDiff(lastTime)` | eval current_diff=if(dayDiff<=7,(lastTime-firstTime)/86400,null()) | eval historical_diff=if(dayDiff>1 AND dayDiff<=8,(lastTime-firstTime)/86400,null()) | stats avg(current_diff) as current_avg,avg(historical_diff) as historical_avg | `round(current_avg,1)` | `round(historical_avg,1)` | `get_delta(current_avg,historical_avg)`",
Malware - Infected System Count,1,DA-ESS-EndpointProtection,| tstats `summariesonly` estdc(Malware_Attacks.dest) as current_count from datamodel=Malware.Malware_Attacks where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed | appendcols [| tstats `summariesonly` estdc(Malware_Attacks.dest) as historical_count from datamodel=Malware.Malware_Attacks where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed] | `get_delta`,
Malware - Multiple Infections,1,DA-ESS-EndpointProtection,| tstats `summariesonly` dc(Malware_Attacks.signature) as infection_count from datamodel=Malware.Malware_Attacks where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed by Malware_Attacks.dest | search infection_count>1 | stats count as current_count | appendcols [| tstats `summariesonly` dc(Malware_Attacks.signature) as infection_count from datamodel=Malware.Malware_Attacks where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed by Malware_Attacks.dest | search infection_count>1 | stats count as historical_count] | `get_delta`,
Malware - New Infections,1,DA-ESS-EndpointProtection,"| from inputlookup:malware_tracker | `dayDiff(firstTime)` | eval current_count=if(dayDiff<=1,1,0) | eval historical_count=if(dayDiff>1 AND dayDiff<=2,1,0) | stats sum(current_count) as current_count,sum(historical_count) as historical_count | `get_delta`",
Malware - Old Malware Defintions,1,DA-ESS-EndpointProtection,"| from inputlookup:malware_operations_tracker | rename time_signature_version as _time | `dayDiff` | eval current_count=if(dayDiff>=7,1,0) | eval historical_count=if(dayDiff>=8,1,0) | stats sum(current_count) as current_count,sum(historical_count) as historical_count | `get_delta`",
Malware - Oldest Infection,1,DA-ESS-EndpointProtection,"| from inputlookup:malware_tracker | `dayDiff(lastTime)` | eval current_diff=if(dayDiff<=7,(lastTime-firstTime)/86400,null()) | eval historical_diff=if(dayDiff>1 AND dayDiff<=8,(lastTime-firstTime)/86400,null()) | stats max(current_diff) as current_max,max(historical_diff) as historical_max | `round(current_max,1)` | `round(historical_max,1)` | `get_delta(current_max,historical_max)`",
Malware - Percent Of Systems Infected,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` estdc(Malware_Attacks.dest) as current_count from datamodel=Malware.Malware_Attacks where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed | appendcols [| tstats `summariesonly` estdc(Malware_Attacks.dest) as historical_count from datamodel=Malware.Malware_Attacks where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed] | appendcols [| from inputlookup:malware_operations_tracker | `daysago(30)` | stats count as total_count] | eval current_percent=round(current_count*100/total_count,1) | eval historical_percent=round(historical_count*100/total_count,1) | fields current_percent,historical_percent | `get_delta(current_percent,historical_percent)`",
Malware - Systems With Anti-Malware,1,DA-ESS-EndpointProtection,"| from inputlookup:malware_operations_tracker | `dayDiff` | eval current_count=if(dayDiff<=7,1,0) | eval historical_count=if(dayDiff>1 AND dayDiff<=8,1,0) | stats sum(current_count) as current_count,sum(historical_count) as historical_count | `get_delta`",
Malware - Top Infected Domain,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` dc(Malware_Attacks.dest) as current_count from datamodel=Malware.Malware_Attacks where earliest=-24h@h latest=+0s by Malware_Attacks.dest_nt_domain | join type=outer Malware_Attacks.dest_nt_domain [| tstats `summariesonly` dc(Malware_Attacks.dest) as historical_count from datamodel=Malware.Malware_Attacks where earliest=-48h@h latest=-24@h by Malware_Attacks.dest_nt_domain] | `drop_dm_object_name(""Malware_Attacks"")` | sort 1 - current_count | eval label=dest_nt_domain."" has "".current_count."" infected systems"" | eval label=if(current_count==1,replace(label,""systems"",""system""),label) | `get_delta` | fields label,dest_nt_domain,current_count,historical_count,delta",
Malware - Top Infected System,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` dc(Malware_Attacks.signature) as current_count from datamodel=Malware.Malware_Attacks where earliest=-24h@h latest=+0s by Malware_Attacks.dest | join type=outer Malware_Attacks.dest [| tstats `summariesonly` dc(Malware_Attacks.signature) as historical_count from datamodel=Malware.Malware_Attacks where earliest=-48h@h latest=-24@h by Malware_Attacks.dest] | `drop_dm_object_name(""Malware_Attacks"")` | sort 1 - current_count | eval label=dest."" has "".current_count."" unique infections"" | eval label=if(current_count==1,replace(label,""infections"",""infection""),label) | `get_delta` | fields label,dest,current_count,historical_count,delta",
Malware - Top Infection,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` dc(Malware_Attacks.dest) as current_count from datamodel=Malware.Malware_Attacks where earliest=-24h@h latest=+0s by Malware_Attacks.signature | join type=outer Malware_Attacks.signature [| tstats `summariesonly` dc(Malware_Attacks.dest) as historical_count from datamodel=Malware.Malware_Attacks where earliest=-48h@h latest=-24@h by Malware_Attacks.signature] | `drop_dm_object_name(""Malware_Attacks"")` | sort 1 - current_count | eval label=signature."" was detected on "".current_count."" systems"" | eval label=if(current_count==1,replace(label,""systems"",""system""),label) | `get_delta` | fields label,signature,current_count,historical_count,delta",
Malware - Total Infection Count,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` dc(Malware_Attacks.signature) as infection_count from datamodel=Malware.Malware_Attacks where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed by Malware_Attacks.dest | stats sum(infection_count) as current_count | appendcols [| tstats `summariesonly` dc(Malware_Attacks.signature) as infection_count from datamodel=Malware.Malware_Attacks where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed by Malware_Attacks.dest | stats sum(infection_count) as historical_count] | `get_ksi_fields(current_count,historical_count)` | `mltk_findbest(""app:malware_infection_count_by_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
Malware - Unique Malware Count,1,DA-ESS-EndpointProtection,| tstats `summariesonly` estdc(Malware_Attacks.signature) as current_count from datamodel=Malware.Malware_Attacks where earliest=-24h@h latest=+0s Malware_Attacks.action=allowed | appendcols [| tstats `summariesonly` estdc(Malware_Attacks.signature) as historical_count from datamodel=Malware.Malware_Attacks where earliest=-48h@h latest=-24h@h Malware_Attacks.action=allowed] | `get_delta`,
MITRE ATT&CK All Rules and Techniques Lookup Gen,1,DA-ESS-MitreContent,"| rest /services/configs/conf-analyticstories 
| where annotations!="""" 
| spath input=annotations path=mitre_attack{} output=mitre_attack 
| eval rule_name=ltrim(title,""savedsearch://"") 
| search NOT [| outputlookup mitre_user_rule_technique_lookup append=true create_empty=true] 
| search NOT [| outputlookup mitre_app_rule_technique_lookup append=true] 
| fields rule_name,mitre_attack 
| join rule_name 
    [| rest /services/configs/conf-analyticstories 
    | where searches!="""" 
    | eval rule_name=searches 
    | table title,rule_name 
    | eval rule_name=trim(rule_name,""["") 
    | eval rule_name=trim(rule_name,""]"") 
    | eval rule_name=split(rule_name,"","") 
    | mvexpand rule_name 
    | eval rule_name=trim(rule_name,"" "") 
    | eval rule_name=trim(rule_name,""\"""")
        ] 
| append 
    [| rest services/configs/conf-savedsearches 
    | eval rule_name=title 
    | search action.correlationsearch.annotations=""*"" 
    | spath input=action.correlationsearch.annotations path=mitre_attack{} output=mitre_attack 
    | fields rule_name, mitre_attack] 
| eval technique_name = if(match(mitre_attack,""^T\d\d\d""),null(), mitre_attack)
| lookup mitre_tt_lookup technique_name OUTPUT technique_id as tmp_id0
| eval tmp_id1 = if(match(mitre_attack,""^T\d\d\d""), mitre_attack, null())
| eval technique_id=coalesce(tmp_id0, tmp_id1)
| where NOT isnull(technique_id) 
| table rule_name, technique_id 
| inputlookup mitre_user_rule_technique_lookup append=true 
| inputlookup mitre_app_rule_technique_lookup append=true 
| makemv tokenizer=""([^\n\s]+)"" technique_id 
| mvexpand technique_id 
| dedup rule_name,technique_id 
| join rule_name 
    [| rest services/configs/conf-savedsearches 
    | eval rule_name=title 
    | eval rule_disabled=disabled 
    | rename eai:acl.app as app_name
    | table rule_name,app_name, rule_disabled
        ] 
| eval subtechnique_id=if(match(technique_id,""\.""),technique_id,null())
| eval technique_id=if(match(technique_id,""\.""),replace(technique_id,""\.\d+"",""""),technique_id)
| eval technique_id=mvappend(technique_id,subtechnique_id)
| mvexpand technique_id
| dedup rule_name, technique_id, rule_disabled
| table rule_name, app_name, technique_id, rule_disabled
| outputlookup mitre_all_rule_technique_lookup",None
MITRE ATT&CK Compliance Lookup Gen,1,DA-ESS-MitreContent,"| inputlookup mitre_all_rule_technique_lookup 
| `lookup_technique_tactic_from_rule_name` 
| mvexpand rule_disabled
| dedup rule_name, technique_id, rule_disabled
| stats values(technique_id) as technique_id by rule_name, rule_disabled 
| stats count,count(eval(rule_disabled=""0"")) as enabled_count by technique_id
| eval enabled_percentage=((enabled_count/count)*100) 
| lookup mitre_tt_lookup technique_id
| mvexpand technique_name 
| dedup technique_id 
| table technique_id, technique_name, enabled_percentage, enabled_count, count 
| outputlookup mitre_all_rule_compliance_lookup",None
MITRE ATT&CK User Rules Compliance Lookup Gen,1,DA-ESS-MitreContent,"| inputlookup mitre_all_rule_technique_lookup 
| eval app_rule=app_name.""::"".rule_name 
| search NOT 
    [| inputlookup mitre_default_rule_lookup 
    | eval app_rule=app_name.""::"".rule_name 
    | fields app_rule] 
| `lookup_technique_tactic_from_rule_name` 
| mvexpand rule_disabled
| dedup rule_name, technique_id, rule_disabled
| stats values(technique_id) as technique_id by rule_name, rule_disabled 
| stats count,count(eval(rule_disabled=""0"")) as enabled_count by technique_id
| eval enabled_percentage=((enabled_count/count)*100) 
| lookup mitre_tt_lookup technique_id
| mvexpand technique_name 
| dedup technique_id 
| table technique_id, technique_name, enabled_percentage, enabled_count, count
| outputlookup mitre_user_rule_compliance_lookup",None
Monitor Phantom actions for failure,1,SplunkEnterpriseSecuritySuite,"index=phantom_app_run sourcetype=phantom_search status=""failed"" NOT result_data{}.message IN (""*artifact already exists"", ""*Rate limit for 'private' exceeded, limit is 50 per day.*"") NOT (app_name=""Recorded Future Alert Grabber"" AND result_data{}.message=""handle_action exception occurred. Error string: \'\'HTTPError\' object has no attribute \'watchlist_response\'\'"") NOT (app_name=SMTP AND result_data{}.message=""Unable to get access token. Has Test Connectivity been run?"")  NOT effective_user=7
| stats values(result_data{}.message) AS error,
values(effective_user) AS effective_user,
values(result_data{}.parameter.*) AS parameter.*,
values(container_label) AS label,
by action, app_name container, _time
| eval message="""".app_name."" '"".action.""' action has failed on "".container."""", rule_name=""Monitor Phantom actions for failure"", link=""https://phantom-prod.security.corp.amway.net/mission/"".container",
Monitor Suspicious External Scanner,1,SplunkEnterpriseSecuritySuite,"index=pan_logs src_ip=""42.51.211.19"" action=allowed (session_end_reason!=""threat"" AND session_end_reason!=""aged-out"") | table src_ip src_zone dest_ip dest_zone dest_port session_end_reason signature url",
Monthly Okta Corp Authentication Logs,1,search,"index=okta-corp sourcetype=""OktaIM2:log"" | stats count by _time, index, sourcetype, actor.displayName, signature, action, eventtype, src, dest",
Multiple License Overages,1,search,"index=_telemetry (host=*.*splunk*.* NOT host=sh*.*splunk*.*) source=*license_usage_summary.log* TERM(""type=RolloverSummary"")
| rex field=_raw ""^(?<timestring>\d\d-\d\d-\d{4}\s\d\d:\d\d:\d\d.\d{3}\s\+\d{4})""
| eval _time=strptime(timestring,""%m-%d-%Y %H:%M:%S.%N%z"")
| eval _time=relative_time(_time, ""-1d@m"")
| bin _time span=1d
| stats latest(b) AS b by slave, pool, _time
| timechart span=1d sum(b) AS ""volume"" fixedrange=true
| eval GB=round(volume/pow(2,30),3)
| append
    [| search (index=summary source=""splunk-entitlements"")
    | bin _time span=1d
    | stats max(ingest_license) as license by _time]
| stats values(*) as * by _time
| rename license as license_limit
| fields - volume
| eval overage=if(GB>license_limit AND license_limit!=0, ""yes"", ""no"")
| where overage==""yes""
| stats values(license_limit) AS license_limit, count as overage_count
| appendcols [search earliest=-4h index=_internal (host=idx*.*splunk*.* OR host=si*.*splunk*.*) sourcetype=splunkd group=per_Index_thruput series!=_* |stats sum(kb) as kb by series | eval GB=kb/1000000 | eventstats sum(GB) AS total_GB | sort 5 - GB | eval percent = tostring(round(100*(GB/total_GB))) + ""%"" | eval column=series + "" ("" + percent + "")""|table column | transpose | eval top_indexes='row 1' + "" "" + 'row 2'+ "" "" + 'row 3' + "" "" + 'row 4' + "" "" + 'row 5' | table top_indexes]
| appendcols [| rest /services/server/info
  | rex field=host "".*?\.(?<customer>\w+)\.splunkcloud.com""
  | table customer
  | eval customer=case(customer==""sistack2"", ""sompo"", customer==""timbit"", ""childrensmercy"", 1==1, customer)]
| where overage_count >= 5",
Network - ATL - AS400 - AS400 Personal Information Query Same Item Reached 200 Times - Rule,1,DA-ESS-EndpointProtection,"index=accesslog-gcr sourcetype=dbaudit source=as400aplog RPWBB4!=EC_DOWNINQ
| bin _time span=1d 
| eventstats count by RPAIZS,_time 
| table RPAIZS,_time,count,RPADVS,RPAEPA,RPDTTM,RPWBB4,RPAEUT,_time 
| where (RPAIZS=""711"" AND count>=10542) OR (RPAIZS=""712"" AND count>=1447) OR (RPAIZS=""731"" AND count>=3000) OR (RPAIZS=""732"" AND count>=1314) OR (RPAIZS=""781"" AND count>=613) OR (RPAIZS=""782"" AND count>=485) OR (RPAIZS=""761"" AND count>=13002)
| table RPDTTM,RPADVS,RPAEPA,RPAIZS,RPAEUT,RPWBB4,syskey,_time
| rename RPDTTM as End_Time,RPWBB4 as Function_ID,RPADVS as UserName,RPAEPA as Distributor_ID,RPAIZS as Department_ID,RPAEUT as Center_ID
| stats count,values(Center_ID) as Center_ID, values(Function_ID) as Function_ID, values(Department_ID) as Department_ID by Distributor_ID,UserName,_time
| where count >= 200
| eval Device_Vendor=""Amway Taiwan"", Device_Product=""AS400 Application""",
Network - Communication Rule Tracker - Lookup Gen,1,SA-NetworkProtection,"| tstats `summariesonly` count from datamodel=Network_Traffic.All_Traffic where All_Traffic.rule!=unknown by _time,All_Traffic.dvc,All_Traffic.rule,All_Traffic.vendor_product span=1d | `drop_dm_object_name(""All_Traffic"")` | convert timeformat=""%m"" ctime(_time) as month | convert timeformat=""%Y"" ctime(_time) as year| stats sum(count) as count by month,year,dvc,rule,vendor_product | eval _key=sha1(month.""|"".year.""|"".dvc.""|"".rule.""|"".vendor_product) | dedup _key | lookup communication_rule_tracker _key OUTPUTNEW count as lookup_count | eval count=(count+if(isnum(lookup_count), lookup_count, 0)), date=month.""-01-"".year | convert timeformat=""%m-%d-%Y"" mktime(date) as _time | `daysago(396)`| fields - _time,date,dayDiff,lookup_count | outputlookup append=T key_field=_key communication_rule_tracker | stats count",None
Network - GCR - FW - Several Suspicious Port Connections from Private Cloud - Rule,1,DA-ESS-NetworkProtection,"index=pan_logs tag=gcr_pan type=TRAFFIC src_ip=10.210.* OR src_ip=10.211.* (dest_port=22 OR dest_port=23) 
    (dvc_name=""GZ_DR_SDN_PAN01"" OR dvc_name=""GZ_MFG_DMZ_IPS01"" OR dvc_name=""GZ_CITIC_LAN_IPS01"" )
    NOT `ACCL_List_IP_AssetScanner(src_ip)`
    NOT `GCR_List_IP_VAScanner(src_ip)` 
| eventstats dc(dest_ip) as EventCount by src_ip,rule,dest_zone 
| where EventCount>=10 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - Suspicous Port Connection from Private Cloud"" 
| table Alert_name,Trigger_Time,log_subtype,region,action,app,application,src_ip,src_port,src_user,user,src_zone,dest_ip,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat",
Network - GCR - FW - WebLogic XMLDecoder Blacklist Connection Notable - Rule,1,DA-ESS-NetworkProtection,"index=pan_logs tag=gcr_pan type=TRAFFIC rule=""WebLogic_XMLDecoder_IP_Block"" src_ip=10.* 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - WebLogic XMLDecoder Blacklist Connection"" 
| table Alert_name,Trigger_Time,log_subtype,region,action,app,application,src_ip,src_port,src_user,user,src_zone,dest_ip,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"" , "") 
| eval _time=strptime(Trigger_Time,""%Y-%m-%d %T"")",
Network - GCR - FW [Critical] - Successful High Risk Port Access from Internet - Rule,1,DA-ESS-NetworkProtection,"`GCR_Events_FW_DC` transport=TCP action=allow* rule!=intrazone-default 
    (src_zone=outside OR src_zone=192outside OR src_zone=WAN OR src_zone=Untrust OR src_zone=fw_outside)
    AND (dest_ip=10.*) 
    ( 
    (dest_port=3389 OR dest_port=445 OR dest_port=139 OR dest_port=23 OR dest_port=1433 OR dest_port=50000 OR dest_port=7001 OR dest_port=7003 OR dest_port=7004) 
    OR 
    (dest_port=22 AND (dest_ip!=10.143.58.247 AND dest_ip!=10.143.60.23 AND dest_ip!=10.143.236.35 )) 
    OR 
    (dest_port=21 dest_ip!=10.143.60.23) 
    OR
    (dest_port=137 dest_port=138 dest_ip!=192.168.*)
    )
    NOT (dest_ip=10.143.58.116 AND src_ip=183.62.24.251) 
    NOT (rule=vpn_access dest_zone=vpn_inside) 
    NOT ( dest_ip=10.143.61.199 AND dest_ip=7003) 
    NOT (dest_ip=192.168.1.20 AND src_ip=192.143.0.7*) 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| table _time,log_subtype,region,action,app,application,src_ip,src_country,src_ip_zone,src_port,src_user,user,src_zone,dest_ip,dest_ip_zone,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","")
| dedup src_ip",
Network - GCR - FW [Critical] - Unauthorized Port Access from Internet Notable - Rule,1,DA-ESS-NetworkProtection,"index=pan_logs tag=gcr_pan type=TRAFFIC transport=TCP action=allow* rule!=intrazone-default 
    (src_zone=outside OR src_zone=192outside OR src_zone=WAN OR src_zone=Untrust OR src_zone=fw_outside)
    AND (dest_ip=10.* OR dest_ip=192.168.*) 
    ( 
    (dest_port=3389 OR dest_port=445 OR dest_port=139 OR dest_port=23 OR dest_port=1433 OR dest_port=50000 OR dest_port=7001 OR dest_port=7003 OR dest_port=7004) 
    OR 
    (dest_port=22 AND (dest_ip!=10.143.58.247 AND dest_ip!=10.143.60.23 )) 
    OR 
    (dest_port=21 dest_ip!=10.143.60.23) 
    OR
    (dest_port=137 dest_port=138 dest_ip!=192.168.*)
    )
    NOT (dest_ip=10.143.58.116 AND src_ip=183.62.24.251) 
    NOT (rule=vpn_access dest_zone=vpn_inside) 
    NOT ( dest_ip=10.143.61.199 AND dest_ip=7003) 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW [Critical] - Unauthorized Port Access from Internet"" 
| table Alert_name,Trigger_Time,log_subtype,region,action,app,application,src_ip,src_port,src_user,user,src_zone,dest_ip,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"" , "") 
| eval _time=strptime(Trigger_Time,""%Y-%m-%d %T"")",
Network - GCR - IPS - Unblocked High Risk Attack from DMZ to Internal - Rule,1,DA-ESS-NetworkProtection,"index=pan_logs tag=gcr_pan sourcetype=""pan:threat"" 
    AND log_subtype=vulnerability
    AND (dvc_name=GZ_CITIC_LAN_IPS01 OR dvc_name=GZ_MGF_LAN_IPS01) 
    AND threat!=""*WebLogic*"" threat!=""Sun*"" src_ip!=""10.140.56.*"" src_ip!=""10.143.56.*"" 
    NOT ( (application=ssh src_ip=10.143.34.51 (dest_ip=10.143.34.72 OR dest_ip=10.143.34.73)) OR (src_ip=10.140.15.196 dest_ip=10.143.173.52 dest_port=389) ) 
    NOT ( (dest_ip=10.143.17.184 OR dest_ip=10.143.172.134) OR (src_ip=10.143.16.98 OR src_ip=10.140.18.172 OR src_ip=10.142.65.22 OR src_ip=10.142.8.42 OR src_ip=10.140.193.41 OR src_ip=10.141.8.80) OR (src_ip=10.143.17.210) dest_port=445 )
    AND dest_ip!=10.140.20.42 threat!=""HTTP:User Authentication Brute Force Attempt(40006)"" threat!=""HTTP Unauthorized Brute Force Attack(40031)"" 
| eval src_ip=if(cidrmatch(""10.140.57.0/21"",src_ip) OR cidrmatch(""10.143.57.0/21"",src_ip) OR cidrmatch(""10.140.228.1/22"",src_ip) OR src_ip=""10.140.232.*"" OR src_ip=""10.140.233.*"" OR src_ip=""10.140.234.*"" OR src_ip=""10.140.235.*"" OR src_ip=""10.140.236.*"" OR src_ip=""10.140.237.*"" OR src_ip=""10.143.60.*"" OR src_ip=""10.143.61.*"" OR cidrmatch(""10.143.158.1/23"",src_ip) OR src_ip=""10.143.160.*"" OR src_ip=""10.143.161.*"" OR src_ip=""10.143.162.*"" OR src_ip=""10.143.163.*"" OR src_ip=""10.143.164.*"" OR src_ip=""10.143.165.*"" OR src_ip=""10.143.166.*"" OR src_ip=""10.143.167.*"" OR src_zone=""DMZ*"",src_ip,NULL) 
| where src_ip!=""NULL"" 
| regex severity=""high|critical"" 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - IPS - Unblocked High Risk Attack from DMZ to Internal"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name EventCount  Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_ip_zone src_port src_user src_zone threat type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name",
Network - HDSI AWS Guardduty Detection - Rule,1,SplunkEnterpriseSecuritySuite,"index=aws-guardduty sourcetype=""aws:cloudwatch:guardduty"" severity IN (high,critical) NOT ""value1 = undefined"" 
| eval src_ip=coalesce('detail.service.action.networkConnectionAction.remoteIpDetails.ipAddressV4','detail.service.action.awsApiCallAction.remoteIpDetails.ipAddressV4','detail.service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.ipAddressV4','detail.service.action.portProbeAction.portProbeDetails{}.remoteIpDetails.ipAddressV4','detail.resource.instanceDetails.networkInterfaces{}.publicIp','detail.sourceIPAddress')
| eval signature=coalesce('signature','detail-type','subject')
| eval description=coalesce('body','description')
| search NOT [inputlookup hdsi_gns_public_external_addresses.csv | rename ip_cidr as src_ip | table src_ip]
| lookup p_default_ip_risklist.csv local=true Name as src_ip OUTPUT Risk EvidenceDetails
| fillnull value=null
| search NOT (src_ip=null signature=null category=null) NOT src_ip IN (""10.125.18.125/25"", ""10.130.88.128/25"", ""10.133.127.64/26"") NOT dest_ip_internal IN (""10.125.18.125/25"", ""10.130.88.128/25"", ""10.133.127.64/26"")
| stats count
values(Risk) as rf_risk_score
values(EvidenceDetails) as rf_evidencedetails
values(severity) as severity
values(action) as action
values(AccountID) as accountId
values(instanceId) as instanceId
values(region) as region
values(dest_ip_internal) as dest_ip_internal
values(resource.instanceDetails.tags{}.value) as instanceDetails
values(user) as user
values(userName) as userName
values(description) as description
values(additionalData.mostRecentRoutingResult.DeEscalationCriteria{}) as DeEscalationCriteria
values(category) as category
by src_ip signature",1133
Network - HDSI External AWS Repeat Failed Logins - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=true count,
      sum(""Authentication.is_Failed_Authentication"") AS failure_count,
      sum(""Authentication.is_Successful_Authentication"") AS success_count,
      values(Authentication.tag) AS tag,
      values(sourcetype) AS sourcetype,
      earliest(_time) AS earliest_time,
      latest(_time) AS latest_time,
      dc(Authentication.dest) AS dest_count,
      dc(Authentication.user) as user_count,
      values(Authentication.signature) AS signature,
      values(Authentication.signature_id) AS signature_id,
      values(Authentication.action) as action
      from datamodel=Authentication
      where `hdsi_ext_ips(""Authentication.src"")` Authentication.action=success OR Authentication.action=failure Authentication.src!=""unknown"" Authentication.user!=""*$"" Authentication.user!=""unknown"" Authentication.src!=""127.0.0.1"" Authentication.src!=""169.254.*"" sourcetype=""*aws*""
      groupby ""Authentication.src"", _time span=1h
      | `drop_dm_object_name(""Authentication"")`
| eval user=lower(mvindex(split(user,""@""),0))
| eval p_fail_src = exact(failure_count / count)
| streamstats window=2 current=t global=f count as event_count earliest(failure_count) as prev_failure_count by src
| eval percent_increase=if(event_count>1, round(((failure_count-prev_failure_count)/prev_failure_count) * 100, 2), null())
| eval HourOfDay=strftime(_time, ""%H"")
| eventstats avg(failure_count) as avgHourOfDay stdev(failure_count) as stdevHourOfDay by src HourOfDay
| eval upperBoundHourOfDay=ceiling(avgHourOfDay+stdevHourOfDay*2)
| bin _time span=1d as day 
| eventstats count as event_count avg(failure_count) as avg stdev(failure_count) as stdev dc(eval(if(success_count>0, day, null()))) as success_day_count by src
| eval upperBoundSrc=ceiling(avg+stdev*2)
| where _time>relative_time(now(), ""-1h"") AND p_fail_src<1 AND success_day_count<7
| where ((failure_count>upperBoundHourOfDay AND failure_count>upperBoundSrc AND percent_increase>100) OR (stdev=0 AND event_count=1 AND failure_count>30) OR (p_fail_src>.95 AND failure_count>30) AND p_fail_src>.5)
| convert ctime(earliest_time) ctime(latest_time) | eval percent_increase=percent_increase.""%""",1110
Network - HDSI Internal Vulnerability Scanner with Non-Blocked Traffic - Rule,1,DA-ESS-NetworkProtection,"| tstats summariesonly=true allow_old_summaries=true count `comment(""HDSI Internal Vulnerability Scanner Detected"")`
          dc(All_Traffic.dest) AS dest_count
          values(sourcetype) AS traffic_sourcetype
          values(All_Traffic.dvc) AS dvc
          latest(_time) AS latest_time
          earliest(_time) AS earliest_time
          values(All_Traffic.dest_port) AS dest_port
          values(All_Traffic.action) AS action
          from datamodel=Network_Traffic.All_Traffic
          where ( `hdsi_rfc1918(""All_Traffic.src"")` AND `hdsi_rfc1918(""All_Traffic.dest"")` 
          ( `hdsi_exclude_guest_wireless(""All_Traffic.src"")` 
          OR `hdsi_exclude_known_scanners(All_Traffic.src)` ) AND All_Traffic.action!=blocked )
          by All_Traffic.src,All_Traffic.dest,_time span=60m
          | `drop_dm_object_name(All_Traffic)`
| join type=inner src
        [ | tstats summariesonly=true allow_old_summaries=true count 
          dc(IDS_Attacks.dest) as ""ids_dest_count"", 
          dc(IDS_Attacks.signature) AS ids_sig_count,
          values(IDS_Attacks.action) AS ids_action,
          values(IDS_Attacks.dest) AS ids_attacks_dest,
          values(IDS_Attacks.signature) AS signature, 
          values(IDS_Attacks.severity) AS severity,
          values(sourcetype) AS ids_sourcetype,
          from datamodel=Intrusion_Detection.IDS_Attacks 
          where ( (IDS_Attacks.severity!=""low"" AND IDS_Attacks.severity!=""informational"" AND NOT (IDS_Attacks.action=""dropped"" OR IDS_Attacks.action=""blocked"")) AND IDS_Attacks.signature!=""Microsoft RPC Endpoint Mapper Detection"" AND `hdsi_rfc1918(""IDS_Attacks.src"")` AND `hdsi_rfc1918(""IDS_Attacks.dest"")`
          AND ( `hdsi_exclude_guest_wireless(""IDS_Attacks.src"")` 
          OR `hdsi_exclude_known_scanners(IDS_Attacks.src)` )) AND sourcetype!=""okta:im""
          by IDS_Attacks.src,_time span=60m
              | search ((""ids_dest_count""=1 AND ids_sig_count >=2) OR ids_dest_count>1)
              | fields IDS_Attacks.src, ids_dest_count, ids_attacks_dest, ids_sourcetype, ids_action, ids_sig_count, signature, severity
              | rename IDS_Attacks.src AS src ]
| stats sum(count) AS total_count,
        sum(dest_count) AS total_dest_count, 
        sum(ids_dest_count) AS ids_event_count, 
        values(ids_sig_count) AS ids_sig_count, 
        values(ids_action) AS ids_action,
        earliest(_time) AS first_time, 
        latest(_time) AS last_time, 
        values(traffic_sourcetype) AS traffic_sourcetype, 
        values(dvc) AS dvc,
        values(severity) AS severity_id,
        values(ids_sourcetype) AS ids_sourcetype, 
        dc(dest_port) AS dest_port_count, 
        values(action) AS action, 
        values(signature) AS signature by src
| convert ctime(last_time) ctime(first_time)",
Network - HDSI KOR External Threat Detected (by events) - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=true allow_old_summaries=true 
        values(IDS_Attacks.tag) as orig_tag,
        values(""IDS_Attacks.dest""), as dest,
        values(""IDS_Attacks.dvc"") as dvc,
        values(IDS_Attacks.action) as action,
        values(sourcetype) as sourcetype,
        values(IDS_Attacks.signature) as signature,
        dc(IDS_Attacks.signature) as count 
  from datamodel=Intrusion_Detection.IDS_Attacks  
  where IDS_Attacks.tag!=""hdsi_suppress_vuln_targets"" (IDS_Attacks.dvc=""*KOR*"" OR IDS_Attacks.dvc=""10.181.222.40"" OR IDS_Attacks.dvc=""10.181.222.250"" OR IDS_Attacks.dvc=""10.187.12.10"") (`hdsi_exclude_known_scanners(IDS_Attacks)`)  NOT (`hdsi_rfc1918(IDS_Attacks.src)`) NOT IDS_Attacks.signature=""*Masscan*""
NOT IDS_Attacks.src=""103.9.32.*""
NOT IDS_Attacks.src=""103.9.33.*""
NOT IDS_Attacks.severity=""informational"" NOT IDS_Attacks.severity=""low"" NOT IDS_Attacks.src=""N/A""
  by ""IDS_Attacks.src""
| `drop_dm_object_name(IDS_Attacks)`
| join type=outer src [| inputlookup p_default_ip_risklist.csv| table Name Risk | rename Name as src]
| rename Risk as recorded_future_risk_rating
| where count>=10",1107
Network - HDSI KOR External Threat Detected (by targets) - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=true allow_old_summaries=true 
        values(IDS_Attacks.tag) as orig_tag,
        values(""IDS_Attacks.dest"") AS dest,
        values(""IDS_Attacks.dvc"") as dvc,
        values(IDS_Attacks.action) as action,
        values(sourcetype) as sourcetype,
        values(IDS_Attacks.signature) as signature,
        dc(IDS_Attacks.dest) as count 
  from datamodel=Intrusion_Detection.IDS_Attacks 
  where IDS_Attacks.tag!=""hdsi_suppress_vuln_targets"" (IDS_Attacks.dvc=""*KOR*"" OR IDS_Attacks.dvc=""10.181.222.40""  OR IDS_Attacks.dvc=""10.181.222.250"" OR IDS_Attacks.dvc=""10.187.12.10"") (`hdsi_exclude_known_scanners(IDS_Attacks)`)  NOT (`hdsi_rfc1918(IDS_Attacks.src)`) NOT IDS_Attacks.signature=""*Masscan*""
NOT IDS_Attacks.src=""103.9.32.*""
NOT IDS_Attacks.src=""103.9.33.*""
NOT IDS_Attacks.severity=""informational"" NOT IDS_Attacks.severity=""low"" NOT IDS_Attacks.src=""N/A""
  by ""IDS_Attacks.src""
| `drop_dm_object_name(IDS_Attacks)`
| join type=outer src [| inputlookup p_default_ip_risklist.csv | table Name Risk | rename Name as src]
| rename Risk as recorded_future_risk_rating
| where count>=10",1107
Network - HDSI PAN Sunburst Detection - Rule,1,SplunkEnterpriseSecuritySuite,"index=pan_logs ((83225 threat_id=""83225"") OR (SUNBURST signature=""*SUNBURST*""))
| convert ctime(_time) AS orig_time
| stats count 
values(dest) as dest 
values(app) as app 
values(action) as action 
values(signature) as signature 
values(orig_time) as orig_time 
by src",1005
Network - HDSI Vulnerability Scanner Detected (by events) - Rule,1,DA-ESS-NetworkProtection,"| tstats summariesonly=true allow_old_summaries=true 
        values(IDS_Attacks.tag) as tag,
        values(""IDS_Attacks.dest""),
        values(IDS_Attacks.dvc) as dvc
        dc(IDS_Attacks.signature) as count 
  from datamodel=Intrusion_Detection.IDS_Attacks 
  where IDS_Attacks.signature!=""NetBIOS nbtstat query"" IDS_Attacks.tag!=""hdsi_suppress_vuln_events""  (`hdsi_exclude_known_scanners(IDS_Attacks)`) NOT sourcetype=""okta:im""
  by ""IDS_Attacks.src""
| `drop_dm_object_name(IDS_Attacks)`
| where count>25",
Network - HDSI Vulnerability Scanner Detected (by targets) - Rule,1,DA-ESS-NetworkProtection,"| tstats summariesonly=true allow_old_summaries=true 
        values(IDS_Attacks.tag) as tag,
        values(""IDS_Attacks.dest"") AS dest,
        values(host) as host, 
        dc(IDS_Attacks.dest) as count 
  from datamodel=Intrusion_Detection.IDS_Attacks 
  where IDS_Attacks.signature!=""NetBIOS nbtstat query"" NOT IDS_Attacks.tag=""hdsi_suppress_vuln_targets""  (`hdsi_exclude_known_scanners(IDS_Attacks)`) NOT sourcetype=""okta:im""
  by ""IDS_Attacks.src""
| `drop_dm_object_name(IDS_Attacks)`
| where count>25",
Network - HDSI Vulnerability Scanner Detected Internal - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=true allow_old_summaries=true 
          values(IDS_Attacks.action) AS action, 
          values(IDS_Attacks.severity) AS severity, 
          values(IDS_Attacks.category) AS category, 
          values(sourcetype) AS sourcetype, 
          from datamodel=Intrusion_Detection.IDS_Attacks 
          where IDS_Attacks.severity!=""low"" IDS_Attacks.severity!=""informational"" `hdsi_rfc1918(IDS_Attacks.src)` `hdsi_vuln_scan_filter` 
          by IDS_Attacks.src IDS_Attacks.dest IDS_Attacks.signature _time span=60m 
| rename IDS_Attacks.* AS * 
| bin _time span=1d as day 
| eventstats dc(day) as day_count by src signature 
| stats dc(dest) as dest_count 
        dc(signature) as sig_count 
        values(action) as action 
        values(dest) as dest 
        values(category) as category 
        values(signature) as signature 
        values(severity) as orig_severity 
        values(sourcetype) as orig_sourcetype 
        values(day_count) as signature_day_count 
        by src _time 
| search sig_count>=20 OR dest_count>=20 signature_day_count=1 
| where _time>=relative_time(now(), ""-4h"") | rename _time as orig_time 
| `hdsi_vulnerability_scanner_detected_internal_customizations`",1046
Network - HDSI: AWS GuardDuty Port Probe Events - Rule,1,SplunkEnterpriseSecuritySuite,"index=aws-guardduty sourcetype=aws:cloudwatch:guardduty detail.description=""EC2 instance has an unprotected port which is being probed by a known malicious host.""
| rename detail.service.action.portProbeAction.portProbeDetails{}.localPortDetails.port as dest_port, detail.resource.instanceDetails.networkInterfaces{}.securityGroups{}.groupId as security_group_id, detail.resource.instanceDetails.networkInterfaces{}.securityGroups{}.groupName as security_group_name,detail.description as signature
 | stats dc(src) as src_count,dc(dest) as dest_count,values(security_group_name) as security_group_name,values(security_group_id) as security_group_id,count by AccountName,AccountDescription,AccountID,signature,dest_port | where (dest_port=""22"" OR dest_port=""3389"") | sort - AccountName",1046
Network - HDSI: Excessive Coinhive Traffic - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats values(Web.url_category) as ""url_category"",values(Web.url) as ""url"",values(Web.dest) as ""dest"",count from datamodel=Web.Web where (Web.url=""**coinhive*"") `hdsi_exclude_guest_wireless(Web.src)` `hdsi_exclude_known_scanners(Web)` `hdsi_exclude_email_servers(Web)` by Web.user,Web.src,Web.action,Web.dvc | `drop_dm_object_name(Web)` | where count>10",1064
Network - HDSI: Excessive High or Critical IPS Traffic - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=t values(IDS_Attacks.dvc) as dvc,values(IDS_Attacks.dest) as dest,values(IDS_Attacks.src_zone) as ""src_zone"",values(IDS_Attacks.dest_zone) as ""dest_zone"",values(IDS_Attacks.severity) as severity,values(IDS_Attacks.action) as action,values(IDS_Attacks.user) as ""user"",count from datamodel=Intrusion_Detection.IDS_Attacks where (IDS_Attacks.severity=""high"" OR IDS_Attacks.severity=""critical"" (IDS_Attacks.tag=""hdsi_internet_gateways"") (IDS_Attacks.src_zone=""Trust"" IDS_Attacks.dest_zone!=""Trust"") OR (IDS_Attacks.src_zone!=""Trust"" IDS_Attacks.dest_zone=""Trust"")) `hdsi_exclude_guest_wireless(IDS_Attacks.src)` `hdsi_exclude_known_scanners(IDS_Attacks)` `hdsi_exclude_email_servers(IDS_Attacks)` by IDS_Attacks.src,IDS_Attacks.signature,sourcetype | `drop_dm_object_name(IDS_Attacks)`| where count>=100",1133
Network - HDSI: Excessive Malware or C2 Traffic Over 1 Day - Rule,1,DA-ESS-NetworkProtection,"| tstats summariesonly=t count from datamodel=Web.Web where (Web.category=""malware"" OR Web.category=""command-and-control"") `hdsi_exclude_guest_wireless(Web.src)` `hdsi_exclude_known_scanners(Web)` `hdsi_rfc1918(Web.src)` by ""Web.src"",""Web.user"",""Web.category"",""Web.dvc"" | `drop_dm_object_name(Web)` | search (category=""malware"" count>250) OR (category=""command-and-control"" count>10)",
Network - HDSI: Excessive Mining Traffic by Application - Rule,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` values(All_Traffic.dest) as dest,count from datamodel=Network_Traffic where ((nodename=All_Traffic) (All_Traffic.app=""coinhive"" OR All_Traffic.app=""coinimp"" OR All_Traffic.app=""crypto-loot"" OR All_Traffic.app=""jsecoin"" OR All_Traffic.app=""stratum-mining-protocol"") `hdsi_exclude_guest_wireless(All_Traffic.src)` `hdsi_exclude_known_scanners(All_Traffic)`) by ""All_Traffic.src"",""All_Traffic.user"",""All_Traffic.action"",""All_Traffic.dvc"",""All_Traffic.app"" | `drop_dm_object_name(All_Traffic)` | where count>=10",
Network - HDSI: Excessive Sinkhole Traffic Over 1 Day - Rule,1,DA-ESS-NetworkProtection,"| tstats summariesonly=t count from datamodel=Network_Traffic where ((nodename = All_Traffic) All_Traffic.dest=""71.19.152.112"" `hdsi_exclude_guest_wireless(All_Traffic.src)` `hdsi_exclude_email_servers(All_Traffic)` `hdsi_exclude_known_scanners(All_Traffic)`) by All_Traffic.action, All_Traffic.src, All_Traffic.dvc, All_Traffic.user, All_Traffic.rule | `drop_dm_object_name(All_Traffic)` | where count > 50",
Network - HDSI: Excessive Snort Alerts Over 1 Day - Rule,1,DA-ESS-NetworkProtection,"| tstats summariesonly=t values(IDS_Attacks.dvc) as dvc,values(IDS_Attacks.dest) as dest,values(IDS_Attacks.severity) as severity,values(IDS_Attacks.action) as action,count from datamodel=Intrusion_Detection.IDS_Attacks where IDS_Attacks.vendor_product=""snort"" `hdsi_exclude_guest_wireless(IDS_Attacks.src)` `hdsi_exclude_known_scanners(IDS_Attacks)` `hdsi_exclude_email_servers(IDS_Attacks)` by IDS_Attacks.src,IDS_Attacks.signature,sourcetype  | `drop_dm_object_name(IDS_Attacks)`| where count>=100",
Network - HDSI: Excessive Spyware Activity Detected Over 1 Day - Rule,1,DA-ESS-NetworkProtection,"| tstats summariesonly=t values(IDS_Attacks.signature) as signature, values(IDS_Attacks.dest) as dest, count from datamodel=Intrusion_Detection where ((nodename = IDS_Attacks.Spyware) (IDS_Attacks.severity=critical OR IDS_Attacks.severity=high) (IDS_Attacks.action!=sinkhole) (`hdsi_rfc1918(IDS_Attacks.src)`) (`hdsi_exclude_guest_wireless(IDS_Attacks.src)`) (`hdsi_exclude_known_scanners(IDS_Attacks)`) NOT (`hdsi_rfc1918(IDS_Attacks.dest)`)) by IDS_Attacks.action, IDS_Attacks.src, IDS_Attacks.user, IDS_Attacks.severity, IDS_Attacks.dvc  | `drop_dm_object_name(IDS_Attacks)` | where count >= 10",
Network - HDSI: Inbound Allowed IDS to eDMZ - Rule,1,DA-ESS-NetworkProtection,"`cim_Intrusion_Detection_indexes` tag=ids tag=attack action=""allowed"" signature!=""Remote Port*"" severity!=""low"" severity!=""medium"" severity!=""informational"" dvc=""*eDMZ*"" (src_zone=""Ada-Untrst-eDMZ"" OR src_zone=""SB-Untrust-eDMZ"") `hdsi_exclude_known_scanners` NOT `hdsi_rfc1918(src)`
| stats values(action) as ""action"",values(src_zone) as ""src_zone"",values(dvc) as ""dvc"",values(src) as ""src"",values(dest) as ""dest"",values(tag) as ""tag"",dc(dest) as ""count"" by signature,threat_id,severity,sourcetype
| fillnull value="""" 
| `drop_dm_object_name(IDS_Attacks)`",
Network - IDS Attack Tracker - Lookup Gen,1,SA-NetworkProtection,"| tstats summariesonly=true min(""_time"") as ""firstTime"",max(""_time"") as ""lastTime"" from datamodel=""Intrusion_Detection"".""IDS_Attacks"" by ""IDS_Attacks.ids_type"",""IDS_Attacks.signature"",""IDS_Attacks.vendor_product"" | rename ""IDS_Attacks.ids_type"" as ""ids_type"",""IDS_Attacks.signature"" as ""signature"",""IDS_Attacks.vendor_product"" as ""vendor_product"" | eval _key=sha1('ids_type'.'signature'.'vendor_product') | dedup _key | lookup ""ids_attack_tracker"" ""_key"" OUTPUTNEW ""firstTime"" as ""lookup_firstTime"",""lastTime"" as ""lookup_lastTime"" | eval ""firstTime""=min('firstTime','lookup_firstTime'),""lastTime""=max('lastTime','lookup_lastTime') | fields - ""lookup_firstTime"",""lookup_lastTime"" | outputlookup append=T key_field=_key ""ids_attack_tracker"" | stats count",None
Network - IDS Category Tracker - Lookup Gen,1,SA-NetworkProtection,"| tstats summariesonly=true min(""_time"") as ""firstTime"",max(""_time"") as ""lastTime"" from datamodel=""Intrusion_Detection"".""IDS_Attacks"" where ""IDS_Attacks.category""!=""unknown"" by ""IDS_Attacks.category"",""IDS_Attacks.vendor_product"" | rename ""IDS_Attacks.category"" as ""category"",""IDS_Attacks.vendor_product"" as ""vendor_product"" | inputlookup append=T ""ids_category_tracker"" | stats min(""firstTime"") as ""firstTime"",max(""lastTime"") as ""lastTime"" by ""category"",""vendor_product"" | outputlookup override_if_empty=false ""ids_category_tracker"" | stats count",None
Network - Long Lived Connections,1,DA-ESS-NetworkProtection,| tstats `summariesonly` count as current_count from datamodel=Network_Traffic.All_Traffic where earliest=-24h@h latest=+0s All_Traffic.duration>300000000 | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Network_Traffic.All_Traffic where earliest=-48h@h latest=-24h@h All_Traffic.duration>300000000] | `get_delta`,
Network - Port And Protocol Tracker - Lookup Gen,1,SA-NetworkProtection,"| tstats summariesonly=true min(""_time"") as ""firstTime"",max(""_time"") as ""lastTime"" from datamodel=""Network_Traffic"".""All_Traffic"" where ""All_Traffic.action""=""allowed"" by ""All_Traffic.transport"",""All_Traffic.dest_port"" | rename ""All_Traffic.transport"" as ""transport"",""All_Traffic.dest_port"" as ""dest_port"" | inputlookup append=T ""port_protocol_tracker"" | stats min(""firstTime"") as ""firstTime"",max(""lastTime"") as ""lastTime"" by ""transport"",""dest_port"" | outputlookup override_if_empty=false ""port_protocol_tracker"" | stats count",None
Network - Traffic Bytes Tracker - Lookup Gen,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` min(All_Traffic.bytes) as min_bytes,avg(All_Traffic.bytes) as mean_bytes,max(All_Traffic.bytes) as max_bytes,stdev(All_Traffic.bytes) as stdev,count as total_count from datamodel=Network_Traffic.All_Traffic where All_Traffic.bytes>0 | appendcols [| from inputlookup:standard_deviations | rename stdev as standard_deviation] | filldown | fillnull value=0 min_bytes,mean_bytes,max_bytes,stdev,total_count | `stdev_desired_result(standard_deviation,mean_bytes,""gt_bytes"")` | `stdev_desired_result(-standard_deviation,mean_bytes,""lt_bytes"")` | eval search=case(gt_bytes>0 AND lt_bytes>0, ""(All_Traffic.bytes>"".floor(gt_bytes)."" OR All_Traffic.bytes<"".ceil(lt_bytes)."")"",gt_bytes>0 AND lt_bytes<=0,""All_Traffic.bytes>"".floor(gt_bytes),gt_bytes<=0 AND lt_bytes>0,""All_Traffic.bytes<"".ceil(lt_bytes),gt_bytes<=0 AND lt_bytes<=0,""All_Traffic.bytes=-1"") | rename standard_deviation as Z | rename total as total_count | fields min_bytes,mean_bytes,max_bytes,stdev,total_count,Z,search | `round(mean_bytes)` | `round(stdev)` | outputlookup traffic_bytes_tracker | stats count",None
Network - URL Length Tracker - Lookup Gen,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` min(Web.url_length) as min_length,avg(Web.url_length) as mean_length,max(Web.url_length) as max_length,stdev(Web.url_length) as stdev,count as total_count from datamodel=Web.Web where Web.url!=""unknown"" | appendcols [| from inputlookup:standard_deviations | rename stdev as standard_deviation] | filldown | fillnull value=0 min_length,mean_length,max_length,stdev,total_count | `stdev_desired_result(standard_deviation,mean_length,""gt_length"")` | `stdev_desired_result(-standard_deviation,mean_length,""lt_length"")` | eval search=case(gt_length>0 AND lt_length>0,""(Web.url_length>"" .floor(gt_length)."" OR Web.url_length<"".ceil(lt_length)."" OR url_length>"".floor(gt_length)."" OR url_length<"".ceil(lt_length)."")"",gt_length>0 AND lt_length<=0,""(Web.url_length>"".floor(gt_length)."" OR url_length>"".floor(gt_length)."")"",gt_length<=0 AND lt_length>0,""(Web.url_length<"".ceil(lt_length)."" OR url_length<"".ceil(lt_length)."")"",gt_length<=0 AND lt_length<=0,""(Web.url_length=-1 OR url_length=-1)"") | rename standard_deviation as Z | rename total as total_count | fields min_length,mean_length,max_length,stdev,total_count,Z,search | `round(mean_length)` | `round(stdev)` | outputlookup url_length_tracker | stats count",None
Network - User Agent Length Tracker - Lookup Gen,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` min(Web.http_user_agent_length) as min_length,avg(Web.http_user_agent_length) as mean_length,max(Web.http_user_agent_length) as max_length,stdev(Web.http_user_agent_length) as stdev,count as total_count from datamodel=Web.Web where Web.http_user_agent!=""unknown"" | appendcols [| from inputlookup:standard_deviations | rename stdev as standard_deviation] | filldown | fillnull value=0 min_length,mean_length,max_length,stdev,total_count | `stdev_desired_result(standard_deviation,mean_length,""gt_length"")` | `stdev_desired_result(-standard_deviation,mean_length,""lt_length"")` | eval search=case(gt_length>0 AND lt_length>0, ""(Web.http_user_agent_length>"".floor(gt_length)."" OR Web.http_user_agent_length<"".ceil(lt_length)."")"",gt_length>0 AND lt_length<=0,""Web.http_user_agent_length>"".floor(gt_length),gt_length<=0 AND lt_length>0,""Web.http_user_agent_length<"".ceil(lt_length),gt_length<=0 AND lt_length<=0,""Web.http_user_agent_length=-1"") | rename standard_deviation as Z | rename total as total_count | fields min_length,mean_length,max_length,stdev,total_count,Z,search | `round(mean_length)` | `round(stdev)` | outputlookup user_agent_length_tracker | stats count",
Network - Vulnerability Signature Reference - Lookup Gen,1,SA-NetworkProtection,"| tstats `summariesonly` min(_time) as firstTime,max(_time) as lastTime,values(Vulnerabilities.bugtraq) as bugtraq,values(Vulnerabilities.cert) as cert,values(Vulnerabilities.cve) as cve,values(Vulnerabilities.msft) as msft,values(Vulnerabilities.mskb) as mskb,values(Vulnerabilities.xref) as xref from datamodel=Vulnerabilities.Vulnerabilities by Vulnerabilities.signature,Vulnerabilities.vendor_product | `drop_dm_object_name(""Vulnerabilities"")` | inputlookup append=T vuln_signature_reference | `makemv(bugtraq)` | `makemv(cert)` | `makemv(cve)` | `makemv(msft)` | `makemv(mskb)` | `makemv(xref)` | stats min(firstTime) as firstTime,max(lastTime) as lastTime,values(cve) as cve,values(bugtraq) as bugtraq,values(cert) as cert,values(msft) as msft,values(mskb) as mskb,values(xref) as xref by signature,vendor_product | `makesv(bugtraq)` | `makesv(cert)` | `makesv(cve)` | `makesv(msft)` | `makesv(mskb)` | `makesv(xref)` | outputlookup override_if_empty=false vuln_signature_reference | stats count",None
Network - Vulnerability Tracker - Lookup Gen,1,DA-ESS-NetworkProtection,"| tstats summariesonly=true min(""_time"") as ""firstTime"",max(""_time"") as ""lastTime"" from datamodel=""Vulnerabilities"".""Vulnerabilities"" where ""Vulnerabilities.severity"" != ""informational"" AND ""Vulnerabilities.severity"" != ""low"" by ""Vulnerabilities.signature"",""Vulnerabilities.dest"" | rename ""Vulnerabilities.signature"" as ""signature"",""Vulnerabilities.dest"" as ""dest"" | eval _key=sha1('signature'.'dest') | dedup _key | lookup ""vulnerability_tracker"" ""_key"" OUTPUTNEW ""firstTime"" as ""lookup_firstTime"",""lastTime"" as ""lookup_lastTime"" | eval ""firstTime""=min('firstTime','lookup_firstTime'),""lastTime""=max('lastTime','lookup_lastTime') | fields - ""lookup_firstTime"",""lookup_lastTime"" | outputlookup append=T key_field=_key ""vulnerability_tracker"" | stats count",None
Network - Whois Tracker - Checkpoint Gen,1,DA-ESS-NetworkProtection,| tstats `summariesonly` max(_time) as _time from datamodel=Web.Web by Web.dest | rename Web.dest as domain | `truncate_domain(domain)` | stats min(_time) as _time by domain | eval _key=sha1(domain) | dedup _key | lookup whois_tracker _key OUTPUTNEW _key as discard | where isnull(discard) | outputlookup key_field=_key append=T whois_tracker | `outputcheckpoint_whois` | stats count,None
Network - Whois Tracker - Lookup Gen,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` max(_time) as _time,latest(All_Domains.resolved_domain) as resolved_domain,latest(All_Domains.created) as created from datamodel=Domain_Analysis.All_Domains by All_Domains.domain | `drop_dm_object_name(""All_Domains"")` | `truncate_domain(domain)` | eval _key=sha1(domain) | dedup _key | lookup whois_tracker _key OUTPUTNEW _time as lookup_time, resolved_domain as lookup_resolved_domain, created as lookup_created | eval lookup_time=if(isnum(lookup_time), lookup_time, 0), _time=max(_time, lookup_time), resolved_domain=if(_time>lookup_time, resolved_domain, lookup_resolved_domain), created=if(_time>lookup_time, created, lookup_created) | fields domain, _time, resolved_domain, created | search domain=* | outputlookup key_field=_key append=T whois_tracker | stats count",None
Notable - Notable Events Exceeding Analyst Capacity,1,SplunkEnterpriseSecuritySuite,"| `es_notable_events` | search NOT status_group=""Closed"" | stats sum(count) as count by timeDiff_type | transpose | sort 1 + column | rename ""row 1"" as current_count,""row 2"" as historical_count | appendcols [| `incident_review_capacity`] | eval current_count=if(current_count>incident_review_capacity, current_count-incident_review_capacity, 0) | eval historical_count=if(historical_count>incident_review_capacity,historical_count-incident_review_capacity,0) | `get_delta` | table current_count,historical_count,delta",
Notable - Total Events By Access Domain,1,SplunkEnterpriseSecuritySuite,"| `es_notable_events` | search security_domain=access | stats sum(count) as count by timeDiff_type | transpose | sort 1 + column | rename ""row 1"" as current_count,""row 2"" as historical_count | `get_delta` | table current_count,historical_count,delta",
Notable - Total Events By Audit Domain,1,SplunkEnterpriseSecuritySuite,"| `es_notable_events` | search security_domain=audit | stats sum(count) as count by timeDiff_type | transpose | sort 1 + column | rename ""row 1"" as current_count,""row 2"" as historical_count | `get_delta` | table current_count,historical_count,delta",
Notable - Total Events By Endpoint Domain,1,SplunkEnterpriseSecuritySuite,"| `es_notable_events` | search security_domain=endpoint | stats sum(count) as count by timeDiff_type | transpose | sort 1 + column | rename ""row 1"" as current_count,""row 2"" as historical_count | `get_delta` | table current_count,historical_count,delta",
Notable - Total Events By Identity Domain,1,SplunkEnterpriseSecuritySuite,"| `es_notable_events` | search security_domain=identity | stats sum(count) as count by timeDiff_type | transpose | sort 1 + column | rename ""row 1"" as current_count,""row 2"" as historical_count | `get_delta` | table current_count,historical_count,delta",
Notable - Total Events By Network Domain,1,SplunkEnterpriseSecuritySuite,"| `es_notable_events` | search security_domain=network | stats sum(count) as count by timeDiff_type | transpose | sort 1 + column | rename ""row 1"" as current_count,""row 2"" as historical_count | `get_delta` | table current_count,historical_count,delta",
Notable - Total Events By Threat Domain,1,SplunkEnterpriseSecuritySuite,"| `es_notable_events` | search security_domain=threat | stats sum(count) as count by timeDiff_type | transpose | sort 1 + column | rename ""row 1"" as current_count,""row 2"" as historical_count | `get_delta` | table current_count,historical_count,delta",
Oasis Prod - Unhandled Exceptions,169,,'search index=aws-cloudwatch *amwayoasis-prod-green-UnhandledExceptions*' search index=aws-cloudwatch *amwayoasis-prod-green-UnhandledExceptions*,admin
Okta2 app detail,16,TA-Okta_Identity_Cloud_for_Splunk,"index=okta-corp source=okta:im2 AND sourcetype=oktaim2:app | dedup id | table id, name, label, created, lastUpdated, status, signOnMode  | outputlookup okta2_app_detail_lookup source=okta:im2 AND sourcetype=oktaim2:app | dedup id | table id, name, label, created, lastUpdated, status, signOnMode  | outputlookup okta2_app_detail_lookup",
Okta2 app group,16,TA-Okta_Identity_Cloud_for_Splunk,"index=okta-corp source=""okta:im2"" AND sourcetype=""oktaim2:app"" | dedup id | mvexpand assigned_groups{} | table id, assigned_groups{} | rename id as app_id | rename assigned_groups{} as group_id | outputlookup okta2_app_group_lookup source=""okta:im2"" AND sourcetype=""oktaim2:app"" | dedup id | mvexpand assigned_groups{} | table id, assigned_groups{} | rename id as app_id | rename assigned_groups{} as group_id | outputlookup okta2_app_group_lookup",
Okta2 app user,16,TA-Okta_Identity_Cloud_for_Splunk,"index=okta-corp source=""okta:im2"" sourcetype=""oktaim2:appUser"" | dedup appid, userid | rename appid as app_id | rename userid as user_id | table app_id, user_id | outputlookup okta2_app_user_lookup source=""okta:im2"" sourcetype=""oktaim2:appUser"" | dedup appid, userid | rename appid as app_id | rename userid as user_id | table app_id, user_id | outputlookup okta2_app_user_lookup",
Okta2 group detail,16,TA-Okta_Identity_Cloud_for_Splunk,"index=okta-corp source=okta:im2 AND sourcetype=oktaim2:group | dedup id | rename embedded.stats.usersCount as usersCount | rename embedded.stats.appsCount as appsCount | rename embedded.stats.groupPushMappingsCount as groupPushMappingsCount | rename embedded.app.id as app_id | rename profile.name AS name | rename profile.description AS description| table id, type, name, description, usersCount, appsCount, groupPushMappingsCount, app_id | outputlookup okta2_group_detail_lookup source=okta:im2 AND sourcetype=oktaim2:group | dedup id | rename embedded.stats.usersCount as usersCount | rename embedded.stats.appsCount as appsCount | rename embedded.stats.groupPushMappingsCount as groupPushMappingsCount | rename embedded.app.id as app_id | rename profile.name AS name | rename profile.description AS description| table id, type, name, description, usersCount, appsCount, groupPushMappingsCount, app_id | outputlookup okta2_group_detail_lookup",
Okta2 user detail,16,TA-Okta_Identity_Cloud_for_Splunk,"index=okta-corp source=okta:im2 AND sourcetype=oktaim2:user | dedup id | table id, profile.firstName, profile.lastName, profile.login,profile.email,profile.secondEmail,profile.primaryPhone,profile.mobilePhone,profile.state,profile.city,profile.countryCode,profile.zipCode,profile.streetAddress,status,created,lastUpdated,lastLogin,activated | rename id as user_id | rename profile.firstName as firstName | rename profile.lastName as lastName | rename profile.login as loginName | rename profile.email as email | rename profile.secondEmail as secondEmail | rename profile.primaryPhone as primaryPhone | rename profile.mobilePhone as mobilePhone | rename profile.state as state | rename profile.city as city | rename profile.countryCode as countryCode | rename profile.zipCode as zipCode | rename profile.streetAddress as streetAddress | rename created as created_time | rename lastUpdated as lastUpdated_time | rename lastLogin as lastLogin_time | rename activated as activated_time | outputlookup okta2_user_detail_lookup source=okta:im2 AND sourcetype=oktaim2:user | dedup id | table id, profile.firstName, profile.lastName, profile.login,profile.email,profile.secondEmail,profile.primaryPhone,profile.mobilePhone,profile.state,profile.city,profile.countryCode,profile.zipCode,profile.streetAddress,status,created,lastUpdated,lastLogin,activated | rename id as user_id | rename profile.firstName as firstName | rename profile.lastName as lastName | rename profile.login as loginName | rename profile.email as email | rename profile.secondEmail as secondEmail | rename profile.primaryPhone as primaryPhone | rename profile.mobilePhone as mobilePhone | rename profile.state as state | rename profile.city as city | rename profile.countryCode as countryCode | rename profile.zipCode as zipCode | rename profile.streetAddress as streetAddress | rename created as created_time | rename lastUpdated as lastUpdated_time | rename lastLogin as lastLogin_time | rename activated as activated_time | outputlookup okta2_user_detail_lookup",
Palo Alto Daily Event Change,1,SplunkEnterpriseSecuritySuite,"earliest=-2d@d latest=-0d@d index=""_internal"" source=*license_usage.log  idx=pan_logs  | eval date=strftime(_time, ""%m-%d-%y"") | bucket _time span=1d | stats sum(b) as b max(poolsz) as poolsz by pool, date | eval percent = round(b/poolsz * 100,1) | eval GB=round(b/1024/1024/1024,2) | eval ""License GB""=round(poolsz/1024/1024/1024,2) | fields - b poolsz | stats sum(GB) as count by date| transpose | sort 1+ column | rename ""row 2"" as current_count,""row 1"" as historical_count | `get_delta`| table current_count,historical_count,delta | where current_count >1",
Palo Alto Networks - Retrieve ContentPack Apps,1,,'| pancontentpack 172.16.5.254 apps | outputlookup createinapp=true app_lookup' | pancontentpack 172.16.5.254 apps | outputlookup createinapp=true app_lookup,splunk-system-user
Palo Alto Networks - Retrieve ContentPack Threats,1,,'| pancontentpack 172.16.5.254 threats | outputlookup createinapp=true threat_lookup' | pancontentpack 172.16.5.254 threats | outputlookup createinapp=true threat_lookup,splunk-system-user
Performance - Number Of Systems Not Time Synchronizing,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` max(_time) as lastTime from datamodel=Performance.All_Performance where nodename=All_Performance.OS.Timesync All_Performance.OS.Timesync.action=success by All_Performance.dest | `drop_dm_object_name(""All_Performance"")` | `timeDiff(lastTime)` | search timeDiff>86400 | stats count as current_count",
Performance - Number Of Systems With Uptime Anomalies,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` latest(All_Performance.OS.Uptime.uptime) as uptime from datamodel=Performance.All_Performance where earliest=-48h@h latest=+0s nodename=All_Performance.OS.Uptime by All_Performance.dest | `drop_dm_object_name(""All_Performance"")` | where (uptime/86400)>30 | stats count as current_count | appendcols [| tstats `summariesonly` latest(All_Performance.OS.Uptime.uptime) as uptime from datamodel=Performance.All_Performance where earliest=-96h@h latest=-48h@h nodename=All_Performance.OS.Uptime by All_Performance.dest | `drop_dm_object_name(""All_Performance"")` | where (uptime/86400)>30 | stats count as historical_count] | `get_delta`",
Permanent Suppression Made,1,SplunkEnterpriseSecuritySuite,"| rest splunk_server=local /services/alerts/suppressions | table title author search disabled description updated
| rex field=search max_match=100 ""\s(?!source)(?P<fields>(\w+))(=|>|<)""
| stats values(fields) as fields by title author search disabled description updated
| rex field=search max_match=2 ""_time(\<|\>|\=).(?P<time_fields>.[^\s]+)""
| rex field=search max_match=2 ""_time(?P<time_comparators>.[^\d+]*)""
| eval multi_times=if(mvcount(time_fields) > 1, ""True"", ""False"")
| eval start_time=mvindex(time_fields, 0)
| eval end_time=mvindex(time_fields, 1)
| fillnull start_time, end_time value=""0""
| fillnull time_comparators value=""-""
| eval duration=if(start_time!=0 AND end_time!=0, (end_time-start_time)/86400, 0)
| eval type=case(mvcount(time_comparators) == 2 AND like(time_comparators, ""%>%"") AND like(time_comparators, ""%<%""), ""Start and End Times"", like(time_comparators, ""%>%"") AND NOT like(time_comparators, ""%<%""), ""Permanent"", like(time_comparators, ""%<%""), ""End Time"", time_comparators=""-"", ""Permanent"", 1=1, ""-"")
| eval field_count=mvcount(fields) | fillnull field_count value=""0""
| fields title, author, search, type, duration, field_count, disabled description updated
| search type=""Permanent"" OR duration > 7 OR field_count<=1 NOT ([inputlookup HL_known_suppressions.csv | table title] OR [inputlookup HL_tier2_users.csv | table author])
| eval alert_reason=case(type==""Permanent"", ""No End Time Found In Search."", duration >7, ""Extends longer than a week."", field_count<=1, ""Has Only One Field."", 1=1, ""-"")
| join title type=outer [
search index=_audit action=edit_suppressions operation=create earliest=""-30d"" latest=""now"" | rex field=_raw ""object=\""(?<title>.+)\"""" | eval created_at = _time | stats latest(created_at) as created_at by title]
| outputlookup append=t HL_known_suppressions.csv
| table title, description alert_reason, author, search, disabled created_at
| search NOT author=hurricanelabs_serviceaccount
| eval message=""Permanent suppression was created by "".author",
pinger_populate_sites,169,,'search eventtype=pinger:heartbeat | stats count by site | fields site | outputlookup pinger_sites createinapp=true' search eventtype=pinger:heartbeat | stats count by site | fields site | outputlookup pinger_sites createinapp=true,splunk-system-user
Possible Exploitation event in GlobalProtect Portal and Gateway Interfaces,1,SplunkEnterpriseSecuritySuite,index=pan_logs (threat_id=91820 OR threat_id=91855),
RapidDiag Telemetry: CLI access statistics,23,splunk_rapid_diag,"'search index=_internal sourcetype=""splunk_rapid_diag"" splunk_server=""local"" component=cli_internal token_auth=False mode=* action=* result=* 
| table mode, action , result 
| stats count AS data.count by mode, action, result 
| rename mode as data.mode, action as data.action , result AS data.result 
| makejson data.* output=event' index=_internal sourcetype=""splunk_rapid_diag"" splunk_server=""local"" component=cli_internal token_auth=False mode=* action=* result=* 
| table mode, action , result 
| stats count AS data.count by mode, action, result 
| rename mode as data.mode, action as data.action , result AS data.result 
| makejson data.* output=event search index=_internal sourcetype=""splunk_rapid_diag"" splunk_server=""local"" component=cli_internal token_auth=False mode=* action=* result=* 
| table mode, action , result 
| stats count AS data.count by mode, action, result 
| rename mode as data.mode, action as data.action , result AS data.result 
| makejson data.* output=event",splunk-system-user
RapidDiag Telemetry: Execution statistics,23,splunk_rapid_diag,"'search index=_internal sourcetype=""splunk_rapid_diag"" splunk_server=""local"" (component=task OR (component=collector internal=False)) name=* status=* 
| table component, name, status 
| eval name=substr(sha256(name),0,12) 
| stats count AS data.count by component, name, status 
| rename status as data.status, name as data.metricName, component AS data.type 
| makejson data.* output=event' index=_internal sourcetype=""splunk_rapid_diag"" splunk_server=""local"" (component=task OR (component=collector internal=False)) name=* status=* 
| table component, name, status 
| eval name=substr(sha256(name),0,12) 
| stats count AS data.count by component, name, status 
| rename status as data.status, name as data.metricName, component AS data.type 
| makejson data.* output=event search index=_internal sourcetype=""splunk_rapid_diag"" splunk_server=""local"" (component=task OR (component=collector internal=False)) name=* status=* 
| table component, name, status 
| eval name=substr(sha256(name),0,12) 
| stats count AS data.count by component, name, status 
| rename status as data.status, name as data.metricName, component AS data.type 
| makejson data.* output=event",splunk-system-user
RapidDiag Telemetry: UI access statistics,23,splunk_rapid_diag,"'search index=_internal sourcetype=""splunkd_ui_access"" app/splunk_rapid_diag/task_manager OR app/splunk_rapid_diag/task_template_wizard OR app/splunk_rapid_diag/data_collection OR app/splunk_rapid_diag/reference_guide method=GET splunk_server=""local"" 
| table user, uri_path, status 
| stats count AS data.count by user, uri_path, status 
| eval [| rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry 
| table telemetrySalt 
| format 
| rex field=search mode=sed ""s/[()]//g""] 
| eval data.user=substr(sha256(telemetrySalt + user),0,12) 
| rename uri_path as data.uri_path, status as data.status 
| makejson data.* output=event' index=_internal sourcetype=""splunkd_ui_access"" app/splunk_rapid_diag/task_manager OR app/splunk_rapid_diag/task_template_wizard OR app/splunk_rapid_diag/data_collection OR app/splunk_rapid_diag/reference_guide method=GET splunk_server=""local"" 
| table user, uri_path, status 
| stats count AS data.count by user, uri_path, status 
| eval [| rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry 
| table telemetrySalt 
| format 
| rex field=search mode=sed ""s/[()]//g""] 
| eval data.user=substr(sha256(telemetrySalt + user),0,12) 
| rename uri_path as data.uri_path, status as data.status 
| makejson data.* output=event search index=_internal sourcetype=""splunkd_ui_access"" app/splunk_rapid_diag/task_manager OR app/splunk_rapid_diag/task_template_wizard OR app/splunk_rapid_diag/data_collection OR app/splunk_rapid_diag/reference_guide method=GET splunk_server=""local"" 
| table user, uri_path, status 
| stats count AS data.count by user, uri_path, status 
| eval [| rest splunk_server=local /servicesNS/nobody/splunk_instrumentation/telemetry 
| table telemetrySalt 
| format 
| rex field=search mode=sed ""s/[()]//g""] 
| eval data.user=substr(sha256(telemetrySalt + user),0,12) 
| rename uri_path as data.uri_path, status as data.status 
| makejson data.* output=event",splunk-system-user
Recorded Future - Correlation Search,1,TA-recordedfuture,| localop | rest splunk_server=local /services/TA-recordedfuture/correlation_search,
Recorded Future - Download Risk Lists,1,TA-recordedfuture,| localop | rest splunk_server=local /services/TA-recordedfuture/sync_correlation_feeds,
Recorded Future - Purge Old Correlation Data,1,TA-recordedfuture,| localop | rest splunk_server=local /services/TA-recordedfuture/purge_correlation_caches,
Recorded Future - Purge Old Sigma Rules Detections,1,TA-recordedfuture,| localop | rest splunk_server=local /services/TA-recordedfuture/purge_sigma_detection_cache,
Recorded Future - Sigma Search,1,TA-recordedfuture,| localop | rest splunk_server=local /services/TA-recordedfuture/sigma_search,
Recorded Future - Sync UI Elements,1,TA-recordedfuture,| localop | rest splunk_server=local /services/TA-recordedfuture/sync_ui_elements,
Recorded Future - Sync Use Cases,1,TA-recordedfuture,| localop | rest splunk_server=local /services/TA-recordedfuture/sync_usecases,
Recorded Future - Update Sigma State,1,TA-recordedfuture,| localop | rest splunk_server=local /services/TA-recordedfuture/save_sigma_rule?state=update,
Recorded Future Correlation:Default_Domain_Threat_Feed,1,TA-recordedfuture,"| localop
| rest splunk_server=local /services/TA-recordedfuture/rba risklist=""p_default_domain_risklist""",
Recorded Future Correlation:Default_IP_Threat_Feed,1,TA-recordedfuture,"| localop
| rest splunk_server=local /services/TA-recordedfuture/rba risklist=""p_default_ip_risklist""",
Recorded Future Correlation:Default_URL_Threat_Feed,1,TA-recordedfuture,"| localop
| rest splunk_server=local /services/TA-recordedfuture/rba risklist=""p_default_url_risklist""",
Risk - Aggregated Other Risk,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as current_count from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s All_Risk.risk_object_type=""other"" by All_Risk.risk_object_type | appendcols [| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as historical_count from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h All_Risk.risk_object_type=""other"" by All_Risk.risk_object_type] | `get_ksi_fields(current_count, historical_count)` | `drop_dm_object_name(""All_Risk"")` | `mltk_findbest(""app:total_risk_by_object_type_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
Risk - Aggregated Risk,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as current_count from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as historical_count from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h] | `get_ksi_fields(current_count, historical_count)` | `mltk_findbest(""app:total_risk_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
Risk - Aggregated System Risk,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as current_count from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s All_Risk.risk_object_type=""system"" by All_Risk.risk_object_type | appendcols [| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as historical_count from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h All_Risk.risk_object_type=""system"" by All_Risk.risk_object_type] | `get_ksi_fields(current_count, historical_count)` | `drop_dm_object_name(""All_Risk"")` | `mltk_findbest(""app:total_risk_by_object_type_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
Risk - Aggregated User Risk,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as current_count from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s All_Risk.risk_object_type=""user"" by All_Risk.risk_object_type | appendcols [| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as historical_count from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h All_Risk.risk_object_type=""user"" by All_Risk.risk_object_type] | `get_ksi_fields(current_count, historical_count)` | `drop_dm_object_name(""All_Risk"")` | `mltk_findbest(""app:total_risk_by_object_type_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
Risk - Distinct Modifier Sources,1,SA-ThreatIntelligence,| tstats `summariesonly` estdc(source) as current_count from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s | appendcols[| tstats `summariesonly` estdc(source) as historical_count from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h] | `get_delta`,
Risk - Distinct Risk Object Count,1,SA-ThreatIntelligence,"| tstats `summariesonly` estdc(""All_Risk.risk_object"") as current_count from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s | appendcols [|tstats `summariesonly` estdc(""All_Risk.risk_object"") as historical_count from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h] | `get_delta` | fields current_count,*",
Risk - Distinct Risk Object Count By Other,1,SA-ThreatIntelligence,"| tstats `summariesonly` estdc(All_Risk.risk_object) as current_count from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s All_Risk.risk_object_type=other by All_Risk.risk_object_type | appendcols [| tstats `summariesonly` estdc(All_Risk.risk_object) as historical_count from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h All_Risk.risk_object_type=other by All_Risk.risk_object_type] | `get_delta` | fields current_count,*",
Risk - Distinct Risk Object Count By System,1,SA-ThreatIntelligence,"| tstats `summariesonly` estdc(All_Risk.risk_object) as current_count from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s All_Risk.risk_object_type=system by ""All_Risk.risk_object_type"" | appendcols [| tstats `summariesonly` estdc(All_Risk.risk_object) as historical_count from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h All_Risk.risk_object_type=system by ""All_Risk.risk_object_type""] | `get_delta` | fields current_count,*",
Risk - Distinct Risk Object Count By User,1,SA-ThreatIntelligence,"| tstats `summariesonly` estdc(All_Risk.risk_object) as current_count from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s All_Risk.risk_object_type=user by All_Risk.risk_object_type | appendcols [| tstats `summariesonly` estdc(All_Risk.risk_object) as historical_count from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h All_Risk.risk_object_type=user by All_Risk.risk_object_type] | `get_delta` | fields current_count,*",
Risk - Median Object Risk Per Day - Model Gen,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as current_count from datamodel=Risk.All_Risk by _time,All_Risk.risk_object,All_Risk.risk_object_type span=1d | `drop_dm_object_name(""All_Risk"")` | fit DensityFunction current_count partial_fit=true dist=norm into app:median_object_risk_1d",None
Risk - Median Object Risk Per Day by Object Type - Model Gen,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as current_count from datamodel=Risk.All_Risk by _time,All_Risk.risk_object,All_Risk.risk_object_type span=1d | `drop_dm_object_name(""All_Risk"")` | fit DensityFunction current_count by risk_object_type partial_fit=true dist=norm into app:median_object_risk_by_object_type_1d",None
Risk - Median Risk Score,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as accum_risk from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s by All_Risk.risk_object | stats median(accum_risk) as current_count | appendcols [| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as accum_risk from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h by All_Risk.risk_object | stats median(accum_risk) as historical_count] | `get_ksi_fields(current_count, historical_count)` | `mltk_findbest(""app:median_object_risk_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
Risk - Median Risk Score By Other,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as accum_risk from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s All_Risk.risk_object_type=""other"" by All_Risk.risk_object, All_Risk.risk_object_type | stats median(accum_risk) as current_count | appendcols [| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as accum_risk from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h All_Risk.risk_object_type=""other"" by All_Risk.risk_object, All_Risk.risk_object_type | stats median(accum_risk) as historical_count] | eval risk_object_type=""other"" | `get_ksi_fields(current_count, historical_count)` | `drop_dm_object_name(""All_Risk"")` | `mltk_findbest(""app:median_object_risk_by_object_type_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
Risk - Median Risk Score By System,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as accum_risk from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s All_Risk.risk_object_type=""system"" by All_Risk.risk_object, All_Risk.risk_object_type | stats median(accum_risk) as current_count | appendcols [| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as accum_risk from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h All_Risk.risk_object_type=""system"" by All_Risk.risk_object, All_Risk.risk_object_type | stats median(accum_risk) as historical_count] | eval risk_object_type=""system"" | `get_ksi_fields(current_count, historical_count)` | `drop_dm_object_name(""All_Risk"")` | `mltk_findbest(""app:median_object_risk_by_object_type_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
Risk - Median Risk Score By User,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as accum_risk from datamodel=Risk.All_Risk where earliest=-24h@h latest=+0s All_Risk.risk_object_type=""user"" by All_Risk.risk_object, All_Risk.risk_object_type | stats median(accum_risk) as current_count | appendcols [| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as accum_risk from datamodel=Risk.All_Risk where earliest=-48h@h latest=-24h@h All_Risk.risk_object_type=""user"" by All_Risk.risk_object, All_Risk.risk_object_type | stats median(accum_risk) as historical_count] | eval risk_object_type=""user"" | `get_ksi_fields(current_count, historical_count)` | `drop_dm_object_name(""All_Risk"")` | `mltk_findbest(""app:median_object_risk_by_object_type_1d"")` | `get_percentage_qualitative(delta, delta_qual)`",
Risk - Refresh Risk Factors - Administrative,1,SA-ThreatIntelligence,| rest splunk_server=local count=0 /services/alerts/risk_factors/_reload,
Risk - Total Risk By Risk Object Type Per Day - Model Gen,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as current_count from datamodel=Risk.All_Risk by _time,All_Risk.risk_object_type span=1d | `drop_dm_object_name(""All_Risk"")` | fit DensityFunction current_count by risk_object_type partial_fit=true dist=norm into app:total_risk_by_object_type_1d",None
Risk - Total Risk Per Day - Model Gen,1,SA-ThreatIntelligence,"| tstats `summariesonly` sum(All_Risk.calculated_risk_score) as current_count from datamodel=Risk.All_Risk by _time span=1d | `drop_dm_object_name(""All_Risk"")` | fit DensityFunction current_count partial_fit=true dist=norm into app:total_risk_1d",None
SCCM: Create Collection Membership Lookup,15,TA_sccm_apptitude,| `sccm_scheduledsearch_collectionmembership`,
SCCM: Create Collections Lookup,15,TA_sccm_apptitude,| `sccm_scheduledsearch_collections`,
search1,1,,"'| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_management_api_inputs |stats count as ""Total Inputs""' | rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_management_api_inputs |stats count as ""Total Inputs""",admin
search2,1,,"'|rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_management_api_inputs| search disabled=0 |rename title as input_name|fields input_name|join input_name [search index=_internal sourcetype=ms:o365:jobinsight:input input_status=*|rename decoded_input_name as input_name|dedup input_name data|search input_status=fail]|stats count as ""Invalid Inputs""' |rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_management_api_inputs| search disabled=0 |rename title as input_name|fields input_name|join input_name [search index=_internal sourcetype=ms:o365:jobinsight:input input_status=*|rename decoded_input_name as input_name|dedup input_name data|search input_status=fail]|stats count as ""Invalid Inputs""",admin
search3,1,,'| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | stats count' | rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | stats count,admin
search4,1,,"'| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | rename title as account_name | fields account_name | join account_name [ search index=""_internal"" sourcetype=""ms:o365:jobinsight:account"" account_status=* |dedup account_name |search account_status = ""invalid"" ] | fields account_name | append [ | rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | rename title as account_name | fields account_name | join account_name [search index=""_internal"" sourcetype=""ms:o365:jobinsight:account"" | search subscription_type=list  subscription_status=* | dedup account_name | search subscription_status=fail  | fields account_name] ] | dedup account_name | stats count' | rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | rename title as account_name | fields account_name | join account_name [ search index=""_internal"" sourcetype=""ms:o365:jobinsight:account"" account_status=* |dedup account_name |search account_status = ""invalid"" ] | fields account_name | append [ | rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | rename title as account_name | fields account_name | join account_name [search index=""_internal"" sourcetype=""ms:o365:jobinsight:account"" | search subscription_type=list  subscription_status=* | dedup account_name | search subscription_status=fail  | fields account_name] ] | dedup account_name | stats count",admin
search5,1,,"'| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_management_api_inputs | eval Status=if(disabled=0,""Enabled"",""Disabled"") |fields title, Status | rename title as Input | join Input type=outer max=0  [| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_ucc_system_snapshot | search title = dispatch | fields state | spath input=state | fields *.forwarder | transpose | rename column as raw_input, ""row 1"" as Forwarder |rex field=raw_input ""management_api_input_list[^_]*_(?P<input>.*)_(?P<management_api_data>[^_]*).forwarder"" | lookup o365_management_api_data_lookup management_api_data OUTPUT data | rename data as Data, input as Input] | eval Data=if(isnull(Data),""N/A"",Data) | eval Forwarder=if(isnull(Forwarder),""Not dispatched"",Forwarder) | fields Input, Status, Data, Forwarder |sort  +Input, +Data, +Forwarder' | rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_management_api_inputs | eval Status=if(disabled=0,""Enabled"",""Disabled"") |fields title, Status | rename title as Input | join Input type=outer max=0  [| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_ucc_system_snapshot | search title = dispatch | fields state | spath input=state | fields *.forwarder | transpose | rename column as raw_input, ""row 1"" as Forwarder |rex field=raw_input ""management_api_input_list[^_]*_(?P<input>.*)_(?P<management_api_data>[^_]*).forwarder"" | lookup o365_management_api_data_lookup management_api_data OUTPUT data | rename data as Data, input as Input] | eval Data=if(isnull(Data),""N/A"",Data) | eval Forwarder=if(isnull(Forwarder),""Not dispatched"",Forwarder) | fields Input, Status, Data, Forwarder |sort  +Input, +Data, +Forwarder",admin
search6,1,,"'|rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_management_api_inputs |search disabled=0|rename title as input_name|fields input_name|join input_name [search index=_internal sourcetype=ms:o365:jobinsight:input input_status=*|rename decoded_input_name as input_name|dedup input_name data|search input_status=fail | eval ""Latest Event Time""=strftime(_time,""%Y-%m-%dT%H:%M:%S.%3N%z"") ]|rename input_name as Input, host as Host, decoded_account_name as Account, o365_error_code as ""Error Code""| eval ""Proxy Status""=if(proxy_enabled==1,""Enabled"",""Disabled"") | join Host type=left [| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_forwarders | search title != ""localhost""|rename title as Forwarder | eval Host = if(isnull(machine_name),host,machine_name) | fields Forwarder, Host | append [| rest /services/server/info | fields host_fqdn | rename host_fqdn as Host | eval Forwarder = ""localhost""] ] |fields Input, ""Latest Event Time"", ""Error Code"", Host, Forwarder, Account, ""Proxy Status"",  Problem, ""Problem Detail"", ""Possible Reason"", Proposal' |rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_management_api_inputs |search disabled=0|rename title as input_name|fields input_name|join input_name [search index=_internal sourcetype=ms:o365:jobinsight:input input_status=*|rename decoded_input_name as input_name|dedup input_name data|search input_status=fail | eval ""Latest Event Time""=strftime(_time,""%Y-%m-%dT%H:%M:%S.%3N%z"") ]|rename input_name as Input, host as Host, decoded_account_name as Account, o365_error_code as ""Error Code""| eval ""Proxy Status""=if(proxy_enabled==1,""Enabled"",""Disabled"") | join Host type=left [| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_forwarders | search title != ""localhost""|rename title as Forwarder | eval Host = if(isnull(machine_name),host,machine_name) | fields Forwarder, Host | append [| rest /services/server/info | fields host_fqdn | rename host_fqdn as Host | eval Forwarder = ""localhost""] ] |fields Input, ""Latest Event Time"", ""Error Code"", Host, Forwarder, Account, ""Proxy Status"",  Problem, ""Problem Detail"", ""Possible Reason"", Proposal",admin
search7,1,,"'| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | rename title as account_name | fields account_name | join account_name [ search index=""_internal"" sourcetype=""ms:o365:jobinsight:account"" account_status=* |dedup account_name|search account_status=invalid | eval ""Latest Event Time""=strftime(_time,""%Y-%m-%dT%H:%M:%S.%3N%z"") ] | eval Metrics=""Granted Token"", ""Error Code""=o365_error_code,""Proxy Status""=if(proxy_enabled==1,""Enabled"",""Disabled""), Host=host | fields account_name,Metrics,""Latest Event Time"",""Proxy Status"",""Error Code"",Host,Problem,""Problem Detail"",""Possible Reason"",Proposal | rename account_name as Account  | append [| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | rename title as account_name | fields account_name | join account_name [ search index=""_internal"" sourcetype=""ms:o365:jobinsight:account"" | search subscription_type=list subscription_status=*| dedup account_name|search subscription_status=fail | eval ""Latest Event Time""=strftime(_time,""%Y-%m-%dT%H:%M:%S.%3N%z"")  ] | eval Metrics=""Subscription"",""Error Code""=o365_error_code, ""Proxy Status""=if(proxy_enabled==1,""Enabled"",""Disabled""), Host = host  |  fields account_name,Metrics,""Latest Event Time"",""Proxy Status"",""Error Code"",Host, Problem,""Problem Detail"",""Possible Reason"",Proposal | rename account_name as Account]  | sort +Account, +Metrics' | rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | rename title as account_name | fields account_name | join account_name [ search index=""_internal"" sourcetype=""ms:o365:jobinsight:account"" account_status=* |dedup account_name|search account_status=invalid | eval ""Latest Event Time""=strftime(_time,""%Y-%m-%dT%H:%M:%S.%3N%z"") ] | eval Metrics=""Granted Token"", ""Error Code""=o365_error_code,""Proxy Status""=if(proxy_enabled==1,""Enabled"",""Disabled""), Host=host | fields account_name,Metrics,""Latest Event Time"",""Proxy Status"",""Error Code"",Host,Problem,""Problem Detail"",""Possible Reason"",Proposal | rename account_name as Account  | append [| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_accounts | search disabled=0 | rename title as account_name | fields account_name | join account_name [ search index=""_internal"" sourcetype=""ms:o365:jobinsight:account"" | search subscription_type=list subscription_status=*| dedup account_name|search subscription_status=fail | eval ""Latest Event Time""=strftime(_time,""%Y-%m-%dT%H:%M:%S.%3N%z"")  ] | eval Metrics=""Subscription"",""Error Code""=o365_error_code, ""Proxy Status""=if(proxy_enabled==1,""Enabled"",""Disabled""), Host = host  |  fields account_name,Metrics,""Latest Event Time"",""Proxy Status"",""Error Code"",Host, Problem,""Problem Detail"",""Possible Reason"",Proposal | rename account_name as Account]  | sort +Account, +Metrics",admin
search8,1,,"'| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_certificate | stats count | appendcols [rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_certificate] | eval status=if(isnull(status), ""empty"", status) | lookup o365_certificate_status_lookup status OUTPUT status_code,description |fields description, status_code | rangemap field=status_code low=3-3 severe=2-2 elevated=0-0' | rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_certificate | stats count | appendcols [rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_certificate] | eval status=if(isnull(status), ""empty"", status) | lookup o365_certificate_status_lookup status OUTPUT status_code,description |fields description, status_code | rangemap field=status_code low=3-3 severe=2-2 elevated=0-0",admin
search9,1,,"'| rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_certificate | stats count | appendcols [rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_certificate] | eval status=if(count==0,""empty"", status) | lookup o365_certificate_status_lookup status OUTPUT status_code,description | search status=""*invalid"" | eval o365_error_code=""CERS004"" | fields o365_error_code | lookup o365_troubleshooting_error_code_lookup o365_error_code OUTPUT Problem,""Problem Detail"",""Possible Reason"",Proposal | fields Problem,""Problem Detail"",""Possible Reason"",Proposal' | rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_certificate | stats count | appendcols [rest /servicesNS/nobody/Splunk_TA_microsoft-cloudservices/configs/conf-splunk_ta_ms_o365_server_certificate] | eval status=if(count==0,""empty"", status) | lookup o365_certificate_status_lookup status OUTPUT status_code,description | search status=""*invalid"" | eval o365_error_code=""CERS004"" | fields o365_error_code | lookup o365_troubleshooting_error_code_lookup o365_error_code OUTPUT Problem,""Problem Detail"",""Possible Reason"",Proposal | fields Problem,""Problem Detail"",""Possible Reason"",Proposal",admin
ServiceNow CMDB CI App Servers,1,Splunk_TA_snow,"eventtype=snow_cmdb_ci_app_server | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_app_server_lookup | dedup sys_id | outputlookup snow_cmdb_ci_app_server_lookup",
ServiceNow CMDB CI Database Instances,1,Splunk_TA_snow,"eventtype=snow_cmdb_ci_db_instance | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_db_instance_lookup | dedup sys_id | outputlookup snow_cmdb_ci_db_instance_lookup",
ServiceNow CMDB CI Infra Services,1,Splunk_TA_snow,"eventtype=snow_cmdb_ci_infra_service | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_infra_service_lookup | dedup sys_id | outputlookup snow_cmdb_ci_infra_service_lookup",
ServiceNow CMDB CI Server,1,Splunk_TA_snow,"eventtype=snow_cmdb_ci_server | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_server_lookup | dedup sys_id | outputlookup snow_cmdb_ci_server_lookup",
ServiceNow CMDB CI Services,1,Splunk_TA_snow,"eventtype=snow_cmdb_ci_service | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_service_lookup | dedup sys_id | outputlookup snow_cmdb_ci_service_lookup",
ServiceNow CMDB CI VM,1,Splunk_TA_snow,"eventtype=snow_cmdb_ci_vm | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_vm_lookup | dedup sys_id | outputlookup snow_cmdb_ci_vm_lookup",
ServiceNow Incident State,1,Splunk_TA_snow,"eventtype=snow_sys_choice_list name=""incident"" element=""state"" | eval incident_state_name=label | eval state=value | eval incident_state=value| dedup state, incident_state, incident_state_name | table state, incident_state, incident_state_name| inputlookup append=t snow_incident_state_lookup | dedup state | sort + state | outputlookup snow_incident_state_lookup",
ServiceNow Sys Choice List,1,Splunk_TA_snow,"eventtype=snow_sys_choice_list  | table name, element, value, sys_id | inputlookup append=t snow_sys_choice_list_lookup | dedup sys_id | sort + name, element | outputlookup snow_sys_choice_list_lookup",
ServiceNow Sys User Group List,1,Splunk_TA_snow,"eventtype=snow_sys_user_group_list | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_sys_user_group_list_lookup | dedup sys_id | outputlookup snow_sys_user_group_list_lookup",
ServiceNow Sys User List,1,Splunk_TA_snow,"eventtype=snow_sys_user_list _index_earliest=-2h@h _index_latest=now | dedup sys_id | fields - _bkt, _cd, _indextime, _kv, _raw, _serial, _si, _sourcetype, _subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_sys_user_list_lookup | dedup sys_id | outputlookup snow_sys_user_list_lookup",
SIM - Total Searchable Index Data,1,splunk_instance_monitoring,"`sim_searchable_index_storage` 
| logresults tag=TotalSearchableStorage",
SIM Splunkd - Data Parsing Issues,1,splunk_instance_monitoring,`data_parsing_issues`,
SIM Splunkd - Distinct Apps,1,splunk_instance_monitoring,`distinct_apps`,
SIM Splunkd - Distinct Users,1,splunk_instance_monitoring,`distinct_users`,
SIM Splunkd - Scheduled Search Skip Ratio,1,splunk_instance_monitoring,`scheduled_search_skip_ratio`,
SIM Splunkd - Total Page Views,1,splunk_instance_monitoring,`total_page_views`,
Source Host not Sending Logs to Splunk,1,search,"| tstats earliest(_time) AS earliest latest(_time) as latest where (index=azure OR index=aws-cloudtrail OR index=aws-cloudtrail-jpn OR index=domain OR index=firewalls OR index=imperva OR index=lancope OR index=ldap OR index=mcafee OR index=notable OR index=pan_logs OR index=risk OR index=sccm OR index=scom OR index=secretserver OR index=tap OR index=threat_activity OR index=unix OR index=us_iis OR index=vpn) earliest=-72h@h latest=now() sourcetype!=pan:config sourcetype!=pan:system by host index
| eval recent = if(latest > relative_time(now(),""-60h""),1,0), latest = strftime(latest,""%c"") | where recent=0 
| eval earliest = strftime(earliest,""%a %B %d %Y %H:%M:%S"")",
Source Host not Sending Logs to Splunk - Weekly Checks,1,search,"| tstats earliest(_time) AS earliest latest(_time) as latest where (index=azure OR index=aws-cloudtrail OR index=aws-cloudtrail-jpn OR index=domain OR index=firewalls OR index=imperva OR index=lancope OR index=ldap OR index=mcafee OR index=notable OR index=pan_logs OR index=risk OR index=sccm OR index=scom OR index=secretserver OR index=tap OR index=threat_activity OR index=unix OR index=us_iis OR index=vpn OR index=okta-corp) earliest=-240h@h latest=now() by host index sourcetype
| eval recent = if(latest > relative_time(now(),""-168h""),1,0), latest = strftime(latest,""%c"") | where recent=0 
| eval earliest = strftime(earliest,""%a %B %d %Y %H:%M:%S"")",
Source Host not Sending Logs to Splunk (Wed 12noon - Friday 12midnight),1,search,"| tstats earliest(_time) AS earliest latest(_time) as latest where (index=azure OR index=aws-cloudtrail OR index=aws-cloudtrail-jpn OR index=domain OR index=firewalls OR index=imperva OR index=lancope OR index=ldap OR index=mcafee OR index=notable OR index=pan_logs OR index=risk OR index=sccm OR index=scom OR index=secretserver OR index=tap OR index=threat_activity OR index=unix OR index=us_iis OR index=vpn) earliest=-72h@h latest=now() sourcetype!=pan:config sourcetype!=pan:system by host index
| eval recent = if(latest > relative_time(now(),""-60h""),1,0), latest = strftime(latest,""%c"") | where recent=0 
| eval earliest = strftime(earliest,""%a %B %d %Y %H:%M:%S"")",
splunk_app_db_connect.apimetricscollector: calculate indexed data volume,42,,"'| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1001432778.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1025005175.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1119245125.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1157014546.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1177757838.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1294649786.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1432331383.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1467581350.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1541990439.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1569180331.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1616259825.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1633423925.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1643882823.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1658291526.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1687308475.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1770474305.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1851644172.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1853919884.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1872655394.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1908348229.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1937071250.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1954069009.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_2060827490.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_2134643063.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_258335500.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_260365995.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_276595989.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_29656407.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_466272723.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_470163405.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_493798071.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_512677397.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_517662399.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_593100905.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_667668145.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_674327909.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_702803813.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_726146738.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_731839847.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_793847663.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_871719041.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' '| search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_92686715.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""' | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1001432778.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1025005175.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1119245125.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1157014546.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1177757838.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1294649786.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1432331383.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1467581350.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1541990439.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1569180331.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1616259825.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1633423925.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1643882823.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1658291526.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1687308475.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1770474305.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1851644172.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1853919884.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1872655394.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1908348229.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1937071250.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_1954069009.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_2060827490.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_2134643063.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_258335500.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_260365995.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_276595989.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_29656407.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_466272723.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_470163405.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\"""" | search index=_internal sourcetype=splunkd source=*metrics.log splunk_server=""*"" group=""per_sourcetype_thruput"" 
         | stats sum(kb) as sum_kb by series | eval sum_mb=sum_kb/1024 
         | filterdbxsourcetype | summaryindex spool=t uselb=t addtime=t index=""summary"" file=""RMD51f6e00fef357462e_493798071.stash_new"" name=""splunk_app_db_connect.apimetricscollector: calculate indexed data volume"" marker=""report=\""dbx_indexed_data_volumes\""""",
Splunk_ML_Toolkit - ML-SPL - Sourcetype Inference,1,Splunk_ML_Toolkit,"index=""_internal"" source=""*mlspl.log*"" 
| rex field=_raw ""Sourcetype inference: Punct (?<full_punct>[^ ]+) has sourcetype (?<orig_sourcetype>.*)"" 
| search full_punct=* AND orig_sourcetype=* 
| stats count by orig_sourcetype, full_punct 
| sample 1000 
| makejson output=data 
| table data",
Splunk_ML_Toolkit - ML-SPL - Telemetry Gen,1,Splunk_ML_Toolkit,"index=""_internal"" source=""*mlspl.log*"" 
| rex field=_raw ""PID (?<PID>\d+)"" 
| stats values(*) as *, max(columns) as maxColumns, sum(rows) as numRows by PID 
| where isnotnull(command) and (isnotnull(algo_name) or isnotnull(scoringName)) 
| sort _time 
| stats values(*) as *, max(columns) as maxColumns, sum(rows) as numRows by PID, UUID 
| fields PID UUID algo_name app_context apply_time command csv_parse_time csv_read_time csv_render_time 
  example_name experiment_id fit_time handle_time maxColumns modelId num_fields num_fields_PC num_fields_RS num_fields_SS 
  num_fields_fs num_fields_prefixed num_fields_tfidf numRows params partialFit pipeline_stage scoringName scoringTimeSec 
| head 1000 
| makejson output=data 
| table data",None
splunk-host-dns-alt-name,1,splunk_instance_monitoring,"| tstats latest(dns_alt_name) as dns_alt_name, latest(sh_label) as sh_label  where index=_introspection  host=`sim_search_head_url` by host 
| table host, sh_label, dns_alt_name 
| outputlookup host_dns_alt_name.csv override_if_empty=false append=false",
SSL - Cloud Sessions,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count as current_count from datamodel=Certificates.All_Certificates where earliest=-24h@h latest=+0s nodename=All_Certificates.SSL `cloud_domain_search(""All_Certificates.SSL.ssl_subject_common_name"")` | appendcols [tstats `summariesonly` count as historical_count from datamodel=Certificates.All_Certificates where earliest=-48h@h latest=-24h@h nodename=All_Certificates.SSL `cloud_domain_search(""All_Certificates.SSL.ssl_subject_common_name"")`] | `get_delta`",
SSL - Expired Certificates,1,DA-ESS-NetworkProtection,| tstats `summariesonly` count as current_count from datamodel=Certificates.All_Certificates where nodename=All_Certificates.SSL All_Certificates.SSL.ssl_is_valid=0 earliest=-24h@h latest=+0s  | appendcols [ | tstats `summariesonly` count as historical_count from datamodel=Certificates.All_Certificates where nodename=All_Certificates.SSL All_Certificates.SSL.ssl_is_valid=0 earliest=-48h@h latest=-24h@h] | `get_delta`,
SSL - Short Duration Certificates,1,DA-ESS-NetworkProtection,| tstats `summariesonly` count as current_count from datamodel=Certificates.All_Certificates where earliest=-24h@h latest=+0s nodename=All_Certificates.SSL All_Certificates.SSL.ssl_validity_window<7776000 | appendcols [tstats `summariesonly` count as historical_count from datamodel=Certificates.All_Certificates where earliest=-48h@h latest=-24h@h nodename=All_Certificates.SSL All_Certificates.SSL.ssl_validity_window<7776000 ] | `get_delta`,
SSL - Total SSL Sessions,1,DA-ESS-NetworkProtection,| tstats `summariesonly` count as current_count from datamodel=Certificates.All_Certificates where earliest=-24h@h latest=+0s nodename=All_Certificates.SSL | appendcols [ | tstats `summariesonly` count as historical_count from datamodel=Certificates.All_Certificates where earliest=-48h@h latest=-24h@h nodename=All_Certificates.SSL] | `get_delta`,
Suspected Network Scanning,1,InfoSec_App_for_Splunk,"| tstats summariesonly=t allow_old_summaries=t dc(All_Traffic.dest_port) as num_dest_port dc(All_Traffic.dest_ip) as num_dest_ip from datamodel=Network_Traffic by All_Traffic.src_ip 
| rename ""All_Traffic.*"" as ""*""
| where num_dest_port > 100 OR num_dest_ip > 100 
| sort - num_dest_ip",
Threat - Correlation Searches - Lookup Gen,1,SA-ThreatIntelligence,"| rest splunk_server=local count=0 ""/servicesNS/-/-/saved/searches?listDefaultActionArgs=1"" | where match('action.correlationsearch.enabled', ""1|[Tt]|[Tt][Rr][Uu][Ee]"") OR match('action.notable', ""1|[Tt]|[Tt][Rr][Uu][Ee]"") OR match('action.risk', ""1|[Tt]|[Tt][Rr][Uu][Ee]"") | join type=left title [| rest splunk_server=local count=0 /services/configs/conf-analyticstories search=""name=savedsearch* AND annotations=*"" | eval title=replace(title, ""savedsearch://"", """") | table title,annotations] | join type=left max=0 title [| rest splunk_server=local count=0 /services/configs/conf-analyticstories search=""name=analytic_story* AND searches=*"" | eval analyticstories=replace(title, ""analytic_story://"", """") | spath input=searches path={} output=title | stats values(analyticstories) as analyticstories by title | eval analyticstories=mvjoin(analyticstories, ""@@"")] | eval analyticstories=split(analyticstories, ""@@"") | eval annotations=case(isnotnull('action.correlationsearch.annotations') AND 'action.correlationsearch.annotations'!="""",'action.correlationsearch.annotations',isnotnull(annotations) AND annotations!="""",annotations,1=1,null()),rule_name=if(isnotnull('action.correlationsearch.label'),'action.correlationsearch.label',title) | rename title as _key,action.notable.param.* as * | append [| rest splunk_server=local count=0 /servicesNS/-/-/configs/conf-correlationsearches | rename title as _key] | eval security_domain=if(security_domain="""",null(),security_domain),severity=if(severity="""",null(),severity),rule_name=if(rule_name="""",null(),rule_name),description=if(description="""",null(),description),rule_title=if(rule_title="""",null(),rule_title),rule_description=if(rule_description="""",null(),rule_description),drilldown_name=if(drilldown_name="""",null(),drilldown_name),drilldown_search=if(drilldown_search="""",null(),drilldown_search),drilldown_earliest_offset=if(drilldown_earliest_offset="""",null(),drilldown_earliest_offset),drilldown_latest_offset=if(drilldown_latest_offset="""",null(),drilldown_latest_offset),default_status=if(default_status="""",null(),default_status),default_owner=if(default_owner="""",null(),default_owner),default_disposition=if(default_disposition="""",null(),default_disposition),next_steps=if(next_steps="""",null(),next_steps),investigation_profiles=if(investigation_profiles="""",null(),investigation_profiles),extract_artifacts=if(extract_artifacts="""",null(),extract_artifacts),recommended_actions=if(recommended_actions="""",null(),recommended_actions),analyticstories=if(analyticstories="""",null(),analyticstories) | appendpipe [ where _key LIKE ""%\""%"" | eval _key=replace(_key, ""\"""", ""_"") ] | stats first(annotations) as annotations,first(security_domain) as security_domain,first(severity) as severity,first(rule_name) as rule_name,first(description) as description,first(rule_title) as rule_title,first(rule_description) as rule_description,first(drilldown_name) as drilldown_name,first(drilldown_search) as drilldown_search,first(drilldown_earliest_offset) as drilldown_earliest_offset,first(drilldown_latest_offset) as drilldown_latest_offset,first(default_status) as default_status,first(default_owner) as default_owner,first(next_steps) as next_steps,first(investigation_profiles) as investigation_profiles,first(extract_artifacts) as extract_artifacts,first(recommended_actions) as recommended_actions,values(analyticstories) as analyticstories by _key | outputlookup correlationsearches_lookup append=T key_field=_key | stats count",None
Threat - Exabeam Notable User - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats count AS count from datamodel=Exabeam where (nodename = Exabeam) groupby Exabeam.user, Exabeam.src_ip, Exabeam.score, Exabeam.reasons_count, Exabeam.alerts_count, Exabeam.top_reasons, Exabeam.user_first, Exabeam.user_last, Exabeam.user_bunit prestats=true | stats dedup_splitvals=t count AS count by Exabeam.user, Exabeam.src_ip, Exabeam.score, Exabeam.reasons_count, Exabeam.alerts_count, Exabeam.top_reasons, Exabeam.user_first, Exabeam.user_last,Exabeam.user_bunit | sort limit=100 Exabeam.user | fields - _span | rename Exabeam.user AS user Exabeam.src_ip as src Exabeam.score AS score Exabeam.reasons_count AS reasons_count Exabeam.alerts_count AS alerts_count Exabeam.top_reasons AS top_reasons Exabeam.user_first AS first_name Exabeam.user_last AS last_name Exabeam.user_bunit AS user_bunit | fillnull count | fields user, src, score, reasons_count, alerts_count, top_reasons, first_name, last_name, user_bunit, count",1040
Threat - GCR - FW - Malware Blacklist IP Connection - Rule,1,SplunkEnterpriseSecuritySuite,"index=pan_logs tag=gcr_pan type=TRAFFIC ( rule=""Block_Malware_Blacklist"" OR rule=""Block_Miner_application"" OR rule=""Block_Dynamic_List_Outbound"") src_ip=10.* NOT (src_ip=10.210.65.246 OR src_ip=10.210.65.254) 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| eval Alert_name=""GCR - FW - Malware Blacklist IP Connection"" 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_port,src_user,user,src_zone,dest_ip,dest_location,dest_port,dest_zone,dvc_name,EventCount,file_name,url,rule,severity,signature,threat 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"" , "")",1059
Threat - GCR - IPS - [High] Internal Attack on Many Target IP - Rule,1,DA-ESS-NetworkProtection,"`GCR_Events_IPS_DC` vendor_product=""Palo Alto Networks Firewall"" 
    AND log_type=""THREAT"" 
    AND vendor_action=alert
    AND src_ip=10.*
    AND category!=Correlation 
    NOT `ACCL_List_Segmen_LB(src_ip)` 
    NOT `GCR_List_IP_Trust` 
    NOT `GCR_List_IP_VAScanner(src_ip)`
    NOT (application=ssh (src_ip=10.143.18.58 OR src_ip=10.143.34.178)) 
    NOT `ACCL_List_IP_AssetScanner(src_ip)` 
    AND application!=sccp AND src_dns!=""cnhybwbpd*"" AND src_ip!=10.140.48.114
    NOT (dest_ip=10.140.18.172 OR dest_ip=10.143.16.98 OR dest_ip=10.143.65.34 OR dest_ip=10.140.20.57 OR dest_ip=10.143.16.99 OR dest_ip=10.143.16.100 OR dest_ip=10.140.16.81 OR dest_ip=10.140.16.82) 
    AND threat!=""HTTP302_brutal(41008)"" 
    AND threat!=""Apple FairPlay Abnormal User Agent Detection(38915)"" 
    AND src_dns!=""cnwsgzisdl999*"" src_dns!=""cnwsvcsp015*"" 
    AND threat!=""HTTP Unauthorized Brute Force Attack(40031)"" 
| search ( threat=""NetBIOS null session(31710)"" OR severity=""medium"" OR severity=""high"" OR severity=""critical"" ) 
| eventstats dc(dest_ip) as EventCount by src_ip 
| where EventCount>=5 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_hostname dest_owner dest_app_name dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip    src_country src_hostname src_owner src_app_name src_ip_zone src_port src_user src_zone threat type url user vendor_action 
| rename src_ip as ip 
| join type=left ip threat max=0 
    [ search index=pan_logs tag=gcr_pan threat!=""(9999)"" 
    | dedup src_ip dest_ip threat 
    | table src_ip dest_ip threat 
    | rename dest_ip as ip,src_ip as dd] 
| rename ip as src_ip 
| search NOT ( dd=10.211.192.* OR dd=10.211.193.* OR dd=10.211.194.* OR dd=10.211.195.* OR dd=10.211.196.* OR dd=10.211.197.* OR dd=10.211.198.* OR dd=10.211.199.* OR dd=10.211.202.* OR dd=10.211.203.* OR dd=10.211.204.* OR dd=10.211.205.* OR dd=10.211.206.* OR dd=10.211.207.* OR dd=10.211.208.* OR dd=10.211.209.* OR dd=10.210.0.* OR dd=10.210.1.* OR dd=10.210.2.* OR dd=10.210.3.* OR dd=10.210.4.* OR dd=10.210.5.* OR dd=10.210.6.* OR dd=10.210.7.* OR dd=10.210.8.* OR dd=10.210.9.* OR dd=10.210.10.* OR dd=10.210.11.* OR dd=10.210.12.* OR dd=10.210.13.* OR dd=10.210.14.* OR dd=10.210.15.* OR dd=10.210.16.* OR dd=10.210.17.* OR dd=10.140.236.* OR dd=10.140.237.* OR dd=10.140.59.* OR dd=10.143.236.* OR dd=10.143.237.* OR dd=10.143.59.* OR dd=10.143.158.* OR dd=10.143.159.6 OR dd=10.143.159.7 OR dd=10.143.159.8 OR dd=10.143.159.9 OR dd=10.143.159.10 OR dd=10.140.22.* OR dd=10.140.55.* OR dd=10.143.55.* OR dd=10.140.239.* OR dd=10.143.239.* OR dd=10.140.245.* OR dd=10.143.245.* OR dd=10.143.246.* OR dd=10.140.248.* OR dd=10.140.249.* OR dd=10.143.248.* OR dd=10.143.249.* OR dd=10.210.213.17 OR dd=10.210.213.18 OR dd=10.210.213.19 OR dd=10.210.213.20 OR dd=10.210.213.21 OR dd=10.210.213.22 OR dd=10.210.213.23 OR dd=10.210.213.24 OR dd=10.210.213.25 OR dd=10.210.213.26 OR dd=10.210.213.27 OR dd=10.210.213.28 OR dd=10.210.213.29 OR dd=10.210.213.30 OR dd=10.140.246.* OR dd=10.143.229.* OR dd=10.143.231.* OR dd=10.140.16.6 OR dd=10.72.16.9 OR dd=10.140.17.83 OR dd=10.140.17.84 OR dd=10.143.17.107 OR dd=10.143.172.63 OR dd=10.211.101.31 OR dd=10.211.101.32 ) 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip,dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
Threat - GCR - IPS - Unblocked Multiple Risk Attacks - Rule,1,DA-ESS-ThreatIntelligence,"`GCR_Events_IPS` 
    AND vendor_action=alert
    NOT `GCR_List_IP_Trust` 
    NOT (`GCR_List_IP_VAScanner(src_ip)` OR `ACCL_List_IP_AssetScanner(src_ip)` OR `ACCL_List_Segmen_LB(src_ip)`) 
| regex severity=""medium|high|critical"" 
| eventstats dc(threat) as EventCount by src_ip,dest_ip 
| where EventCount>=3 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - IPS - Unblocked Multiple Risk Attacks"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| fillnull value=""""
| stats dc(threat) as signature_count, dc(dest_ip) as dest_count, values(src_user) as src_user, values(src_zone) as src_zone by src_ip",
Threat - GCR - IPS - WebLogic XMLDecoder Attack Detected by LAN IPS - Rule,1,SplunkEnterpriseSecuritySuite,"index=pan_logs tag=gcr_pan 
    AND sourcetype=""pan:threat"" 
    AND vendor_product=""Palo Alto Networks Firewall"" 
    AND log_subtype=vulnerability 
    AND (dvc_name=""GZ_CITIC_LAN_IPS01"" OR dvc_name=""GZ_MGF_LAN_IPS01"") 
    AND threat=""*WebLogic*"" 
    NOT (src_ip=10.143.18.58 OR src_ip=10.143.181.164)
    NOT (dest_ip=10.143.179.51 OR dest_ip=10.143.179.52 OR dest_ip=10.143.169.79 OR dest_ip=10.143.169.80 OR dest_ip=10.143.174.76 OR dest_ip=10.143.174.104 OR dest_ip=10.143.174.122)
    NOT `HDSI_GCR_List_IP_VAScanner(src_ip)` 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| eval Alert_name=""GCR - IPS - [High] IPS - WebLogic XMLDecoder Attack Detected by LAN IPS"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip src_ip_zone src_port src_user src_zone threat type url user vendor_action src_hostname src_owner src_app_name dest_hostname dest_owner dest_app_name",1202
Threat - GCR - Virus - PaloAlto Virus Alerts Reached 5 Or More Times - Rule,1,DA-ESS-ThreatIntelligence,"index=pan_logs tag=gcr_pan sourcetype=""pan:threat"" vendor_product=""Palo Alto Networks Firewall"" log_subtype=virus ( src_ip!=192.168* AND dest_ip!=192.168*)
| eval Alert_name=""GCR - Virus - PaloAlto Virus Alerts Reached 5 Times"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name,Trigger_Time,_time,log_subtype,region,action,app,application,src_ip,src_port,src_user,user,src_zone,dest_ip,dest_location,dest_port,dest_zone,dvc_name,file_name,url,rule,severity,signature,threat |fillnull value="""" 
| eventstats count as EventCount by src_port,src_ip,dvc_name,dest_ip,user,application 
| where EventCount>=5",
Threat - GCR - Virus - Ransomware Virus Detection - Rule,1,DA-ESS-ThreatIntelligence,"`GCR_Events_Virus_EndPoint` *ransom* OR *wannaCry* NOT (file_path=""C:\\Windows\\PSEXESVC.exe"" AND file_name=""C:\\Windows\\PSEXESVC.exe"") 
| eval Alert_name=""GCR - Virus - Ransomware Virus Detection"" 
| eval time=strftime(_time,""%F %T"") 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| stats 
values(action) as action
values(vendor_action) as vendor_action
values(file_path) as file_path
values(file_name) as file_name
values(dest_ip) as dest_ip
values(dest_mac) as dest_mac
values(user) as user
values(os) as os
count by dest",
Threat - GCR - Virus - Server is Infected with Virus - Rule,1,DA-ESS-ThreatIntelligence,"`GCR_Events_Virus_EndPoint` 
    `ACCL_List_HostName_Server(hostname)` OR `ACCL_List_HostName_Server(dest_dns)` 
| regex signature!=""TFTPD32|Spyware-AdaEbook|Generic\.dx|Artemis"" 
| regex file_name!=""\\cn"" 
| eval Alert_name=""GCR - Virus - Server is Infected with Virus"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| table Alert_name Trigger_Time _time timestamp vendor_product user region severity category signature process file_name vendor_action hostname username src_country product engine_version event_description signature_version src_ip src_dns dest_ip dest_nt_host",
Threat - GCR - Virus - Server is Infected with Virus (PA) - Rule,1,DA-ESS-ThreatIntelligence,"index=pan_logs tag=gcr_pan sourcetype=""pan:threat"" vendor_product=""Palo Alto Networks Firewall"" log_subtype=virus 
     ((`GCR_List_Segment_ServerFarm(src_ip)` NOT (severity=low OR severity= informational)) OR (`GCR_List_Segment_ServerFarm(dest_ip)` NOT (src_ip=""10.*"" OR src_ip=""172.*"" OR src_ip=""192.*"") AND (severity=high OR severity=critical)))
| eval Alert_name=""GCR - Virus - Server is Infected with Virus (PA)"" 
| stats values(Alert_name) as Alert_name,values(log_subtype) as log_subtype,values(region) as region,values(action) as action,values(app) as app, values(src_port) as src_port,values(src_zone) as src_zone,values(dest_port) as dest_port,values(dest_zone) as dest_zone,values(severity) as orig_severity,count by src_ip,dest_ip,signature",
Threat - HDSI Anomalous IOC Activity Detected - Rule,1,SA-HLThreatIntelligenceFeed,"index=risk source=""HDSI Risk Gen - misp_IPDST Activity"" 
`hdsi_anomalous_ioc_customizations`",
Threat - HDSI AWS keys to Recorded Futures watch list - Rule,1,SplunkEnterpriseSecuritySuite,"index=aws-kinesis eventName IN ( CreateKey CreateAccessKey ) 
| rename ""userIdentity.accessKeyId"" AS key 
| stats values(eventName) AS eventName values(userIdentity.arn) AS arn, values(awsRegion) AS awsRegion by key
| eval key=""ext:aws:"".key",1134
Threat - HDSI Detect CVE-2021-42287/CVE-2021-42278 Exploitation - Rule,1,SplunkEnterpriseSecuritySuite,"index=* sourcetype=wineventlog OR sourcetype=xmlwineventlog EventCode=4781 (Old_Account_Name=*$ New_Account_Name!=*$) OR (OldTargetUserName=*$ NewTargetUserName!=*$)
| eval Old_Account_Name=if(sourcetype=""XmlWinEventLog"",OldTargetUserName,Old_Account_Name), New_Account_Name=if(sourcetype=""XmlWinEventLog"",NewTargetUserName,New_Account_Name), src_user=if(sourcetype=""XmlWinEventLog"",SubjectUserName,Account_Name)
| stats values(src_user) AS src_user count by Old_Account_Name, New_Account_Name",1098
Threat - HDSI GCR Command and Control Traffic Detection - Rule,1,SplunkEnterpriseSecuritySuite,"index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList"" Alert_name=""GCR - URL Filtering - Command and Control Traffic Detection OutputList"" 
| stats count 
values(dest_ip) as dest_ip
values(dest_port) as dest_port
values(url) as url
values(src_user) as src_user
values(src_user_identity_tag) as src_user_identity_tag
values(file_name) as file_name
values(src_country) as src_country
values(src_zone) as src_zone
by src_ip
| `get_asset(src_ip)`
| fillnull value=null",1043
Threat - HDSI GCR IPS Ransomware Detection - Rule,1,DA-ESS-NetworkProtection,"index=pan_logs tag=gcr_pan sourcetype=""pan:threat"" vendor_product=""Palo Alto Networks Firewall"" src_ip=10.* dest_ip!=10.140.48.114 AND (*WanaCrypt0r_immune* OR (log_subtype=vulnerability (threat_name=""Microsoft Windows SMB Remote Code Execution Vulnerability"" OR threat_id=30016 OR threat_id=36289 OR threat_id=32052)) 
    OR (log_subtype=spyware (threat_id=12096 OR threat_id=12454)) OR  (log_subtype=virus ( threat_name=*Ransom* OR threat_id=3084814 OR threat_id=3059784))) 
| eval Alert_name=""GCR - IPS - [Critical] Ransomware Virus Detection"" 
| eval Trigger_Time=strftime(now(),""%F %T"") 
| lookup servercidrlookup ip as src_ip output hostname as src_hostname,Owner as src_owner ,name as src_app_name 
| lookup servercidrlookup ip as dest_ip output hostname as dest_hostname,Owner as dest_owner ,name as dest_app_name 
| lookup networkcidrlookup ip as src_ip output name as src_ip_zone 
| lookup networkcidrlookup ip as dest_ip output name as dest_ip_zone 
| table Alert_name EventCount IPList Trigger_Time _time action app app:risk application count dest_ip dest_hostname dest_owner dest_app_name dest_ip_zone dest_location dest_port dest_user dest_zone dvc_name file_name log_subtype region rule severity signature src_dns src_ip   src_country src_hostname src_owner src_app_name src_ip_zone src_port src_user src_zone threat type url user vendor_action 
| eventstats values(src_ip) as IPList 
| eval IPList=mvjoin(IPList,"","") 
| collect index=""output-gcr"" sourcetype=""GCR_Virus_PA_Alert_OutputList"" 
| table _time,threat,severity,application,vendor_action,src_ip,src_country,src_hostname,src_owner,src_app_name,src_ip_zone,src_port,user,dest_ip, dest_hostname,dest_owner,dest_app_name,dest_ip_zone,dest_port,rule,url,dvc_name,src_zone,dest_zone,IPList",
Threat - HDSI GCR Virus ATL Server Is Infected With Virus - Rule,1,SplunkEnterpriseSecuritySuite,"index=""output-gcr"" sourcetype=""GCR_Virus_Mcafee&SCEP_Alert_OutputList"" 
NOT (event_description=""*Malware deleted*"" OR event_description=""*deleted successfully*"" OR event_description=""IDS_ALERT_ACT_TAK_DEL"")
NOT (signature=""PUA:*"" OR category=""Potentially Unwanted Software"")
| eval action=coalesce(vendor_action,event_description)
| eval orig_host=coalesce(hostname,dest_asset_name)
| eval orig_file_path=coalesce(file_path,file_name)
| fillnull value=null
| stats count
values(action) as action
values(username) as username
values(orig_file_path) as orig_file_path
values(severity) as orig_severity
by orig_host signature",1107
Threat - HDSI GCR Virus Infected Statistics Count Greater Than 100 Within 7 Days - Rule,1,SplunkEnterpriseSecuritySuite,"`GCR_Events_Virus_EndPoint` NOT (file_path=""C:\\Windows\\Amway_MKT.scr*"")
| rename hostname as dest
| stats 
dc(Timestamp) as infection_count 
list(action) as action
list(category) as category
list(signature) as signature
list(Timestamp) as timestamp
by dest
| where infection_count>=100",1082
Threat - HDSI IOC Threat Activity Detected - Rule,1,SA-HLThreatIntelligenceFeed,"| from datamodel:""Threat_Intelligence"".""Threat_Activity"" 
| where match(threat_key, ""misp_.*"")  AND NOT threat_key=""misp_IPDST"" AND `hdsi_feed_customizations`
| eval threatlist_value = mvindex(split(threat_collection_key, ""|""), -1) 
| eval threatlist_value = coalesce(threatlist_value, threat_match_value) 
| lookup misp_Domains domain as threatlist_value OUTPUT description AS threat_description 
| lookup misp_URLs url as threatlist_value OUTPUTNEW description AS threat_description 
| lookup misp_MD5SUMs file_hash as threatlist_value OUTPUTNEW description AS threat_description 
| lookup misp_SHA1SUMs file_hash as threatlist_value OUTPUTNEW description AS threat_description 
| lookup misp_SHA256SUMs file_hash as threatlist_value OUTPUTNEW description AS threat_description 
| search `hdsi_ioc_detected_customizations` [ inputlookup misp_Domains | eval threat_match_value=""*"".domain.""*"" | table threat_match_value ] OR NOT threat_key=""misp_Domains""
| dedup threat_match_field,threat_match_value 
| `get_event_id` 
| table _raw,event_id,source,src,dest,threat*,weight,threat_description 
| rename weight as record_weight 
| `per_panel_filter(""ppf_threat_activity"",""threat_match_field,threat_match_value"")` 
| `get_threat_attribution(threat_key)` 
| rename source_* as threat_source_*,description as feed_description 
| eval risk_score=case(isnum(record_weight), record_weight, isnum(weight), weight, 1=1, null())  
| fields - *time 
| eval risk_object_type=case(threat_match_field=""query"" OR threat_match_field==""src"" OR threat_match_field==""dest"",""system"",threat_match_field==""src_user"" OR threat_match_field==""user"",""user"",1=1,""other"") 
| eval risk_object=threat_match_value",
Threat - HDSI LDAP Group Change Notification - Phantom Gen - Rule,1,SplunkEnterpriseSecuritySuite,"index=domain source=""WinEventLog:Security""
EventCode IN (4728, 4732, 4756) AND
Group_Name IN
(""LDAP-AWS-CDA-AllAccounts-ADMIN"", ""LDAP-GCP-CDA-AllAccounts-ADMIN"", ""Azure-CDA-CORP-AllAccounts-ADMIN"", ""Azure-CDA-AMER-AllAccounts-ADMIN"", ""Azure-CDA-APAC-AllAccounts-ADMIN"", ""Azure-CDA-EIA-AllAccounts-ADMIN"")
NOT (src_user=""*$"" AND (EventCode=""4733""))
| eval Action=case(EventCode=4728, ""Added"", EventCode=4732, ""Added"", EventCode=4756, ""Added"")
| eval src_user=mvindex(Account_Name,0)
| eval user=mvindex(Security_ID,1)
| rex field=user mode=sed ""s/[^\\\]*\\\//""
| rename Group_Name as dest_group Group_Domain as dest_nt_domain
| convert ctime(_time) as orig_time
| stats values(dest_group) as dest_group, values(dest_nt_domain) as dest_nt_domain, values(action) as action, values(EventCode) as EventCode,values(signature) as signature values(orig_time) as orig_time count by src_user host user
| table src_user host signature orig_time user dest_group dest_nt_domain action EventCode count
| eval source = signature
| sendalert sendtophantom param.phantom_server=""phantom-prod.security.corp.amway.net"" param.severity=""medium"" param.sensitivity=""green"" param.label=""ldap_group_changes""",1069
Threat - HDSI Log4Shell IOC Activity Detected - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats `summariesonly` count from datamodel=Network_Traffic where [inputlookup hdsi_Log4Shell_dynamic_threatlist | table ip | rename ip as All_Traffic.dest] NOT (All_Traffic.src_port IN (80, *443, 8080) All_Traffic.dest_port>1024) NOT `hdsi_rfc1918(All_Traffic.dest)` NOT All_Traffic.dest=64.39.96.0/20 NOT `hdsi_nessus_ips(All_Traffic.dest)`  by All_Traffic.src All_Traffic.dest sourcetype
| rename All_Traffic.* as *
| eventstats dc(src) as src_count by dest
| search NOT src_count>50
| eval threat_match_field=""dest"", threat_match_value=dest
| fields - dest src_count
| append [ tstats `summariesonly` count from datamodel=Network_Resolution where [inputlookup hdsi_Log4Shell_dynamic_threatlist | table domain | rename domain as DNS.query ] by DNS.src DNS.query sourcetype | rename DNS.* as * | eval threat_match_field=""query"", threat_match_value=query | fields - query]
| fields - count
| rename sourcetype as orig_sourcetype",1043
Threat - HDSI O365 Admin Account Usage - Rule,1,SplunkEnterpriseSecuritySuite,"index=azure Workload=AzureActiveDirectory tag=authentication ""skyhigh.CASB.Service@Amway.com"" OR ""USP00310@Amway.com"" OR ""USJZJ65@Amway.com""
| stats values(signature) as signature values(dest) as dest,count by user,src",1078
Threat - HDSI Outbound SMB Traffic - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=true count 
values(""All_Traffic.action"") as ""All_Traffic.action""
dc(All_Traffic.dest) as dest_count
values(All_Traffic.dest) as dest
values(sourcetype) as sourcetype
values(All_Traffic.user) as user
earliest(_time) as earliest
latest(_time) as latest
FROM datamodel=Network_Traffic 
WHERE All_Traffic.rule=""Deny_WANNACRY_Ports"" (`hdsi_rfc1918(All_Traffic.src_ip)` NOT `hdsi_rfc1918(All_Traffic.dest)`) NOT (All_Traffic.src_ip=""10.252.101.247"" All_Traffic.dest=""172.168.3.0/24"") NOT (All_Traffic.dest=""52.96.0.0/12"" OR All_Traffic.dest=""52.112.0.0/14"")
BY ""All_Traffic.src_ip"" _time span=1h
| rename ""All_Traffic.*"" as ""*"" 
| lookup p_default_ip_risklist.csv Name as dest OUTPUT Risk
| convert timeformat=""%Y-%m-%dT%H:%M:%S"" ctime(earliest) 
| convert timeformat=""%Y-%m-%dT%H:%M:%S"" ctime(latest)
| search count > 1499 AND Risk > 69
| join src_ip type=left
[|search index=pan_logs sourcetype=""pan:system"" earliest=-24h | dedup description src | table description src _time | rename _time as pan_system_orig_time src as src_ip | `ctime(orig_time)`]",1040
Threat - HDSI Palo Alto Follina Activity Detected - Rule,1,SplunkEnterpriseSecuritySuite,"index=pan_logs sourcetype=pan:threat threat_id=""92623"" | stats values(action) as action values(threat) as signature values(rule) as rule values(direction) as direction values(dest) as dest by src",
Threat - HDSI RF IOC Activity Detected - Rule,1,SplunkEnterpriseSecuritySuite,"index=risk source=""HDSI Risk Gen - rf_ip_risklist Activity"" `hdsi_rfc1918(src)`
| stats values(dest) AS dest, values(orig_sourcetype) AS orig_sourcetype sum(risk_score) AS total_risk_score by src 
| where total_risk_score >= 60",1018
Threat - HDSI RF IOC Domain Threat Activity Detected - Rule,1,SplunkEnterpriseSecuritySuite,"| from datamodel:""Threat_Intelligence"".""Threat_Activity""
| where match(threat_key, ""rf_.*"")  AND NOT (threat_key=""rf_ip_risklist"" OR threat_key=""rf_ip_threatlist"")
| dedup threat_match_field,threat_match_value
| `get_event_id`
| table _raw,event_id,source,src,dest,threat*,weight
| rename weight as record_weight
| `per_panel_filter(""ppf_threat_activity"",""threat_match_field,threat_match_value"")`
| `get_threat_attribution(threat_key)`
| rename source_* as threat_source_*,description as threat_description
| eval risk_score=case(isnum(record_weight), record_weight, isnum(weight), weight, 1=1, null())
| fields - *time | eval risk_object_type=case(threat_match_field=""query"" OR threat_match_field==""src"" OR threat_match_field==""dest"",""system"",threat_match_field==""src_user"" OR threat_match_field==""user"",""user"",1=1,""other"")
| eval risk_object=threat_match_value
| lookup p_default_hash_risklist.csv Name as threat_match_value OUTPUT Risk as Risk_hash
| lookup p_default_domain_risklist.csv Name as threat_match_value OUTPUT Risk as Risk_domain
| where ((isnotnull(Risk_domain) OR isnotnull(Risk_hash) OR isnotnull(RiskString)) AND (Risk_domain > 50 OR Risk_hash > 50))",1057
Threat - HDSI Sunburst Activity Detected - Rule,1,SA-HLThreatIntelligenceFeed,"index=threat_activity `hdsi_sunburst_detected_customizations` threat_match_value IN (""d0d626deb3f9484e649294a8dfa814c5568f846d5aa02d4cdad5d041a29d5600"", ""53f8dfc65169ccda021b72a62e0c22a4db7c4077f002fa742717d41b3c40f2c7"", ""019085a76ba7126fff22770d71bd901c325fc68ac55aa743327984e89f4b0134"", ""ce77d116a074dab7a22a0fd4f2c1ab475f16eec42e1ded3c0b0aa8211fe858d6"", ""32519b85c0b422e4656de6e6c41878e95fd95026267daab4215ee59c107d6c77"", ""292327e5c94afa352cc5a02ca273df543f2020d0e76368ff96c84f4e90778712"", ""c15abaf51e78ca56c0376522d699c978217bf041a3bd3c71d09193efa5717c71"", ""1b476f58ca366b54f34d714ffce3fd73cc30db1a"", ""47d92d49e6f7f296260da1af355f941eb25360c4"", ""2f1a5a7411d015d01aaee4535835400191645023"", ""d130bd75645c2433f88ac03e73395fba172ef676"", ""76640508b1e7759e548771a5359eaed353bf1eec"", ""c2c30b3a287d82f88753c85cfb11ec9eb1466bad"", ""75af292f34789a1c782ea36c7127bf6106f595e8"", ""13.59.205.66"", ""54.193.127.66"", ""54.215.192.52"", ""34.203.203.23"", ""139.99.115.204"", ""5.252.177.25"", ""5.252.177.21"", ""204.188.205.176"", ""51.89.125.18"", ""167.114.213.199"", ""freescanonline.com"", ""deftsecurity.com"", ""freescanonline.com"", ""thedoccloud.com"", ""websitetheme.com"", ""highdatabase.com"", ""incomeupdate.com"", ""databasegalore.com"", ""panhardware.com"", ""zupertech.com"")
| dedup threat_match_field,threat_match_value 
| `get_event_id` 
| table _time,_raw,event_id,source,src,dest,threat*,weight 
| rename weight as record_weight 
| `get_threat_attribution(threat_key)` 
| rename source_* as threat_source_*,description as threat_description 
| eval risk_score=case(isnum(record_weight), record_weight, isnum(weight), weight, 1=1, null()) 
| convert ctime(_time) AS orig_time 
| fields - threat_source_processed_time, source_processed_time, time 
| eval risk_object_type=case(threat_match_field=""query"" OR threat_match_field==""src"" OR threat_match_field==""dest"",""system"",threat_match_field==""src_user"" OR threat_match_field==""user"",""user"",1=1,""other"") 
| eval risk_object=threat_match_value",
Threat - HDSI Suspicious Outbound Solarwinds Connection - Rule,1,DA-ESS-NetworkProtection,"index=pan_logs sourcetype=""pan:traffic"" src_ip IN (""172.27.1.162"", ""172.27.1.18"", ""172.27.1.164"", ""172.27.1.165"", ""172.27.1.166"", ""172.27.1.38"", ""172.27.1.39"", ""10.74.20.40"", ""10.74.20.41"", ""10.74.20.36"", ""10.75.20.140"", ""10.75.20.191"") dest_ip IN (""13.59.205.66"", ""54.193.127.66"", ""3.87.182.149"", ""3.16.81.254"", ""54.215.192.52"", ""18.253.52.187"", ""34.203.203.23"", ""54.215.192.52"", ""18.220.219.143"", ""139.99.115.204"", ""13.57.184.217"", ""34.219.234.134"", ""5.252.177.25"", ""5.252.177.21"", ""204.188.205.176"", ""51.89.125.18"", ""162.223.31.184"", ""173.237.190.2"", ""45.141.152.18"") NOT rule=""Allow_Orion_Servers_Outbound""
    | stats count, values(action) as action, values(dest_port) as dest_port, values(user) as user by src_ip,dest_ip",
Threat - HDSI: Allowed Outbound Threat Traffic - Rule,1,DA-ESS-NetworkProtection,"| tstats summariesonly=true allow_old_summaries=true values(sourcetype) AS sourcetype, latest(_time) AS latest_time, earliest(_time) AS earliest_time from datamodel=Network_Traffic.All_Traffic
        where ((`hdsi_rfc1918(All_Traffic.src)`) All_Traffic.action!=""blocked"" All_Traffic.rule!=""sinkhole"" `hdsi_exclude_guest_wireless(All_Traffic.src)` ) by All_Traffic.src,All_Traffic.dest,All_Traffic.action,All_Traffic.user,All_Traffic.dvc,All_Traffic.app
      | `drop_dm_object_name(All_Traffic)`
      | search ([ search index=notable threat_category=""threatlist_direct_csv"" threat_collection=ip_intel threat_match_value=* 
       | lookup p_default_ip_threatfeed.csv Name as threat_match_value
       | where isnotnull(Risk) OR isnotnull(RiskString) 
       | search Risk>90
       | dedup threat_match_field,threat_match_value
       | search threat_collection=""ip_intel"" threat_match_field=""dest""
       | table dest ])
      | stats values(sourcetype) AS sourcetype values(earliest_time) AS earliest_time values(latest_time) AS latest_time values(dest) as dest by src,action,user,dvc,app
      | eval time_diff=floor(latest_time-earliest_time)/60
      | convert ctime(latest_time) ctime(earliest_time)",
Threat - HDSI: Attempted TOR Connections - Rule,1,SplunkEnterpriseSecuritySuite,"| tstats values(All_Traffic.dest) as ""dest"",values(All_Traffic.user) as ""user"",count from datamodel=Network_Traffic.All_Traffic where (All_Traffic.app=tor) `hdsi_exclude_guest_wireless(All_Traffic.src)` `hdsi_exclude_email_servers(All_Traffic)` `hdsi_exclude_known_scanners(All_Traffic)` by All_Traffic.src,All_Traffic.dvc,All_Traffic.action,All_Traffic.src_zone,All_Traffic.dest_zone | `drop_dm_object_name(All_Traffic)` | `get_asset(src)` | fields - src_asset_id,src_category,src_city,src_is_expected,src_lat,src_long,src_pci_domain,src_requires_av,src_should_timesync,src_should_update,src_ip",1090
Threat - Notable Owners - Lookup Gen,1,SA-ThreatIntelligence,"| rest splunk_server=local count=0 /services/authentication/users | search capabilities=""can_own_notable_events"" | rename title as owner | append [| makeresults | eval owner=""unassigned"" ] | eval _key=owner | eval realname=if(isnull(realname) or realname="""", null(), realname) | table _key owner realname | outputlookup notable_owners_lookup | stats count",None
Threat - Recorded Future Alert Detected - Rule,1,SplunkEnterpriseSecuritySuite,"index=recordedfuture sourcetype=rf:alerts (alert_title=""Leaked Credential Monitoring*"" OR alert_title=""IP Address Mentions*"" OR alert_title=""Amway Code Repository Mentions*"" OR alert_title=""Domains on Suspicious Sources*"")
| dedup alert_id alert_triggered
| eval alert_triggered=`to_time('alert_triggered')`
| table alert_triggered, alert_title, alert_rule_name alert_url alert_id",
Threat - Refresh Governance - Administrative,1,SA-ThreatIntelligence,| rest splunk_server=local count=0 /services/alerts/governance/_reload,
Threat - Refresh Reviewstatuses - Administrative,1,SA-ThreatIntelligence,| rest splunk_server=local count=0 /services/alerts/reviewstatuses/_reload,
Threat - Risk Correlation By System - Lookup Gen,1,SA-ThreatIntelligence,"| tstats summariesonly=false sum(All_Risk.calculated_risk_score) as risk_score from datamodel=Risk.All_Risk where All_Risk.risk_object_type=""system"" by All_Risk.risk_object | eval dest=lower('All_Risk.risk_object') | `get_asset(dest)` | eval dest=mvdedup(if(isnotnull(dest_asset_id),mvappend(dest,lower(dest_asset)),dest)) | stats sum(risk_score) as risk_score by dest | rename dest as risk_object | outputlookup risk_correlation_by_system_lookup | stats count",None
Threat - Risk Correlation By User - Lookup Gen,1,SA-ThreatIntelligence,"| tstats summariesonly=false sum(All_Risk.calculated_risk_score) as risk_score from datamodel=Risk.All_Risk where All_Risk.risk_object_type=""user"" by All_Risk.risk_object | eval user=lower('All_Risk.risk_object') | `get_identity4events(user)` | eval risk_object=if(isnotnull(user_identity),lower(user_identity),user),risk_object=mvdedup(risk_object) | stats sum(risk_score) as risk_score by risk_object | outputlookup risk_correlation_by_user_lookup | stats count",None
Threat - Suppressed Notables - Summary Gen,1,SA-ThreatIntelligence,"`suppressed_notables` | stats count by security_domain, rule_name, urgency, suppression",None
Threat - Threat List Activity - Rule,1,DA-ESS-ThreatIntelligence,"| from datamodel:""Threat_Intelligence"".""Threat_Activity"" | dedup threat_match_field,threat_match_value | `get_event_id` | table _raw,event_id,source,src,dest,src_user,user,threat*,weight | rename weight as record_weight | `per_panel_filter(""ppf_threat_activity"",""threat_match_field,threat_match_value"")` | `get_threat_attribution(threat_key)` | rename source_* as threat_source_*,description as threat_description | fields - *time | eval risk_score=case(isnum(record_weight), record_weight, isnum(weight) AND weight=1, 60, isnum(weight), weight, 1=1, null()),risk_system=if(threat_match_field IN(""query"", ""answer""),threat_match_value,null()),risk_hash=if(threat_match_field IN(""file_hash""),null(),threat_match_value),risk_network=if(threat_match_field IN(""http_user_agent"", ""url"") OR threat_match_field LIKE ""certificate_%"",null(),threat_match_value),risk_host=if(threat_match_field IN(""file_name"", ""process"", ""service"") OR threat_match_field LIKE ""registry_%"",null(),threat_match_value),risk_other=if(threat_match_field IN(""query"", ""answer"", ""src"", ""dest"", ""src_user"", ""user"", ""file_hash"", ""http_user_agent"", ""url"", ""file_name"", ""process"", ""service"") OR threat_match_field LIKE ""certificate_%"" OR threat_match_field LIKE ""registry_%"",null(),threat_match_value)",
Threats - Disable Suppressions - Administrative,1,SA-ThreatIntelligence,| rest splunk_server=local count=0 /services/alerts/suppressions/-/_autodisable,
Traffic - Maximum Bytes,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` max(All_Traffic.bytes) as current_max from datamodel=Network_Traffic.All_Traffic where earliest=-24h@h latest=+0s All_Traffic.bytes>0 | appendcols [| tstats `summariesonly` max(All_Traffic.bytes) as historical_max from datamodel=Network_Traffic.All_Traffic where earliest=-48h@h latest=-24h@h All_Traffic.bytes>0] | `get_delta(current_max,historical_max)`",
Traffic - Mean Bytes,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` avg(All_Traffic.bytes) as current_mean from datamodel=Network_Traffic.All_Traffic where earliest=-24h@h latest=+0s All_Traffic.bytes>0 | appendcols [| tstats `summariesonly` avg(All_Traffic.bytes) as historical_mean from datamodel=Network_Traffic.All_Traffic where earliest=-48h@h latest=-24h@h All_Traffic.bytes>0] | `get_delta(current_mean,historical_mean)`",
Traffic - Minimum Bytes,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` min(All_Traffic.bytes) as current_min from datamodel=Network_Traffic.All_Traffic where earliest=-24h@h latest=+0s All_Traffic.bytes>0 | appendcols [| tstats `summariesonly` min(All_Traffic.bytes) as historical_min from datamodel=Network_Traffic.All_Traffic where earliest=-48h@h latest=-24h@h All_Traffic.bytes>0] | `get_delta(current_min,historical_min)`",
Traffic - Standard Deviation Bytes,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` stdev(All_Traffic.bytes) as current_stdev from datamodel=Network_Traffic.All_Traffic where earliest=-24h@h latest=+0s All_Traffic.bytes>0 | appendcols [| tstats `summariesonly` stdev(All_Traffic.bytes) as historical_stdev from datamodel=Network_Traffic.All_Traffic where earliest=-48h@h latest=-24h@h All_Traffic.bytes>0] | `get_delta(current_stdev,historical_stdev)`",
Traffic - Stream Connections,1,DA-ESS-NetworkProtection,| tstats `summariesonly` count as current_count from datamodel=Network_Traffic.All_Traffic where All_Traffic.transport=tcp `src_stream` earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Network_Traffic.All_Traffic where All_Traffic.transport=tcp `src_stream` earliest=-48h@h latest=-24h@h] | `get_delta`,
Traffic - Total Bytes,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` sum(All_Traffic.bytes) as current_bytes from datamodel=Network_Traffic.All_Traffic where All_Traffic.bytes>0 earliest=-24h@h latest=+0s | appendcols [ | tstats `summariesonly` sum(All_Traffic.bytes) as historical_bytes from datamodel=Network_Traffic.All_Traffic where All_Traffic.bytes>0 earliest=-48h@h latest=-24h@h] | `get_delta(current_bytes, historical_bytes)`",
Traffic - Total Count,1,DA-ESS-NetworkProtection,| tstats `summariesonly` count as current_count from datamodel=Network_Traffic.All_Traffic where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Network_Traffic.All_Traffic where earliest=-48h@h latest=-24h@h] | `get_delta`,
Traffic - Total Encrypted Connections,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count as current_count from datamodel=Certificates.All_Certificates where nodename=""All_Certificates.SSL"" All_Certificates.tag=""network"" All_Certificates.tag=""communicate"" earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` count as historical_count from datamodel=Certificates.All_Certificates where nodename=""All_Certificates.SSL"" All_Certificates.tag=""network"" All_Certificates.tag=""communicate"" earliest=-24h@h latest=+0s earliest=-48h@h latest=-24h@h] | `get_delta`",
Traffic - Unique Destinations,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(All_Traffic.dest) as current_count from datamodel=Network_Traffic.All_Traffic where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(All_Traffic.dest) as historical_count from datamodel=Network_Traffic.All_Traffic where earliest=-48h@h latest=-24h@h] | `get_delta`,
Traffic - Unique Network Protocols,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(all_traffic.app) as current_count from datamodel=Network_Traffic.All_Traffic where earliest=-24h@h latest=+0s `cim_filter_unknown_values(All_Traffic.app)` | appendcols [|tstats `summariesonly` estdc(all_traffic.app) as historical_count from datamodel=Network_Traffic.All_Traffic where earliest=-48h@h latest=-24h@h `cim_filter_unknown_values(All_Traffic.app)`] | `get_delta`,
Traffic - Unique Sources,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(All_Traffic.src) as current_count from datamodel=Network_Traffic.All_Traffic where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(All_Traffic.src) as historical_count from datamodel=Network_Traffic.All_Traffic where earliest=-48h@h latest=-24h@h] | `get_delta`,
UIM Alarm Processing Issues,675,,"'| dbxquery query=""SELECT count(*) FROM \""CA_UIM\"".\""dbo\"".\""NAS_ALARMS\"" where DATEADD(S, arrival, ' | dbxquery query=""SELECT count(*) FROM \""CA_UIM\"".\""dbo\"".\""NAS_ALARMS\"" where DATEADD(S, arrival, '1970-01-01') >= DATEADD(minute, -30, GETDATE())"" connection=""UIM-PD-Database""",admin
UIM Alert Processing Failure,169,,"'| dbxquery query=""SELECT count(*) FROM \""CA_UIM\"".\""dbo\"".\""NAS_ALARMS\"" where DATEADD(S, arrival, ' | dbxquery query=""SELECT count(*) FROM \""CA_UIM\"".\""dbo\"".\""NAS_ALARMS\"" where DATEADD(S, arrival, '1970-01-01') >= DATEADD(minute, -30, GETDATE())"" connection=""UIM-PD-Database""",admin
Update auditd_host_inventory KVStore collection,16,TA-linux_auditd,"[|inputlookup auditd_indices] [|inputlookup auditd_sourcetypes] type=""DAEMON_START"" | dedup host | rex field=kernel ""^(?<kernel_version>[0-9\-\.]+)\.(?<distribution_release>[^\.]+)\.?(?<architecture>.*)"" | eval architecture =if(architecture=="""",""unknown"",architecture) | table host kernel_version distribution_release architecture | rename host as _key | lookup auditd_host_inventory _key OUTPUT last_boot | outputlookup append=true auditd_host_inventory",
Update auditd_hosts lookup,16,TA-linux_auditd,| tstats values(host) as host WHERE [|inputlookup auditd_indices] [|inputlookup auditd_sourcetypes] | mvexpand host limit=0 | outputlookup auditd_hosts,
Update auditd_indices lookup,16,TA-linux_auditd,| tstats values(sourcetype) as sourcetype where index=* [|inputlookup auditd_sourcetypes] by index | table index | outputlookup auditd_indices,
Update last_boot in auditd_host_inventory KVStore collection,16,TA-linux_auditd,"| pivot Auditd Auditd latest(_time) as time FILTER type in (SYSTEM_BOOT,DAEMON_START,SYSTEM_SHUTDOWN,DAEMON_END) SPLITROW host SPLITROW type | convert timeformat=""%Y-%m-%dT%H:%M:%S.%3N%z"" mktime(time) as last_boot | sort -last_boot | dedup host | eval last_boot=if(type==""SYSTEM_SHUTDOWN"",0,round(last_boot)) | table host last_boot | rename host AS _key | lookup auditd_host_inventory _key OUTPUT kernel_version distribution_release architecture | outputlookup append=true auditd_host_inventory",
Update learnt_posix_identities KVStore collection,16,TA-linux_auditd,"[|inputlookup auditd_indices] [|inputlookup auditd_sourcetypes] type=""USER_START"" acct=* NOT acct=root NOT auid=0 terminal=/dev/tty* OR NOT addr=? NOT auid=4294967295 | dedup auid | table auid acct | rename auid as _key | rename acct as user | outputlookup append=true learnt_posix_identities",
Updates - Available Updates,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates.Updates where earliest=-30d@d latest=+0s by Updates.dest,Updates.signature_id,Updates.vendor_product | search status=available | stats count as current_count | appendcols [| tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates.Updates where earliest=-37d@d latest=-7d@d by Updates.dest,Updates.signature_id,Updates.vendor_product | search status=available | stats count as historical_count] | `get_delta`",
Updates - Installed Updates,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates.Updates where earliest=-30d@d latest=+0s by Updates.dest,Updates.signature_id,Updates.vendor_product | search status=installed | stats count as current_count | appendcols [| tstats `summariesonly` latest(Updates.status) as status from datamodel=Updates.Updates where earliest=-37d@d latest=-7d@d by Updates.dest,Updates.signature_id,Updates.vendor_product | search status=installed | stats count as historical_count] | `get_delta`",
Updates - Number Of Systems Not Updating,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` min(_time) as firstTime from datamodel=Updates.Updates where Updates.status=installed by Updates.dest,Updates.signature_id,Updates.vendor_product | `drop_dm_object_name(""Updates"")` | stats max(firstTime) as lastTime by dest | `dayDiff(lastTime)` | search dayDiff>30 | stats count",
Updates - Number Of Systems With Start Mode Anomalies,1,DA-ESS-EndpointProtection,"| tstats `summariesonly` latest(Services.start_mode) as start_mode,latest(Services.status) as status from datamodel=Endpoint.Services where earliest=-24h@h latest=+0s Services.tag=update by Services.dest | `drop_dm_object_name(""Services"")` | search start_mode!=auto | stats count as current_count | appendcols [| tstats `summariesonly` latest(Services.start_mode) as start_mode,latest(Services.status) as status from datamodel=Endpoint.Services where earliest=-48h@h latest=-24h@h Services.tag=update by Services.dest | `drop_dm_object_name(""Services"")` | search start_mode!=auto | stats count as historical_count] | `get_delta`",
User Authentication Watchlist - MYUMOHIN,1,search,"index=domain user=myumohin subject=""A user account was enabled"" | stats count by _time index user signature",
Utils - User Realnames - Lookup Gen,2027,SA-Utils,"rest /services/authentication/users | rename title as user | eval _key=user | eval realname=if(isnull(realname) or realname="""", null(), realname) | table _key user realname | outputlookup user_realnames_lookup | stats count | rest /services/authentication/users | rename title as user | eval _key=user | eval realname=if(isnull(realname) or realname="""", null(), realname) | table _key user realname | outputlookup user_realnames_lookup | stats count | rest splunk_server=local count=0 /services/authentication/users | rename title as user | eval _key=user | dedup _key | eval realname=if(isnull(realname) or realname="""", null(), realname) | table _key user realname | outputlookup key_field=_key user_realnames_lookup | stats count",admin
Vietnam Summary Search,1,search,"index=pan_logs sourcetype=pan:traffic 
user_managedBy=""\""Amway Vietnam Co. Ltd.\"""" 
(category!=""Office 365 URL List"" AND category!=""Webex URL List"" AND category!=""Jabber""
AND category!=""private-ip-addresses"" AND category!=""web-advertisements"")
(app!=""Jabber*"" AND app!=""outlook*"" AND app!=""webex*"") (rule!=""Allow_Outlook_Access"" AND rule!=""Allow-Outlook-Jabber-Access-URL"" AND rule!=""JuniperVPN_Standard_Access"" AND rule!=""Default-Services-Allow-Sinkhole"" AND rule!=""Default-Services-Allow"" AND rule!=""AITS_Allow_Services"" AND rule!=""Firewall_Admin"" AND rule!=""Clean Up Rule"" AND rule!=""Cleanup-Deny-All"" AND rule!=""AITS-App-Specific-Block"" AND rule!=""AITS-WLC-Client-Inbound"" AND rule!=JuniperVPN_Privileged_Access AND rule!=""JuniperVPN_Admin_In"" AND rule!=""JuniperVPN_Admin_Out"")
| transaction src_user maxpause=180s
| stats sum(duration) AS Seconds BY src_user , user_first, user_last, user_bunit",
Vuln - Average Vulnerability Age,1,DA-ESS-NetworkProtection,| `vulnerability_tracker(lastTime)` | where firstTime!=lastTime | eval dayDiff=(lastTime-firstTime)/86400 | stats avg(dayDiff) as current_avg,
Vuln - Average Vulns Per System,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` dc(Vulnerabilities.signature) as signature_count from datamodel=Vulnerabilities.Vulnerabilities where earliest=-30d@d latest=+0s `cim_filter_vuln_severity(""Vulnerabilities"")` by Vulnerabilities.dest | `drop_dm_object_name(""Vulnerabilities"")` | stats avg(signature_count) as current_avg | appendcols [| tstats `summariesonly` dc(Vulnerabilities.signature) as signature_count from datamodel=Vulnerabilities.Vulnerabilities where earliest=-60d@d latest=-30d@d `cim_filter_vuln_severity(""Vulnerabilities"")` by Vulnerabilities.dest | `drop_dm_object_name(""Vulnerabilities"")` | stats avg(signature_count) as historical_avg] | `get_delta(current_avg,historical_avg)`",
Vuln - Percentage Of Vulnerable Systems,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` values(Vulnerabilities.severity) as severity from datamodel=Vulnerabilities.Vulnerabilities by Vulnerabilities.dest | `drop_dm_object_name(""Vulnerabilities"")` | eval filtered_severity=mvfilter((severity!=""informational"" AND severity!=""low"")) | stats count(eval(isnotnull(severity))) as total_systems,count(eval(isnotnull(filtered_severity))) as vulnerable_systems | eval current_percent=round((vulnerable_systems*100)/total_systems,1) | fillnull value=""?"" current_percent",
Vuln - Total Vulnerabilities,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count from datamodel=Vulnerabilities.Vulnerabilities where earliest=-30d@d latest=+0s `cim_filter_vuln_severity(""Vulnerabilities"")` by Vulnerabilities.signature,Vulnerabilities.dest | stats count as current_count | appendcols [| tstats `summariesonly` count from datamodel=Vulnerabilities.Vulnerabilities where earliest=-60d@d latest=-30d@d `cim_filter_vuln_severity(""Vulnerabilities"")` by Vulnerabilities.signature,Vulnerabilities.dest | stats count as historical_count] | `get_delta`",
Vuln - Vulnerable System Count,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` estdc(Vulnerabilities.dest) as current_count from datamodel=Vulnerabilities.Vulnerabilities where earliest=-30d@d latest=+0s `cim_filter_vuln_severity(""Vulnerabilities"")` | appendcols [| tstats `summariesonly` estdc(Vulnerabilities.dest) as historical_count from datamodel=Vulnerabilities.Vulnerabilities where earliest=-60d@d latest=-30d@d `cim_filter_vuln_severity(""Vulnerabilities"")`] | `get_delta`",
Web - Destination Count,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(Web.dest) as current_count from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.dest!=unknown | appendcols [| tstats `summariesonly` estdc(Web.dest) as historical_count from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.dest!=unknown] | `get_delta`,
Web - HTTP Category Count,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(Web.category) as current_count from datamodel=Web.Web where earliest=-24h@h latest=+0s | appendcols [| tstats `summariesonly` estdc(Web.category) as historical_count from datamodel=Web.Web where earliest=-48h@h latest=-24h@h] | `get_delta`,
Web - HTTP Category Maximum Count,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count as current_max from datamodel=Web.Web where earliest=-24h@h latest=+0s by Web.category | sort 1 - current_max | `drop_dm_object_name(""Web"")` | eval label=current_max."" event(s) for HTTP category: "".category | appendcols [| tstats `summariesonly` count as historical_max from datamodel=Web.Web where earliest=-48h@h latest=-24h@h by Web.category | sort 1 - historical_max | `drop_dm_object_name(""Web"")`] | fields label,current_max,historical_max | `get_delta(current_max,historical_max)`",
Web - HTTP Category Mean Count,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count from datamodel=Web.Web where earliest=-24h@h latest=+0s by Web.category | stats avg(count) as current_mean | appendcols [| tstats `summariesonly` count from datamodel=Web.Web where earliest=-48h@h latest=-24h@h by Web.category | stats avg(count) as historical_mean] | `get_delta(current_mean,historical_mean)`",
Web - HTTP Category Minimum Count,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count as current_min from datamodel=Web.Web where earliest=-24h@h latest=+0s by Web.category | sort 1 + current_min | `drop_dm_object_name(""Web"")` | eval label=current_min."" event(s) for HTTP category: "".category | appendcols [| tstats `summariesonly` count as historical_min from datamodel=Web.Web where earliest=-48h@h latest=-24h@h by Web.category | sort 1 + historical_min | `drop_dm_object_name(""Web"")`] | fields label,current_min,historical_min | `get_delta(current_min,historical_min)`",
Web - HTTP Category Standard Deviation Count,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` count from datamodel=Web.Web where earliest=-24h@h latest=+0s by Web.category | stats stdev(count) as current_stdev | appendcols [| tstats `summariesonly` count from datamodel=Web.Web where earliest=-48h@h latest=-24h@h by Web.category | stats stdev(count) as historical_stdev] | `get_delta(current_stdev,historical_stdev)`",
Web - Source Count,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(Web.src) as current_count from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.src!=unknown | appendcols [| tstats `summariesonly` estdc(Web.src) as historical_count from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.src!=unknown] | `get_delta`,
Web - URL Count,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(Web.url) as current_count from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` estdc(Web.url) as historical_count from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta`,
Web - URL Length Standard Deviation,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` stdev(Web.url_length) as current_length from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` stdev(Web.url_length) as historical_length from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta(current_length,historical_length)`",
Web - URL Maximum Length,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` max(Web.url_length) as current_length from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` max(Web.url_length) as historical_length from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta(current_length,historical_length)`",
Web - URL Mean Length,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` avg(Web.url_length) as current_length from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` avg(Web.url_length) as historical_length from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta(current_length,historical_length)`",
Web - URL Minimum Length,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` min(Web.url_length) as current_length from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.url!=unknown | appendcols [| tstats `summariesonly` min(Web.url_length) as historical_length from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.url!=unknown] | `get_delta(current_length,historical_length)`",
Web - User Agent Count,1,DA-ESS-NetworkProtection,| tstats `summariesonly` estdc(Web.http_user_agent) as current_count from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` estdc(Web.http_user_agent) as historical_count from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta`,
Web - User Agent Length Standard Deviation,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` stdev(Web.http_user_agent_length) as current_length from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` stdev(Web.http_user_agent_length) as historical_length from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta(current_length,historical_length)`",
Web - User Agent Maximum Length,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` max(Web.http_user_agent_length) as current_length from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` max(Web.http_user_agent_length) as historical_length from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta(current_length,historical_length)`",
Web - User Agent Mean Length,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` avg(Web.http_user_agent_length) as current_length from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` avg(Web.http_user_agent_length) as historical_length from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta(current_length,historical_length)`",
Web - User Agent Minimum Length,1,DA-ESS-NetworkProtection,"| tstats `summariesonly` min(Web.http_user_agent_length) as current_length from datamodel=Web.Web where earliest=-24h@h latest=+0s Web.http_user_agent!=unknown | appendcols [| tstats `summariesonly` min(Web.http_user_agent_length) as historical_length from datamodel=Web.Web where earliest=-48h@h latest=-24h@h Web.http_user_agent!=unknown] | `get_delta(current_length,historical_length)`",
Web - Web Event Count By Src By HTTP Method Per 1d - Model Gen,1,SA-NetworkProtection,"| tstats `summariesonly` count as web_event_count from datamodel=Web.Web by Web.src, Web.http_method, _time span=24h | `drop_dm_object_name(""Web"")` | where match(http_method, ""^[A-Za-z]+$"") | fit DensityFunction web_event_count by http_method partial_fit=true dist=norm into app:count_by_http_method_by_src_1d",None
web_ping_inputs_lookup_gen,2025,,"'| rest /services/data/inputs/web_ping | fields title id disabled | rex field=id "".*[/](?<name>[^/]*)"" | eval name=urldecode(name) | eval source=""web_ping://"".urldecode(name) | fields title name source disabled | outputlookup web_ping_inputs.csv' | rest /services/data/inputs/web_ping | fields title id disabled | rex field=id "".*[/](?<name>[^/]*)"" | eval name=urldecode(name) | eval source=""web_ping://"".urldecode(name) | fields title name source disabled | outputlookup web_ping_inputs.csv",splunk-system-user
Website Performance Problem,2025,,"'search sourcetype=""web_ping"" `website_monitoring_search_index` tag!=""exclude_from_alerts"" (`response_codes_to_alert_on` OR timed_out=True OR total_time>`response_time_threshold` OR response_code="""" OR has_expected_string=""false"") 
| fillnull value="""" has_expected_string 
| stats count as count max(total_time) as max_total_time by title url response_code has_expected_string 
| lookup http_response_codes.csv response_code OUTPUT description 
| eval description=response_code."" ("".description."")"" 
| eval description=if(timed_out == ""True"", ""Connection timed out"", description) 
| eval description=if(response_code == """", ""Connection failed"", description) 
| eval description=if(has_expected_string == ""false"", ""Content doesn' search sourcetype=""web_ping"" `website_monitoring_search_index` tag!=""exclude_from_alerts"" (`response_codes_to_alert_on` OR timed_out=True OR total_time>`response_time_threshold` OR response_code="""" OR has_expected_string=""false"") 
| fillnull value="""" has_expected_string 
| stats count as count max(total_time) as max_total_time by title url response_code has_expected_string 
| lookup http_response_codes.csv response_code OUTPUT description 
| eval description=response_code."" ("".description."")"" 
| eval description=if(timed_out == ""True"", ""Connection timed out"", description) 
| eval description=if(response_code == """", ""Connection failed"", description) 
| eval description=if(has_expected_string == ""false"", ""Content doesn't match"", description) 
| eval max_total_time=round(max_total_time, 2)."" ms"" 
| fields - has_expected_string",splunk-system-user
Weekly External Vulnerability Scan Report,1,SplunkEnterpriseSecuritySuite,"| tstats summariesonly=true allow_old_summaries=true count `comment(""HDSI External Vulnerability Scanner Detected"")`
          dc(All_Traffic.dest) AS dest_count
          values(sourcetype) AS traffic_sourcetype
          values(All_Traffic.dvc) AS dvc
          latest(_time) AS latest_time
          earliest(_time) AS earliest_time
          values(All_Traffic.dest_port) AS dest_port
          values(All_Traffic.action) AS action
          from datamodel=Network_Traffic.All_Traffic
          where (( `hdsi_exclude_guest_wireless(""All_Traffic.src"")` 
          OR `hdsi_exclude_known_scanners(All_Traffic)` NOT `hdsi_rfc1918(""All_Traffic.src"")` ) AND All_Traffic.action!=blocked )
          by All_Traffic.src,_time span=60m
          | `drop_dm_object_name(All_Traffic)`
| join type=inner src 
         [| tstats summariesonly=true allow_old_summaries=true count 
          dc(IDS_Attacks.dest) as ""ids_dest_count"", 
          dc(IDS_Attacks.signature) AS ids_sig_count,
          values(IDS_Attacks.action) AS ids_action,
          values(IDS_Attacks.dest) AS ids_attacks_dest,
          values(IDS_Attacks.signature) AS signature, 
          values(IDS_Attacks.severity) AS severity,
          values(sourcetype) AS ids_sourcetype,
          from datamodel=Intrusion_Detection.IDS_Attacks 
          where ((IDS_Attacks.severity!=""low"" AND IDS_Attacks.severity!=""informational"" AND NOT (IDS_Attacks.action=""dropped"" OR IDS_Attacks.action=""blocked"")) `hdsi_exclude_guest_wireless(""IDS_Attacks.src"")` OR `hdsi_exclude_known_scanners(IDS_Attacks)` NOT IDS_Attacks.signature=""*Masscan*"" NOT `hdsi_rfc1918(""IDS_Attacks.src"")`) AND NOT sourcetype=""okta:im"" 
          by IDS_Attacks.src,_time span=60m
              | search ((""ids_dest_count""=1 AND ids_sig_count >=2 AND total_count >=15) OR ids_dest_count>10)
              | fields IDS_Attacks.src, ids_dest_count, ids_attacks_dest, ids_sourcetype, ids_action, ids_sig_count, signature, severity
              | rename IDS_Attacks.src AS src ]
| stats sum(count) AS total_count,
        sum(dest_count) AS total_dest_count, 
        sum(ids_dest_count) AS ids_event_count, 
        values(ids_attacks_dest) AS ids_attacks_dest,
        values(ids_sig_count) AS ids_sig_count, 
        values(ids_action) AS ids_action,
        earliest(_time) AS first_time, 
        latest(_time) AS last_time, 
        values(traffic_sourcetype) AS traffic_sourcetype, 
        values(dvc) AS dvc,
        values(severity) AS severity_id,
        values(ids_sourcetype) AS ids_sourcetype, 
        dc(dest_port) AS dest_port_count, 
        values(action) AS action, 
        values(signature) AS signature by src
| convert ctime(last_time) ctime(first_time)",None
Weekly Unknown or Parked Category Traffic Report,1,SplunkEnterpriseSecuritySuite,"| tstats values(Web.url_category) as ""url_category"",dc(""Web.date_mday"") AS day_count,count from datamodel=Web.Web where (Web.action=""blocked"" (Web.url_category=unknown OR Web.url_category=parked) (Web.user!=unknown)) by ""Web.user"",""Web.url"",""Web.dvc"" | regex Web.url!=""\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\/$"" | `drop_dm_object_name(Web)` | where day_count>=3  | where count>1000",None
WildFire Reports - Retrieve Report,169,,"'search `pan_wildfire` verdict=""malicious"" | panwildfirereport | table wildfire_report | rename wildfire_report AS _raw | collect index=main sourcetype=pan:wildfire_report' search `pan_wildfire` verdict=""malicious"" | panwildfirereport | table wildfire_report | rename wildfire_report AS _raw | collect index=main sourcetype=pan:wildfire_report",splunk-system-user
Year-to-date Ticket Report,1,search,"| inputlookup ticketdetails  
| eval created_at_epoch=strptime(created_at, ""%FT%T%Z"")
| `lookup_timepicker(created_at_epoch)` 
| lookup incident_comments ticket_id AS id OUTPUT comment 
| lookup zendesk_users id AS assignee_id OUTPUT name 
| lookup hl_group_ids.csv group_id OUTPUT team
| lookup amw_requesters.csv requester_id OUTPUT name AS requester_name
| table id, subject, requester_name, team, name, status, priority, created_at, updated_at
| rename id AS ID, subject AS Subject, name AS ""Assignee Name"", status AS Status, priority AS Priority, created_at AS Created, updated_at AS Updated, team AS Team, requester_name AS ""Requester Name""",None
